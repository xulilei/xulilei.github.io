<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Humble</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xulilei.github.io/"/>
  <updated>2020-06-14T10:34:44.087Z</updated>
  <id>https://xulilei.github.io/</id>
  
  <author>
    <name>Mr.Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>十次方DayFour</title>
    <link href="https://xulilei.github.io/2020/06/14/%E5%8D%81%E6%AC%A1%E6%96%B9DayFour/"/>
    <id>https://xulilei.github.io/2020/06/14/%E5%8D%81%E6%AC%A1%E6%96%B9DayFour/</id>
    <published>2020-06-14T10:34:44.000Z</published>
    <updated>2020-06-14T10:34:44.087Z</updated>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch入门</title>
    <link href="https://xulilei.github.io/2020/06/12/elasticSearch%E5%85%A5%E9%97%A8/"/>
    <id>https://xulilei.github.io/2020/06/12/elasticSearch%E5%85%A5%E9%97%A8/</id>
    <published>2020-06-12T07:54:05.000Z</published>
    <updated>2020-06-14T10:28:58.445Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分布式搜索引擎ElasticSearch"><a href="#分布式搜索引擎ElasticSearch" class="headerlink" title="分布式搜索引擎ElasticSearch"></a>分布式搜索引擎ElasticSearch</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><h5 id="与mysql数据库对比"><a href="#与mysql数据库对比" class="headerlink" title="与mysql数据库对比"></a>与mysql数据库对比</h5><table><thead><tr><th align="center">Elasticsearch</th><th align="center">关系型数据库Mysql</th></tr></thead><tbody><tr><td align="center">索引(index)</td><td align="center">数据库(databases)</td></tr><tr><td align="center">类型(type)</td><td align="center">表(table)</td></tr><tr><td align="center">文档(document)</td><td align="center">行(row)</td></tr></tbody></table><h4 id="restful风格操作ElasticSearch"><a href="#restful风格操作ElasticSearch" class="headerlink" title="restful风格操作ElasticSearch"></a>restful风格操作ElasticSearch</h4><h5 id="新建索引"><a href="#新建索引" class="headerlink" title="新建索引"></a>新建索引</h5><p>如果需要创建一个叫articleindex的索引 ,就以put方式提交 </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/</span><br></pre></td></tr></tbody></table></figure><h5 id="新建文档"><a href="#新建文档" class="headerlink" title="新建文档"></a>新建文档</h5><p>新建类型，在索引后追加类型： 以post方式提交 </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article</span><br></pre></td></tr></tbody></table></figure><h5 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h5><h6 id="查询全部"><a href="#查询全部" class="headerlink" title="查询全部"></a>查询全部</h6><p>_search，以get方式请求</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article/_search</span><br></pre></td></tr></tbody></table></figure><h6 id="按ID查询"><a href="#按ID查询" class="headerlink" title="按ID查询"></a>按ID查询</h6><p>以GET方式请求 </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article/1</span><br></pre></td></tr></tbody></table></figure><h6 id="匹配查询"><a href="#匹配查询" class="headerlink" title="匹配查询"></a>匹配查询</h6><p>根据title=aa进行查询，get方式提交下列地址：</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article/_search?q=title:aa</span><br></pre></td></tr></tbody></table></figure><h6 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h6><p>以*用代表任意字符： </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://192.168.184.134:9200/articleindex/article/_search?q=title:*s*</span><br></pre></td></tr></tbody></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><p>以put形式提交以下地址,如果ID存在则修改，否则添加</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article/1</span><br></pre></td></tr></tbody></table></figure><h5 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h5><p>根据ID删除文档,删除ID为1的文档 DELETE方式提交 </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://192.168.184.134:9200/articleindex/article/1</span><br></pre></td></tr></tbody></table></figure><h4 id="head插件操作ElasticSearch"><a href="#head插件操作ElasticSearch" class="headerlink" title="head插件操作ElasticSearch"></a>head插件操作ElasticSearch</h4><h5 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h5><h6 id="步骤1：-下载head插件："><a href="#步骤1：-下载head插件：" class="headerlink" title="步骤1： 下载head插件："></a>步骤1： 下载head插件：</h6><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://github.com/mobz/elasticsearch-head</span><br></pre></td></tr></tbody></table></figure><h6 id="步骤2：-将grunt安装为全局命令"><a href="#步骤2：-将grunt安装为全局命令" class="headerlink" title="步骤2： 将grunt安装为全局命令"></a>步骤2： 将grunt安装为全局命令</h6><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install ‐g grunt‐cli</span><br></pre></td></tr></tbody></table></figure><h6 id="步骤3：解决跨域问题"><a href="#步骤3：解决跨域问题" class="headerlink" title="步骤3：解决跨域问题"></a>步骤3：解决跨域问题</h6><p>修改elasticsearch配置文件：elasticsearch.yml，增加以下两句命令：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span> </span><br><span class="line"><span class="string">http.cors.allow‐origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></tbody></table></figure><h6 id="步骤4：-安装依赖并启动"><a href="#步骤4：-安装依赖并启动" class="headerlink" title="步骤4： 安装依赖并启动"></a>步骤4： 安装依赖并启动</h6><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cnpm install</span><br><span class="line">grunt server</span><br></pre></td></tr></tbody></table></figure><h5 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200614170620.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分布式搜索引擎ElasticSearch&quot;&gt;&lt;a href=&quot;#分布式搜索引擎ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;分布式搜索引擎ElasticSearch&quot;&gt;&lt;/a&gt;分布式搜索引擎ElasticSearch&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="ElasticSearch" scheme="https://xulilei.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>DayThree</title>
    <link href="https://xulilei.github.io/2020/06/09/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <id>https://xulilei.github.io/2020/06/09/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%B8%89%E5%A4%A9/</id>
    <published>2020-06-09T08:25:22.000Z</published>
    <updated>2020-06-14T10:33:49.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day03"><a href="#Day03" class="headerlink" title="Day03"></a>Day03</h2><h4 id="什么是MongoDB"><a href="#什么是MongoDB" class="headerlink" title="什么是MongoDB"></a>什么是MongoDB</h4><p>​    MongoDB 是一个跨平台的，面向文档的数据库，是当前 NoSQL 数据库产品中最热 门 的一种。它介于关系数据库和非关系数据库之间，是非关系数据库当中功能最丰富，最像关系数据库的产品。它支持的数据结构非常松散，是类似 JSON 的 BSON 格式，因此可以存储比较复杂的数据类型。</p><h4 id="MongoDB适用场景"><a href="#MongoDB适用场景" class="headerlink" title="MongoDB适用场景"></a>MongoDB适用场景</h4><p>​    适用于场景数据量大，数据价值相对低的情况</p><h4 id="MongoDB体系结构"><a href="#MongoDB体系结构" class="headerlink" title="MongoDB体系结构"></a>MongoDB体系结构</h4><p>（1）MongoDB 的文档（document），相当于关系数据库中的一行记录。 </p><p>（2）多个文档组成一个集合（collection），相当于关系数据库的表。 </p><p>（3）多个集合（collection），逻辑上组织在一起，就是数据库（database）。</p><h4 id="服务器创建Docker-MongoDB容器"><a href="#服务器创建Docker-MongoDB容器" class="headerlink" title="服务器创建Docker MongoDB容器"></a>服务器创建Docker MongoDB容器</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@pinyoyougou-docker ~]# docker run -di --name=tensquare_mongo -p 27017:27017 mongo</span><br></pre></td></tr></tbody></table></figure><h4 id="MongoDB语法"><a href="#MongoDB语法" class="headerlink" title="MongoDB语法"></a>MongoDB语法</h4><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">use 数据库名称//如果不存在则自动创建</span><br></pre></td></tr></tbody></table></figure><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">db.集合名称.insert(数据);//插入文档的语法格式</span><br><span class="line">比如db.spit.insert({<span class="keyword">content</span>:<span class="string">"听说十次方课程很给力呀"</span>,userid:<span class="string">"1011"</span>,nickname:<span class="string">"小雅"</span>,visits:NumberInt(<span class="number">902</span>)})</span><br></pre></td></tr></tbody></table></figure><h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">db.集合名称.find()//查询所有</span><br><span class="line">db.spit.find().limit(3)//限定返回3条</span><br><span class="line">db.spit.find({userid:'1013'})//查询userid=1013的文档</span><br></pre></td></tr></tbody></table></figure><h5 id="修改与删除数据"><a href="#修改与删除数据" class="headerlink" title="修改与删除数据"></a>修改与删除数据</h5><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">db.集合名称.update(条件,修改后的数据)</span><br><span class="line">//如果我们想修改_id为<span class="number">1</span>的记录，浏览量为<span class="number">1000</span>，输入以下语句：</span><br><span class="line">db.spit.update({_id:<span class="string">"1"</span>},{visits:NumberInt(<span class="number">1000</span>)})</span><br><span class="line">执行后，我们会发现，这条文档除了visits字段其它字段都不见了，为了解决这个问题，我们需要使用修改器$<span class="keyword">set</span>来实现，命令如下：</span><br><span class="line">db.spit.update({_id:<span class="string">"2"</span>},{$<span class="keyword">set</span>:{visits:NumberInt(<span class="number">2000</span>)}})</span><br><span class="line">//删除指定文档</span><br><span class="line">db.集合名称.remove(条件)</span><br></pre></td></tr></tbody></table></figure><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">MongoDB的模糊查询是通过正则表达式的方式实现的</span><br><span class="line">格式为：db.集合名称.find({content:/aaa/})</span><br><span class="line">例如，我要查询吐槽内容包含“流量”的所有文档，代码如下：</span><br><span class="line">db.spit.find({content:/流量/})</span><br><span class="line">如果要查询吐槽内容中以“加班”开头的，代码如下：</span><br><span class="line">db.spit.find({content:/^加班/})</span><br></pre></td></tr></tbody></table></figure><h5 id="大于-小于-不等于"><a href="#大于-小于-不等于" class="headerlink" title="大于 小于 不等于"></a>大于 小于 不等于</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">db.集合名称.find({ "field" : { $gt: value }}) // 大于: field &gt; value</span><br><span class="line">db.集合名称.find({ "field" : { $lt: value }}) // 小于: field &lt; value</span><br><span class="line">db.集合名称.find({ "field" : { $gte: value }}) // 大于等于: field &gt;= value</span><br><span class="line">db.集合名称.find({ "field" : { $lte: value }}) // 小于等于: field &lt;= value</span><br><span class="line">db.集合名称.find({ "field" : { $ne: value }}) // 不等于: field != value</span><br></pre></td></tr></tbody></table></figure><h5 id="包含与不包含"><a href="#包含与不包含" class="headerlink" title="包含与不包含"></a>包含与不包含</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">包含使用$in操作符。</span><br><span class="line">示例：查询吐槽集合中userid字段包含1013和1014的文档</span><br><span class="line">db.spit.find({userid:{$in:["1013","1014"]}})</span><br><span class="line">不包含使用$nin操作符。</span><br><span class="line">示例：查询吐槽集合中userid字段不包含1013和1014的文档</span><br><span class="line">db.spit.find({userid:{$nin:["1013","1014"]}})</span><br></pre></td></tr></tbody></table></figure><h5 id="条件连接"><a href="#条件连接" class="headerlink" title="条件连接"></a>条件连接</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">我们如果需要查询同时满足两个以上条件，需要使用$and操作符将条件进行关联。（相当于SQL的and）</span><br><span class="line">格式为：$and:[{ },{ },{ }]</span><br><span class="line">示例：查询吐槽集合中visits大于等于1000 并且小于2000的文档</span><br><span class="line">db.spit.find({$and:[ {visits:{$gte:1000}} ,{visits:{$lt:2000}}]})</span><br><span class="line"></span><br><span class="line">如果两个以上条件之间是或者的关系，我们使用 操作符进行关联，与前面and的使用方式相同</span><br><span class="line">格式为：$or:[{ },{ },{ }]</span><br><span class="line">示例：查询吐槽集合中userid为1013，或者浏览量小于2000的文档记录</span><br><span class="line">db.spit.find({$or:[ {userid:"1013"} ,{visits:{$lt:2000} }]})</span><br></pre></td></tr></tbody></table></figure><h5 id="列值增长"><a href="#列值增长" class="headerlink" title="列值增长"></a>列值增长</h5><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">如果我们想实现对某列值在原有值的基础上进行增加或减少，可以使用$inc运算符来实现</span><br><span class="line">db.spit.update({_id:<span class="string">"2"</span>},{$inc:{visits:NumberInt(<span class="number">1</span>)}})</span><br></pre></td></tr></tbody></table></figure><h4 id="JAVA操作MongoDB"><a href="#JAVA操作MongoDB" class="headerlink" title="JAVA操作MongoDB"></a>JAVA操作MongoDB</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDemo</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    MongoClient client=<span class="keyword">new</span> MongoClient(<span class="string">"192.168.184.134"</span>);<span class="comment">//创建连接</span></span><br><span class="line">    MongoDatabase spitdb = client.getDatabase(<span class="string">"spitdb"</span>);<span class="comment">//打开数据库</span></span><br><span class="line">    MongoCollection&lt;Document&gt; spit = spitdb.getCollection(<span class="string">"spit"</span>);<span class="comment">//获取集合</span></span><br><span class="line">     <span class="comment">//条件查询</span></span><br><span class="line">     <span class="comment">//BasicDBObject bson=new BasicDBObject("userid","1013");// 构建查询条件</span></span><br><span class="line">     <span class="comment">//BasicDBObject bson=new BasicDBObject("visits",newBasicDBObject("$gt",1000) );</span></span><br><span class="line">     <span class="comment">//FindIterable&lt;Document&gt; documents = spit.find(bson);//查询记录获取结果集合</span></span><br><span class="line">    FindIterable&lt;Document&gt; documents = spit.find();<span class="comment">//查询记录获取文档集合</span></span><br><span class="line">    <span class="keyword">for</span>(Document document:documents){ <span class="comment">//</span></span><br><span class="line">      System.out.println(<span class="string">"内容："</span>+ document.getString(<span class="string">"content"</span>));</span><br><span class="line">      System.out.println(<span class="string">"用户ID:"</span>+document.getString(<span class="string">"userid"</span>));</span><br><span class="line">      System.out.println(<span class="string">"浏览量："</span>+document.getInteger(<span class="string">"visits"</span>));</span><br><span class="line">    }</span><br><span class="line">     <span class="comment">//插入数据</span></span><br><span class="line">     Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap();</span><br><span class="line">     map.put(<span class="string">"content"</span>,<span class="string">"我要吐槽"</span>);</span><br><span class="line">     map.put(<span class="string">"userid"</span>,<span class="string">"9999"</span>);</span><br><span class="line">     map.put(<span class="string">"visits"</span>,<span class="number">123</span>);</span><br><span class="line">     map.put(<span class="string">"publishtime"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">     Document document=<span class="keyword">new</span> Document(map);</span><br><span class="line">     spit.insertOne(document);</span><br><span class="line">     client.close();<span class="comment">//关闭连接</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="SpringDataMongoDB"><a href="#SpringDataMongoDB" class="headerlink" title="SpringDataMongoDB"></a>SpringDataMongoDB</h4><p>增删改查与SpringDataJPA几乎一样，详细用法参考<a href="https://xulilei.github.io/2020/06/08/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AEDay2/">https://xulilei.github.io/2020/06/08/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AEDay2/</a></p><h5 id="通过MongoTemplate原生方式实现数据自增"><a href="#通过MongoTemplate原生方式实现数据自增" class="headerlink" title="通过MongoTemplate原生方式实现数据自增"></a>通过MongoTemplate原生方式实现数据自增</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thumbUp</span><span class="params">(String id)</span></span>{</span><br><span class="line">        <span class="comment">//方式一,与数据库多次交互性能较低</span></span><br><span class="line">        Spit spit=spitDao.findById(id).get();</span><br><span class="line">        spit.setThumbup((spit.getThumbup()==<span class="keyword">null</span>?<span class="number">0</span>:spit.getThumbup())+<span class="number">1</span>);</span><br><span class="line">        spitDao.save(spit);</span><br><span class="line">        <span class="comment">//相当于使用原生mongo命令实现自增：db.spit.update({"_id":"1"},{$inc:{thumbup:NumberInt(1)}})</span></span><br><span class="line">        Query query=<span class="keyword">new</span> Query();</span><br><span class="line">        query.addCriteria(Criteria.where(<span class="string">"_id"</span>).is(<span class="string">"id"</span>));</span><br><span class="line">        Update update=<span class="keyword">new</span> Update();</span><br><span class="line">        update.inc(<span class="string">"thumbup"</span>,<span class="number">1</span>);</span><br><span class="line">        mongoTemplate.updateFirst(query,update,<span class="string">"spit"</span>);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Day03&quot;&gt;&lt;a href=&quot;#Day03&quot; class=&quot;headerlink&quot; title=&quot;Day03&quot;&gt;&lt;/a&gt;Day03&lt;/h2&gt;&lt;h4 id=&quot;什么是MongoDB&quot;&gt;&lt;a href=&quot;#什么是MongoDB&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="MongoDB" scheme="https://xulilei.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>DayTwo</title>
    <link href="https://xulilei.github.io/2020/06/08/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AEDay2/"/>
    <id>https://xulilei.github.io/2020/06/08/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AEDay2/</id>
    <published>2020-06-08T07:23:13.000Z</published>
    <updated>2020-06-14T10:34:09.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringDataJpa"><a href="#SpringDataJpa" class="headerlink" title="SpringDataJpa"></a>SpringDataJpa</h3><h4 id="通过new-Specification实现条件查询"><a href="#通过new-Specification实现条件查询" class="headerlink" title="通过new Specification实现条件查询"></a>通过new Specification实现条件查询</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Label&gt; <span class="title">findSearch</span><span class="params">(Label label)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> labelDao.findAll(<span class="keyword">new</span> Specification&lt;Label&gt;() {</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 采用内部类，方式实现</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root 根对象，也就是说要把条件封装到哪个对象中去</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> query 查询关键字，比如groupBy，orderBy等</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cb 用来封装条件对象的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> 如果返回null，则代表不需要任何条件</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Label&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>{</span><br><span class="line">                List&lt;Predicate&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="comment">//相当于 where labelname like "%小明%"</span></span><br><span class="line">                <span class="keyword">if</span>(label.getLabelname()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getLabelname())){</span><br><span class="line">                    Predicate predicate = cb.like(root.get("labelname").as(String.class), "%" +           label.getLabelname() + "%");</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                }</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(label.getState()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getState())){</span><br><span class="line">                    Predicate predicate = cb.equal(root.get(<span class="string">"state"</span>).as(String<span class="class">.<span class="keyword">class</span>),  <span class="title">label</span>.<span class="title">getState</span>())</span>;</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                }</span><br><span class="line">                Predicate[] parr=<span class="keyword">new</span> Predicate[list.size()];</span><br><span class="line">                list.toArray(parr);</span><br><span class="line">                <span class="comment">//相当于查询where condition A and condition B</span></span><br><span class="line">                <span class="keyword">return</span> cb.and(parr);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"><span class="comment">//controller层</span></span><br><span class="line"> <span class="meta">@RequestMapping</span>(value = <span class="string">"/search"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findSearch</span><span class="params">(@RequestBody Label label)</span></span>{</span><br><span class="line">        List&lt;Label&gt;list=labelService.findSearch(label);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"查询成功"</span>,list);</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h4 id="分页与条件查询"><a href="#分页与条件查询" class="headerlink" title="分页与条件查询"></a>分页与条件查询</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Label&gt; <span class="title">findSearchAndPageQuery</span><span class="params">(Label label, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">        <span class="comment">//封装一个分页对象</span></span><br><span class="line">        Pageable pageable=PageRequest.of(page-<span class="number">1</span>,size);</span><br><span class="line">        <span class="keyword">return</span> labelDao.findAll(<span class="keyword">new</span> Specification&lt;Label&gt;() {</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root 根对象，也就是说要把条件封装到哪个对象中去</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> query 查询关键字，比如groupBy，orderBy等</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cb 用来封装条件对象的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> 如果返回null，则代表不需要任何条件</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Label&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>{</span><br><span class="line">                List&lt;Predicate&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="comment">//相当于 where labelname like "%小明%"</span></span><br><span class="line">                <span class="keyword">if</span>(label.getLabelname()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getLabelname())){</span><br><span class="line">                    Predicate predicate = cb.like(root.get("labelname").as(String.class), "%" + label.getLabelname() + "%");</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(label.getState()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getState())){</span><br><span class="line">                    Predicate predicate = cb.equal(root.get(<span class="string">"state"</span>).as(String<span class="class">.<span class="keyword">class</span>),  <span class="title">label</span>.<span class="title">getState</span>())</span>;</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                }</span><br><span class="line">                Predicate[] parr=<span class="keyword">new</span> Predicate[list.size()];</span><br><span class="line">                list.toArray(parr);</span><br><span class="line">                <span class="keyword">return</span> cb.and(parr);</span><br><span class="line">            }</span><br><span class="line">        },pageable);</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//controller层</span></span><br><span class="line"> <span class="meta">@RequestMapping</span>(value = <span class="string">"/search/{page}/{size}"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findSearchAndPageQuery</span><span class="params">(@RequestBody Label label,@PathVariable <span class="keyword">int</span> page,@PathVariable <span class="keyword">int</span> size)</span></span>{</span><br><span class="line">        Page&lt;Label&gt; pageData=labelService.findSearchAndPageQuery(label,page,size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"查询成功"</span>,<span class="keyword">new</span> PageResult&lt;Label&gt;(pageData.getTotalElements(),pageData.getContent()));</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//用来封装pageResult的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; rows;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotal</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(<span class="keyword">long</span> total)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getRows</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRows</span><span class="params">(List&lt;T&gt; rows)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.rows = rows;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(<span class="keyword">long</span> total, List&lt;T&gt; rows)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.rows = rows;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="在Dao层通过方法命名方式生成sql语句"><a href="#在Dao层通过方法命名方式生成sql语句" class="headerlink" title="在Dao层通过方法命名方式生成sql语句"></a>在Dao层通过方法命名方式生成sql语句</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EnterpriseDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Enterprise</span>,<span class="title">String</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Enterprise</span>&gt;</span>{</span><br><span class="line">      <span class="comment">//相当于where ishot=? </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Enterprise&gt; <span class="title">findByIshot</span><span class="params">(String ishot)</span></span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RecruitDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Recruit</span>,<span class="title">String</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Recruit</span>&gt;</span>{</span><br><span class="line"><span class="comment">//相当于where state=？ order by Createtime，并且取前6个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Recruit&gt; <span class="title">findTop6ByStateOrderByCreatetimeDesc</span><span class="params">(String state)</span></span>;</span><br><span class="line">    <span class="comment">//相当于where state！=？order by createtime。并且取前6个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Recruit&gt; <span class="title">findTop6ByStateNotOrderByCreatetimeDesc</span><span class="params">(String state)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>具体命名规则参考<a href="https://www.cnblogs.com/oxygenG/p/10057525.html。" target="_blank" rel="noopener">https://www.cnblogs.com/oxygenG/p/10057525.html。</a></p><h4 id="处理多对多关系"><a href="#处理多对多关系" class="headerlink" title="处理多对多关系"></a>处理多对多关系</h4><p>在数据库端处理多对多的关系，必须需要借助中间表。而在java端，只需要在一个对象中放入另一个对象的list集合即可。如果不创建实体类，则需要通过原生的sql语句执行</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//通过这个查询语句，才能够实现pageable的分页功能</span></span><br><span class="line"><span class="meta">@Query</span>(value=<span class="string">"SELECT *  FROM tb_problem,tb_pl WHERE id=problemid AND labelid=:labelid ORDER BY ?#{#pageable}"</span>,</span><br><span class="line">       countQuery = <span class="string">"select count(*) from tb_problem ,tb_pl where id=problemid AND labelid=:labelid"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Problem&gt; <span class="title">newList</span><span class="params">(@Param(<span class="string">"labelid"</span>)</span> String labelid, Pageable pageable)</span>;</span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="https://blog.csdn.net/tt____tt/article/details/81027269?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">https://blog.csdn.net/tt____tt/article/details/81027269?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></p><h4 id="事务支持"><a href="#事务支持" class="headerlink" title="事务支持"></a>事务支持</h4><p>1、Dao层，在可能产生线程问题的语句上添加@Modifying</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"update tb_article set state='1' where id=?1"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateState</span><span class="params">(String id)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>2、Service层开启注解支持@Transactional</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="缓存的应用"><a href="#缓存的应用" class="headerlink" title="缓存的应用"></a>缓存的应用</h4><h5 id="Redis–有过期时间限制"><a href="#Redis–有过期时间限制" class="headerlink" title="Redis–有过期时间限制"></a>Redis–有过期时间限制</h5><p>1、添加SpringDataRedis依赖</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、服务端Docker开启Redis镜像，生成redis容器</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@pinyoyougou-docker ~]# docker run -di --name=tensquare_redis -p 6379:6379 redis</span><br></pre></td></tr></tbody></table></figure><p>3、application.ymal配置host</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="string">.*.*</span></span><br></pre></td></tr></tbody></table></figure><p>4、业务逻辑调用</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">findById</span><span class="params">(String id)</span> </span>{</span><br><span class="line"><span class="comment">//先从缓存中查询当前对象</span></span><br><span class="line">Article article= (Article) redisTemplate.opsForValue().get(<span class="string">"article_"</span>+id);</span><br><span class="line"><span class="comment">//如果没有渠道</span></span><br><span class="line"><span class="keyword">if</span>(article==<span class="keyword">null</span>){</span><br><span class="line">article = articleDao.findById(id).get();</span><br><span class="line"><span class="comment">//存入缓存</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"article_"</span>+id,article);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> article;</span><br><span class="line">}</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        <span class="comment">//删除缓存</span></span><br><span class="line">redisTemplate.delete(<span class="string">"article_"</span>+id);</span><br><span class="line">articleDao.deleteById(id);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>redisTemplate用法</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">stringRedisTemplate.opsForValue().set(<span class="string">"test"</span>, <span class="string">"100"</span>,<span class="number">60</span>*<span class="number">10</span>,TimeUnit.SECONDS);<span class="comment">//向redis里存入数据和设置缓存时间</span></span><br><span class="line">stringRedisTemplate.opsForValue().get(<span class="string">"test"</span>)<span class="comment">//根据key获取缓存中的val</span></span><br><span class="line">stringRedisTemplate.delete(<span class="string">"test"</span>);<span class="comment">//根据key删除缓存</span></span><br><span class="line">stringRedisTemplate.hasKey(<span class="string">"546545"</span>);<span class="comment">//检查key是否存在，返回boolean值</span></span><br></pre></td></tr></tbody></table></figure><h5 id="SpringCache–无过期时间限制"><a href="#SpringCache–无过期时间限制" class="headerlink" title="SpringCache–无过期时间限制"></a>SpringCache–无过期时间限制</h5><p>1、SpringApplication开启SpringCache</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatApplication</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、业务层调用，@Cacheable为存，@CacheEvict为删</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="meta">@Cacheable</span>(value = <span class="string">"gathering"</span>,key = <span class="string">"#id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Gathering <span class="title">findById</span><span class="params">(String id)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> gatheringDao.findById(id).get();</span><br><span class="line">}</span><br><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"gathering"</span>,key = <span class="string">"#gathering.id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Gathering gathering)</span> </span>{</span><br><span class="line">gatheringDao.save(gathering);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="第二天总结"><a href="#第二天总结" class="headerlink" title="第二天总结"></a>第二天总结</h3><p>掌握了条件与分页查询，Dao层方法命名规则，事务支持，缓存</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SpringDataJpa&quot;&gt;&lt;a href=&quot;#SpringDataJpa&quot; class=&quot;headerlink&quot; title=&quot;SpringDataJpa&quot;&gt;&lt;/a&gt;SpringDataJpa&lt;/h3&gt;&lt;h4 id=&quot;通过new-Specification实现
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="SpringDataJPA" scheme="https://xulilei.github.io/tags/SpringDataJPA/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门篇</title>
    <link href="https://xulilei.github.io/2020/06/05/Docker%E5%85%A5%E9%97%A8/"/>
    <id>https://xulilei.github.io/2020/06/05/Docker%E5%85%A5%E9%97%A8/</id>
    <published>2020-06-05T07:57:43.000Z</published>
    <updated>2020-06-14T10:22:42.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker入门"><a href="#Docker入门" class="headerlink" title="Docker入门"></a>Docker入门</h1><h4 id="Dokcer为什么会出现？"><a href="#Dokcer为什么会出现？" class="headerlink" title="Dokcer为什么会出现？"></a>Dokcer为什么会出现？</h4><p>一款产品从开发到上线，一般都需要两套环境。而环境的配置十分麻烦，Docker给出了解决方案</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><p>java–jar（环境）–打包项目带上环境（即Docker镜像）–Docker仓库–下载我们发布的镜像–直接运行即可。</p><h4 id="虚拟机技术特点"><a href="#虚拟机技术特点" class="headerlink" title="虚拟机技术特点"></a>虚拟机技术特点</h4><p>1、资源占用十分多</p><p>2、冗余步骤多</p><p>3、启动很慢</p><p>如下图所示，多个APP共享一个lib环境，可能会造成端口冲突等环境冲突的问题</p><p><img src="https://gitee.com/xulilei/pic/raw/master/TIM%E5%9B%BE%E7%89%8720200603160240.png" alt=""></p><h4 id="容器化技术"><a href="#容器化技术" class="headerlink" title="容器化技术"></a>容器化技术</h4><p>如下图所示，每个模块拥有独属于自己运行的环境，各个模块之间相互隔离</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200603160535.png" alt=""></p><h4 id="Docker的相关概念"><a href="#Docker的相关概念" class="headerlink" title="Docker的相关概念"></a>Docker的相关概念</h4><h5 id="Docker架构图"><a href="#Docker架构图" class="headerlink" title="Docker架构图"></a>Docker架构图</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200603161527.png" alt=""></p><h5 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h5><h6 id="镜像：images"><a href="#镜像：images" class="headerlink" title="镜像：images"></a>镜像：images</h6><p>​    通过这个模版来创建容器服务，比如Mysql镜像–通过Docker运行后，便成为了一个提供服务的容器,一个镜像可以创建多个容器</p><h5 id="容器：container"><a href="#容器：container" class="headerlink" title="容器：container"></a>容器：container</h5><p>​    提供服务，可以启动、停止、删除等，可类比为一个简单的linux系统</p><h5 id="仓库：repository"><a href="#仓库：repository" class="headerlink" title="仓库：repository"></a>仓库：repository</h5><p>​    存放镜像的地方，分为共有仓库和私有仓库</p><h4 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h4><p>1、search：可在命令行和dockerHub上搜索对应版本</p><p>2、pull：拉去下载该镜像</p><p>3、docker images：查看本机上的镜像</p><p>3、运行该镜像 </p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --name nginx01 -p 3344:80 nginx </span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个名字为nginx01的nginx镜像，公网访问地址为3344，内部地址为80，并运行该镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d 后台运行、--name 命名、-p 端口号</span></span><br></pre></td></tr></tbody></table></figure><p>4、内部测试</p><p>​    curl localhost:3344</p><h4 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h4><h5 id="结构示意图如下"><a href="#结构示意图如下" class="headerlink" title="结构示意图如下"></a>结构示意图如下</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200605154253.png" alt=""></p><p>防止容器删除后数据丢失，通过实现容器间数据共享，并将产生的数据备份到linux的文件系统上</p><p>总结一句话就是：容器的持久化和容器间的同步操作。</p><h5 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h5><p>​    -v 主机目录:容器内目录  —&gt;映射容器内的目录到主机上</p><blockquote><p>参考自狂神说JAVA</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker入门&quot;&gt;&lt;a href=&quot;#Docker入门&quot; class=&quot;headerlink&quot; title=&quot;Docker入门&quot;&gt;&lt;/a&gt;Docker入门&lt;/h1&gt;&lt;h4 id=&quot;Dokcer为什么会出现？&quot;&gt;&lt;a href=&quot;#Dokcer为什么会出现？&quot; c
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Docker" scheme="https://xulilei.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>DayOne</title>
    <link href="https://xulilei.github.io/2020/06/02/%E5%8D%81%E6%AC%A1%E6%96%B9%E7%A4%BE%E4%BA%A4%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE/"/>
    <id>https://xulilei.github.io/2020/06/02/%E5%8D%81%E6%AC%A1%E6%96%B9%E7%A4%BE%E4%BA%A4%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-06-02T11:02:13.000Z</published>
    <updated>2020-06-12T07:41:14.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DayOne"><a href="#DayOne" class="headerlink" title="DayOne"></a>DayOne</h2><h3 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h3><p>SpringBoot+SpringCloud+SpringMVC+SpringData，也称这种架构模式为spring全家桶</p><h3 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h3><p>不再采取按dao，service层划分模块，而是基于每个微服务，再将每个模块封装成一个镜像，再通过springCloud连接起来。因此在每个微服务中便不需要再写接口，因为每个微服务就是最小模块 </p><p><img src="https://gitee.com/xulilei/pic/raw/master/image-20200602161001068.png" alt=""></p><h3 id="开发API"><a href="#开发API" class="headerlink" title="开发API"></a>开发API</h3><p>通过swagger封装，Nginx代理，形成的API开发文档</p><p><img src="https://gitee.com/xulilei/pic/raw/master/image-20200602154755423.png" alt=""></p><h3 id="Restful开发风格"><a href="#Restful开发风格" class="headerlink" title="Restful开发风格"></a>Restful开发风格</h3><p>我们在项目中经常用到增删改查：get/post/put/delete四种方法，安全：操作不会出现脏读、幻读等操作。幂等：查询成功后不会对数据库造成影响</p><ul><li>Get查询是安全且幂等的</li><li>Post是不安全且不幂等的</li><li>Put改是不安全且幂等的</li><li>Delete删是不安全且幂等的</li></ul><h3 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h3><h4 id="Mysql环境搭建"><a href="#Mysql环境搭建" class="headerlink" title="Mysql环境搭建"></a>Mysql环境搭建</h4><p>创建虚拟机，安装docker，下载Mysql镜像，在服务器(192.168.152.128)运行并从本地连接完成建表</p><h4 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h4><p>主要是一些子模块都需要的依赖配置在这里</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud全家桶父工程推荐默认配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="模块搭建"><a href="#模块搭建" class="headerlink" title="模块搭建"></a>模块搭建</h4><h5 id="公共模块搭建，根据swagger约定，封装数据传输到前端。其中utils包下的idWoker根据雪花算法，可以生成不同的ID，吞吐量为20W-。"><a href="#公共模块搭建，根据swagger约定，封装数据传输到前端。其中utils包下的idWoker根据雪花算法，可以生成不同的ID，吞吐量为20W-。" class="headerlink" title="公共模块搭建，根据swagger约定，封装数据传输到前端。其中utils包下的idWoker根据雪花算法，可以生成不同的ID，吞吐量为20W+。"></a>公共模块搭建，根据swagger约定，封装数据传输到前端。其中utils包下的idWoker根据雪花算法，可以生成不同的ID，吞吐量为20W+。</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608145934.png" alt=""></p><h5 id="基础模块搭建，数据的CRUD操作"><a href="#基础模块搭建，数据的CRUD操作" class="headerlink" title="基础模块搭建，数据的CRUD操作"></a>基础模块搭建，数据的CRUD操作</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608150627.png" alt=""></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tensquare.base.pojo.Label;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span><br><span class="line"><span class="comment">//SpringDataJpa封装了CRUD操作，以及一些复杂的条件查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LabelDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Label</span>,<span class="title">String</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Label</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Day01总结"><a href="#Day01总结" class="headerlink" title="Day01总结"></a>Day01总结</h3><h4 id="在服务器端，通过Docker创建了Mysql镜像"><a href="#在服务器端，通过Docker创建了Mysql镜像" class="headerlink" title="在服务器端，通过Docker创建了Mysql镜像"></a>在服务器端，通过Docker创建了Mysql镜像</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608151611.png" alt=""></p><h4 id="通过本地IDEA的DataSource连接上去。"><a href="#通过本地IDEA的DataSource连接上去。" class="headerlink" title="通过本地IDEA的DataSource连接上去。"></a>通过本地IDEA的DataSource连接上去。</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608151109.png" alt=""></p><h4 id="通过PostMan检查当天的CRUD操作"><a href="#通过PostMan检查当天的CRUD操作" class="headerlink" title="通过PostMan检查当天的CRUD操作"></a>通过PostMan检查当天的CRUD操作</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608151349.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DayOne&quot;&gt;&lt;a href=&quot;#DayOne&quot; class=&quot;headerlink&quot; title=&quot;DayOne&quot;&gt;&lt;/a&gt;DayOne&lt;/h2&gt;&lt;h3 id=&quot;系统架构&quot;&gt;&lt;a href=&quot;#系统架构&quot; class=&quot;headerlink&quot; title=&quot;系
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
