<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Humble</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xulilei.github.io/"/>
  <updated>2020-09-11T10:30:25.566Z</updated>
  <id>https://xulilei.github.io/</id>
  
  <author>
    <name>Mr.Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>项目遇到的问题</title>
    <link href="https://xulilei.github.io/2020/09/11/%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://xulilei.github.io/2020/09/11/%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-09-11T10:29:48.000Z</published>
    <updated>2020-09-11T10:30:25.566Z</updated>
    
    <content type="html"><![CDATA[<p>1、redis分布式锁使用后，QPS下降</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、redis分布式锁使用后，QPS下降&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>八大排序算法</title>
    <link href="https://xulilei.github.io/2020/08/23/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://xulilei.github.io/2020/08/23/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2020-08-23T11:38:24.000Z</published>
    <updated>2020-08-24T08:20:33.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="八大排序算法"><a href="#八大排序算法" class="headerlink" title="八大排序算法"></a>八大排序算法</h2><h3 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 冒泡排序;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 从第一个数开始，将最大数不断向后移</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 冒泡排序 </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maoPao</span><span class="params">(<span class="keyword">int</span>[]arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    temp=arr[j];</span><br><span class="line">                    arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度分析</p><h3 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 不断的把最小值往前扔</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 选择排序 </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[]arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> min=arr[i];</span><br><span class="line">            <span class="keyword">int</span> minIndex=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(min&gt;arr[j])&#123;</span><br><span class="line">                    min=arr[j];</span><br><span class="line">                    minIndex=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(minIndex!=i)&#123;</span><br><span class="line">                arr[minIndex]=arr[i];</span><br><span class="line">                arr[i]=min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、直接插入排序"><a href="#3、直接插入排序" class="headerlink" title="3、直接插入排序"></a>3、直接插入排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 插入排序;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 简单插入排序很循规蹈矩，不管数组分布是怎么样的，依然一步一步的对元素进行比较，移动，插入</span></span><br><span class="line"><span class="comment">* （1，4）3，5-&gt;(1,3,4) 5</span></span><br><span class="line"><span class="comment">* 保证前i-1位有序排列，将本次第i个插入前i-1个中某个位置</span></span><br><span class="line"><span class="comment">* 规则为，依次比较，大于i则将排好序的数索引向后移动一位，直到空出一个位置</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 插入排序 </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[]arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> value=arr[i];</span><br><span class="line">            <span class="keyword">int</span> insertIndex=i;</span><br><span class="line">            <span class="keyword">while</span> (insertIndex&gt;<span class="number">0</span>&amp;&amp;arr[insertIndex-<span class="number">1</span>]&gt;value)&#123;</span><br><span class="line">                <span class="comment">//向后移动一个，腾出要插入的空地</span></span><br><span class="line">                arr[insertIndex]=arr[insertIndex-<span class="number">1</span>];</span><br><span class="line">                insertIndex--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[insertIndex]=value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、希尔排序"><a href="#4、希尔排序" class="headerlink" title="4、希尔排序"></a>4、希尔排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 希尔排序;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 希尔排序是对直接插入排序的一种优化</span></span><br><span class="line"><span class="comment">* 是按照跳跃式分组的方式，按组进行插入排序，之后每次将增量减为1/2，直到增量为0</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 希尔排序 </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[]arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> step=arr.length/<span class="number">2</span>;step&gt;<span class="number">0</span>;step/=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=step;i&lt;arr.length;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> value=arr[i];</span><br><span class="line">                <span class="keyword">int</span> insertIndex=i;</span><br><span class="line">                <span class="keyword">while</span> (insertIndex-step&gt;=<span class="number">0</span>&amp;&amp;arr[insertIndex-step]&gt;value)&#123;</span><br><span class="line">                    arr[insertIndex]=arr[insertIndex-step];</span><br><span class="line">                    insertIndex-=step;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[insertIndex]=value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、快速排序"><a href="#5、快速排序" class="headerlink" title="5、快速排序"></a>5、快速排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 快排;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 选取一个base，一般以left为准，不断将base放到左侧小于他右侧大于他的位置</span></span><br><span class="line"><span class="comment">* 再递归从已确定位置的左右</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">quickSort</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[]arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;right)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> base=arr[left];</span><br><span class="line">        <span class="comment">//索引</span></span><br><span class="line">        <span class="keyword">int</span> l=left;</span><br><span class="line">        <span class="keyword">int</span> r=right;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[r]&gt;base&amp;&amp;l&lt;r)r--;</span><br><span class="line">            <span class="keyword">while</span> (arr[l]&lt;=base&amp;&amp;l&lt;r)l++;</span><br><span class="line">            <span class="keyword">int</span> temp=arr[r];</span><br><span class="line">            arr[r]=arr[l];</span><br><span class="line">            arr[l]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[left]=arr[l];</span><br><span class="line">        arr[l]=base;</span><br><span class="line">        quickSort(arr, left, l-<span class="number">1</span>);</span><br><span class="line">        quickSort(arr, l+<span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、归并排序"><a href="#6、归并排序" class="headerlink" title="6、归并排序"></a>6、归并排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 归并排序;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 先分（mergeSort）再合（merge）</span></span><br><span class="line"><span class="comment">* 先分以mid为中线</span></span><br><span class="line"><span class="comment">* merge时写一个例子方便理解</span></span><br><span class="line"><span class="comment">*  left（l）        mid     mid+1（r）          right</span></span><br><span class="line"><span class="comment">* （1，    ,5        4）   （2，        ,6           3）</span></span><br><span class="line"><span class="comment">* 临时数组int[]temp=new int[right-left+1];</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mergeSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[]arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;=right)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        mergeSort(arr, left, mid);</span><br><span class="line">        mergeSort(arr,mid+<span class="number">1</span>,right);</span><br><span class="line">        merge(arr,left,mid,right);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[]arr,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=left,r=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[]temp=<span class="keyword">new</span> <span class="keyword">int</span>[right-left+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;=mid&amp;&amp;r&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[l]&lt;arr[r])&#123;</span><br><span class="line">                temp[index++]=arr[l++];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                temp[index++]=arr[r++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;=mid)&#123;</span><br><span class="line">            temp[index++]=arr[l++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (r&lt;=right)&#123;</span><br><span class="line">            temp[index++]=arr[r++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp.length;i++)&#123;</span><br><span class="line">            arr[left+i]=temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、基数排序"><a href="#7、基数排序" class="headerlink" title="7、基数排序"></a>7、基数排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 基数排序;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 基数排序的基本思想是，通过从个位开始讲每个书按照该位所在的值依次放入所在的桶</span></span><br><span class="line"><span class="comment">* 再重新覆盖原数组后，位数向高位进一位</span></span><br><span class="line"><span class="comment">* 当最高位执行完毕，这个数组就是一个有序数组</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 基数排序 </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">jiShuSort</span><span class="params">(<span class="keyword">int</span>[]arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//找到数最大的位数</span></span><br><span class="line">        <span class="keyword">int</span> max=arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a:arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&gt;max)max=a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//代表位数</span></span><br><span class="line">        <span class="keyword">int</span> weiShu=(max+<span class="string">""</span>).length();</span><br><span class="line">        <span class="comment">//从个位开始</span></span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//每一行的位数值相等，0-9总共十个数，创建十行，每行长度最大为arr的长度</span></span><br><span class="line">        <span class="keyword">int</span>[][] bucket=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line">        <span class="comment">//存放的是每个位数容纳的数的个数，比如order[1]，表示个位为1的数的个数，初始值都为0</span></span><br><span class="line">        <span class="keyword">int</span>[]order=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">//将数组从bucket中拿出来覆盖原数组用到的索引</span></span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//从各位开始一直到最高位</span></span><br><span class="line">        <span class="keyword">while</span> (n&lt;=Math.pow(<span class="number">10</span>,weiShu))&#123;</span><br><span class="line">            <span class="comment">//将数组中的每个数，按照本轮的位数，放入所在的行</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> a:arr)&#123;</span><br><span class="line">                <span class="keyword">int</span> digit=(a/n)%<span class="number">10</span>;</span><br><span class="line">                bucket[digit][order[digit]]=a;</span><br><span class="line">                order[digit]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将bucket中的数据取出覆盖原数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                <span class="comment">//当本位数存储的数不为空时</span></span><br><span class="line">                <span class="keyword">if</span>(order[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;order[i];j++)&#123;</span><br><span class="line">                        arr[index++]=bucket[i][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//重置计数器</span></span><br><span class="line">                order[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//位数加1</span></span><br><span class="line">            n*=<span class="number">10</span>;</span><br><span class="line">            <span class="comment">//覆盖索引归零</span></span><br><span class="line">            index=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、堆排序"><a href="#8、堆排序" class="headerlink" title="8、堆排序"></a>8、堆排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 堆排序;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 基本思想是先从非叶子节点开始，通过数组对应关系调整叶子节点为大顶堆</span></span><br><span class="line"><span class="comment">* 数组与完全二叉树堆的对应关系为：父节点为i，则左子节点为2i+1，右子节点为2i+2；</span></span><br><span class="line"><span class="comment">* 接着让大顶堆的最大值与最后一个数对调，除掉最后一个最大值数重新调整大顶堆，最后变成有序数列</span></span><br><span class="line"><span class="comment">* 这也是升序用大顶推，降序用小顶堆</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 堆排序 </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 按照完全二叉树的特点，从最后一个非叶子节点开始，对于整棵树进行大根堆的调整</span></span><br><span class="line">            <span class="comment">// 也就是说，是按照自下而上，每一层都是自右向左来进行调整的</span></span><br><span class="line">            <span class="comment">// 注意，这里元素的索引是从0开始的</span></span><br><span class="line">            <span class="comment">// 另一件需要注意的事情，这里的建堆，是用堆调整的方式来做的</span></span><br><span class="line">            <span class="comment">// 堆调整的逻辑在建堆和后续排序过程中复用的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length/<span class="number">2</span>-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                adjustHeap(array, i, array.length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 上述逻辑，建堆结束</span></span><br><span class="line">            <span class="comment">// 下面，开始排序逻辑</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=array.length-<span class="number">1</span>;j&gt;<span class="number">0</span>;j--) &#123;</span><br><span class="line">                <span class="comment">// 元素交换</span></span><br><span class="line">                <span class="comment">// 说是交换，其实质就是把大顶堆的根元素，放到数组的最后；换句话说，就是每一次的堆调整之后，都会有一个元素到达自己的最终位置</span></span><br><span class="line">                swap(array, <span class="number">0</span>, j);</span><br><span class="line">                <span class="comment">// 元素交换之后，毫无疑问，最后一个元素无需再考虑排序问题了。</span></span><br><span class="line">                <span class="comment">// 接下来我们需要排序的，就是已经去掉了部分元素的堆了，这也是为什么此方法放在循环里的原因</span></span><br><span class="line">                <span class="comment">// 而这里，实质上是自上而下，自左向右进行调整的</span></span><br><span class="line">                adjustHeap(array, <span class="number">0</span>, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 先把当前元素取出来，因为当前元素可能要一直移动</span></span><br><span class="line">            <span class="keyword">int</span> temp = array[i];</span><br><span class="line">            <span class="comment">// 可以参照sort中的调用逻辑，在堆建成，且完成第一次交换之后，实质上i=0；也就是说，是从根所在的最小子树开始调整的</span></span><br><span class="line">            <span class="comment">// 接下来的讲解，都是按照i的初始值为0来讲述的</span></span><br><span class="line">            <span class="comment">// 这一段很好理解，如果i=0；则k=1；k+1=2</span></span><br><span class="line">            <span class="comment">// 实质上，就是根节点和其左右子节点记性比较，让k指向这个不超过三个节点的子树中最大的值</span></span><br><span class="line">            <span class="comment">// 这里，必须要说下为什么k值是跳跃性的。</span></span><br><span class="line">            <span class="comment">// 首先，举个例子，如果a[0] &gt; a[1]&amp;&amp;a[0]&gt;a[2],说明0,1,2这棵树不需要调整，那么，下一步该到哪个节点了呢？肯定是a[1]所在的子树了，</span></span><br><span class="line">            <span class="comment">// 也就是说，是以本节点的左子节点为根的那棵小的子树</span></span><br><span class="line">            <span class="comment">// 而如果a[0&#125;&lt;a[2]呢，那就调整a[0]和a[2]的位置，然后继续调整以a[2]为根节点的那棵子树，而且肯定是从左子树开始调整的</span></span><br><span class="line">            <span class="comment">// 所以，这里面的用意就在于，自上而下，自左向右一点点调整整棵树的部分，直到每一颗小子树都满足大根堆的规律为止</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">2</span>*i+<span class="number">1</span>; k&lt;length; k=<span class="number">2</span>*k+<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 让k先指向子节点中最大的节点</span></span><br><span class="line">                <span class="keyword">if</span> (k + <span class="number">1</span> &lt; length &amp;&amp; array[k] &lt; array[k + <span class="number">1</span>]) &#123;</span><br><span class="line">                    k++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果发现子节点更大，则进行值的交换</span></span><br><span class="line">                <span class="keyword">if</span> (array[k] &gt; temp) &#123;</span><br><span class="line">                    swap(array, i, k);</span><br><span class="line">                    <span class="comment">// 下面就是非常关键的一步了</span></span><br><span class="line">                    <span class="comment">// 如果子节点更换了，那么，以子节点为根的子树会不会受到影响呢？</span></span><br><span class="line">                    <span class="comment">// 所以，循环对子节点所在的树继续进行判断</span></span><br><span class="line">                    i = k;</span><br><span class="line">                    <span class="comment">// 如果不用交换，那么，就直接终止循环了</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[a];</span><br><span class="line">            arr[a] = arr[b];</span><br><span class="line">            arr[b] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><h4 id="①、稳定性判断："><a href="#①、稳定性判断：" class="headerlink" title="①、稳定性判断："></a>①、稳定性判断：</h4><p>从前往后或者从后往前，逐一（两两）进行比较的排序算法都具有稳定性的特征，如：冒泡排序，插入排序，基数排序，归并排序。</p><p>而较快比较出来的算法往往是不稳定的，如：快速排序，简单选择排序，堆排序，希尔排序。</p><h4 id="②、时间复杂度判断："><a href="#②、时间复杂度判断：" class="headerlink" title="②、时间复杂度判断："></a>②、时间复杂度判断：</h4><p>涉及到两两递归或二叉树的排序时间复杂度为O(nlogn)，如堆排序，归并排序，快速排序</p><h4 id="③、时间复杂度表"><a href="#③、时间复杂度表" class="headerlink" title="③、时间复杂度表"></a>③、时间复杂度表</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200823195540.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;八大排序算法&quot;&gt;&lt;a href=&quot;#八大排序算法&quot; class=&quot;headerlink&quot; title=&quot;八大排序算法&quot;&gt;&lt;/a&gt;八大排序算法&lt;/h2&gt;&lt;h3 id=&quot;1、冒泡排序&quot;&gt;&lt;a href=&quot;#1、冒泡排序&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="排序算法" scheme="https://xulilei.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>秋招复习之SpringMVC、Boot、Cloud</title>
    <link href="https://xulilei.github.io/2020/08/19/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BSpringMVC%E3%80%81Boot%E3%80%81Cloud/"/>
    <id>https://xulilei.github.io/2020/08/19/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BSpringMVC%E3%80%81Boot%E3%80%81Cloud/</id>
    <published>2020-08-19T07:26:52.000Z</published>
    <updated>2020-09-12T09:06:49.690Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><p>Spring MVC是spring的一个模块，是一个web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web开发分成逻辑清晰的几部分，简化开发</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>1、客户端发送请求到DispatcherServlet</p><p>2、DispatcherServlet根据请求信息调用HandlerMapping，解析请求对应的handler</p><p>3、解析到对应的Handler后，由HandlerAdapter适配器调用具体的处理器，并处理请求</p><p>4、处理请求完成后，会返回一个ModelAndView对象给DispatcherServlet</p><p>5、ViewResolver根据ModelAndView中的view查找实际的model</p><p>6、DispatcherServlet将返回的model传给view进行视图渲染</p><p>7、最终将View返回给请求者</p><h4 id="SpringMVC怎么和Ajax互相调用的？"><a href="#SpringMVC怎么和Ajax互相调用的？" class="headerlink" title="SpringMVC怎么和Ajax互相调用的？"></a>SpringMVC怎么和Ajax互相调用的？</h4><p>通过jackson框架就可以直接把java对象直接转化成js可以识别的json对象，需要加上@ResponseBody注解</p><h4 id="如果解决POST请求乱码的问题"><a href="#如果解决POST请求乱码的问题" class="headerlink" title="如果解决POST请求乱码的问题"></a>如果解决POST请求乱码的问题</h4><p>在web.xml中配置一个CharacterEncodingFilter过滤器，并将字符集设置为utf8</p><h4 id="SpringMVC的异常处理？"><a href="#SpringMVC的异常处理？" class="headerlink" title="SpringMVC的异常处理？"></a>SpringMVC的异常处理？</h4><p>springMVC是spring框架中的一个模块，遇到异常处理可以将异常抛给spring，由spring异常处理器执行具体异常逻辑，返回异常视图页面</p><h4 id="SpringMVC和Struts2的区别有哪些"><a href="#SpringMVC和Struts2的区别有哪些" class="headerlink" title="SpringMVC和Struts2的区别有哪些?"></a>SpringMVC和Struts2的区别有哪些?</h4><p>springmvc的入口是一个servlet即前端控制器（DispatchServlet），而struts入口是一个filter过虑器</p><p>springmvc是基于方法开发(一个url对应一个方法)，请求参数传递到方法的形参，控制器是单例的，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。</p><h4 id="SpringMVC的控制器是不是单例模式-如果是-有什么问题-怎么解决？"><a href="#SpringMVC的控制器是不是单例模式-如果是-有什么问题-怎么解决？" class="headerlink" title="SpringMVC的控制器是不是单例模式,如果是,有什么问题,怎么解决？"></a>SpringMVC的控制器是不是单例模式,如果是,有什么问题,怎么解决？</h4><p>是单例的，多线程访问下会有线程安全的问题</p><p>解决方法是尽量不要在controller里面去定义属性，如果在特殊情况需要定义属性的时候，那么就在类上面加上注解@Scope(“prototype”)改为多例的模式.</p><p>原因：</p><p>1、struts是基于类的属性进行发的，定义属性可以整个类通用，所以默认是多例，不然单例情况下多线程访问肯定是共用类里面的属性值的，肯定是不安全的，2、springmvc是基于方法的开发，请求参数传递到方法的形参，一个方法结束参数就销毁了，多线程访问会将参数存放在各自的threadlocal中，使得方法参数线程间不可见，所以springmvc默认使用了单例.</p><p>因此，只要controller里面不定义属性，那么单例模式下的控制器就是安全的。</p><h4 id="如果在拦截请求中，我想拦截get方式提交的方法-怎么配置？"><a href="#如果在拦截请求中，我想拦截get方式提交的方法-怎么配置？" class="headerlink" title="如果在拦截请求中，我想拦截get方式提交的方法,怎么配置？"></a>如果在拦截请求中，我想拦截get方式提交的方法,怎么配置？</h4><p>答：可以在@RequestMapping注解里面加上method=RequestMethod.GET。</p><h4 id="怎样在方法里面得到Request-或者Session？"><a href="#怎样在方法里面得到Request-或者Session？" class="headerlink" title="怎样在方法里面得到Request,或者Session？"></a>怎样在方法里面得到Request,或者Session？</h4><p>答：直接在方法的形参中声明request,SpringMvc就自动把request对象传入。</p><h4 id="SpringMVC中函数的返回值是什么？"><a href="#SpringMVC中函数的返回值是什么？" class="headerlink" title="SpringMVC中函数的返回值是什么？"></a>SpringMVC中函数的返回值是什么？</h4><p>答：返回值可以有很多类型,有String, ModelAndView。ModelAndView类把视图和数据都合并的一起的，但一般用String比较好。</p><h4 id="SpringMVC用什么对象从后台向前台传递数据的？"><a href="#SpringMVC用什么对象从后台向前台传递数据的？" class="headerlink" title="SpringMVC用什么对象从后台向前台传递数据的？"></a>SpringMVC用什么对象从后台向前台传递数据的？</h4><p>答：通过ModelMap对象,可以在这个对象里面调用put方法,把对象加到里面,前台就可以通过el表达式拿到。</p><h4 id="怎么样把ModelMap里面的数据放入Session里面？"><a href="#怎么样把ModelMap里面的数据放入Session里面？" class="headerlink" title="怎么样把ModelMap里面的数据放入Session里面？"></a>怎么样把ModelMap里面的数据放入Session里面？</h4><p>答：可以在类上面加上@SessionAttributes注解,里面包含的字符串就是要放入session里面的key。</p><h4 id="springMvc和springboot的区别"><a href="#springMvc和springboot的区别" class="headerlink" title="springMvc和springboot的区别"></a>springMvc和springboot的区别</h4><p><strong>Spring MVC</strong>：是spring的一个模块，是一个web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web开发分成逻辑清晰的几部分<strong>springboot</strong>：是spring组件一站式解决方案，主要简化了使用spring的难度，减省了繁重的配置，提供各种starter</p><h3 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h3><h4 id="springboot自动装配的原理"><a href="#springboot自动装配的原理" class="headerlink" title="springboot自动装配的原理"></a>springboot自动装配的原理</h4><p>主要基于一个注解@EnableAutoConfiguration，会通过这个注解找到META-INF文件中的配置类，并结合对应的xxxProperties.java读取配置文件进行自动配置</p><h4 id="Spring-Boot-有哪几种读取配置的方式？"><a href="#Spring-Boot-有哪几种读取配置的方式？" class="headerlink" title="Spring Boot 有哪几种读取配置的方式？"></a>Spring Boot 有哪几种读取配置的方式？</h4><p>@PropertySource,@Value,@Environment, @ConfigurationProperties</p><h4 id="Spring-Boot-的核心配置文件有哪几个？它们的区别是什么？"><a href="#Spring-Boot-的核心配置文件有哪几个？它们的区别是什么？" class="headerlink" title="Spring Boot 的核心配置文件有哪几个？它们的区别是什么？"></a>Spring Boot 的核心配置文件有哪几个？它们的区别是什么？</h4><p>核心配置文件是application和bootstrap</p><p>application配置文件主要用于springboot项目自动化配置</p><p>bootstrap优先于application加载，从额外的资源加载配置信息，比如通过spring cloud config配置中心时，需要在bootstrap配置文件中配置连接信息</p><h4 id="Spring-Boot-的核心注解是哪个？它主要由哪几个注解组成的？"><a href="#Spring-Boot-的核心注解是哪个？它主要由哪几个注解组成的？" class="headerlink" title="Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？"></a>Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？</h4><p>@SpringBootApplication</p><p>主要包含了以下3个注解：</p><p>@SpringBootConfiguration：是configuration注解，实现配置文件的功能</p><p>@EnableAutoConfiguration：打开自动配置功能</p><p>@ComponentScan：组件扫描</p><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><p><strong>1. 什么是 spring cloud？</strong></p><p>spring cloud 是一系列框架的有序集合。它利用 spring boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 spring boot 的开发风格做到一键启动和部署。</p><p><strong>3. spring cloud 的核心组件有哪些？</strong></p><ul><li>Eureka：服务注册于发现。</li><li>Feign：基于动态代理机制，根据请求 url 地址，跟指定的服务建立连接、构造请求、发起靕求、获取响应、解析响应。</li><li>Ribbon：实现负载均衡，从一个服务的多台机器中选择一台。</li><li>Hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。</li><li>Zuul：网关管理，由 Zuul 网关转发请求给对应的服务。</li></ul><p><strong>4. SpringCloud和Dubbo</strong></p><p>SpringCloud和Dubbo都是现在主流的微服务架构<br>SpringCloud是Apache旗下的Spring体系下的微服务解决方案<br>Dubbo是阿里系的分布式服务治理框架<br>从技术维度上,其实SpringCloud远远的超过Dubbo,Dubbo本身只是实现了服务治理,而SpringCloud现在以及有21个子项目以后还会更多<br>服务的调用方式Dubbo使用的是RPC远程调用,而SpringCloud使用的是 Rest API,其实更符合微服务官方的定义<br>服务的注册中心来看,Dubbo使用了第三方的ZooKeeper作为其底层的注册中心,实现服务的注册和发现,SpringCloud使用Eureka实现注册中心<br>服务网关,Dubbo并没有本身的实现,只能通过其他第三方技术的整合,而SpringCloud有Zuul路由网关,作为路由服务器,进行消费者的请求分发,SpringCloud还支持断路器,与git完美集成分布式配置文件支持版本控制,事务总线实现配置文件的更新与服务自动装配等等一系列的微服务架构要素</p><h4 id="5、与boot的区别"><a href="#5、与boot的区别" class="headerlink" title="5、与boot的区别"></a>5、与boot的区别</h4><p>而SpringCloud专注于解决各个微服务之间的协调与配置,服务之间的通信,熔断,负载均衡等</p><p>总结:</p><ul><li>SpringBoot专注于快速方便的开发单个个体的微服务</li><li>SpringCloud是关注全局的微服务协调整理治理框架,整合并管理各个微服务,为各个微服务之间提供,配置管理,服务发现,断路器,路由,事件总线等集成服务</li><li>SpringBoot不依赖于SpringCloud,SpringCloud依赖于SpringBoot,属于依赖关系</li></ul><p><strong>7. 负载均衡的意义是什么?</strong></p><p>在计算中，负载均衡可以改善跨计算机，计算机集群，网络链接，中央处理单元或磁盘驱动器等多种计算资源的工作负载分布。负载均衡旨在优化资源使用，最大吞吐量，最小响应时间并避免任何单一资源的过载。使用多个组件进行负载均衡而不是单个组件可能会通过冗余来提高可靠性和可用性。负载平衡通常涉及专用软件或硬件，例如多层交换机或域名系统服务进程。</p><h5 id="有哪些负载均衡算法："><a href="#有哪些负载均衡算法：" class="headerlink" title="有哪些负载均衡算法："></a>有哪些负载均衡算法：</h5><p>1、轮询：将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。</p><p>2、源地址哈希法：对请求服务器的ip进行一个哈希算法，将其分配到一个服务器上去，也就是说之后每次该IP地址的访问都将分配给同一台服务器</p><p>3、加权轮询：在轮询的基础上，对服务器承受压力大的服务器权重设置高点。</p><p>4、最小连接数：动态的选取当前所有服务器，连接数最少的服务器</p><p><strong>8. springcloud如何实现服务的注册?</strong></p><p>1.服务发布时，指定对应的服务名,将服务注册到 注册中心(eureka zookeeper)<br>2.注册中心加@EnableEurekaServer,服务用@EnableDiscoveryClient，然后用ribbon或feign进行服务直接的调用发现。</p><p><strong>9. 什么是服务熔断?什么是服务降级</strong></p><p>在复杂的分布式系统中,微服务之间的相互调用,有可能出现各种各样的原因导致服务的阻塞,在高并发场景下,服务的阻塞意味着线程的阻塞,导致当前线程不可用,服务器的线程全部阻塞,导致服务器崩溃,由于服务之间的调用关系是同步的,会对整个微服务系统造成服务雪崩</p><p>为了解决某个微服务的调用响应时间过长或者不可用进而占用越来越多的系统资源引起雪崩效应就需要进行服务熔断和服务降级处理。</p><p>所谓的服务熔断指的是某个服务故障或异常一起类似显示世界中的“保险丝”当某个异常条件被触发就直接熔断整个服务，而不是一直等到此服务超时。</p><p>服务熔断就是相当于我们电闸的保险丝,一旦发生服务雪崩的,就会熔断整个服务,通过维护一个自己的线程池,当线程达到阈值的时候就启动服务降级,如果其他请求继续访问就直接返回fallback的默认值</p><p><strong>13. eureka自我保护机制是什么?</strong></p><p>当Eureka Server 节点在短时间内丢失了过多实例的连接时（比如网络故障或频繁启动关闭客户端）节点会进入自我保护模式，保护注册信息，不再删除注册数据，故障恢复时，自动退出自我保护模式。</p><p><strong>14. 什么是Ribbon？</strong></p><p>ribbon是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。feign默认集成了ribbon。</p><p><strong>15. 什么是feigin？它的优点是什么？</strong></p><p>1.feign采用的是基于接口的注解<br>2.feign整合了ribbon，具有负载均衡的能力<br>3.整合了Hystrix，具有熔断的能力</p><p>使用:<br>1.添加pom依赖。<br>2.启动类添加@EnableFeignClients<br>3.定义一个接口@FeignClient(name=“xxx”)指定调用哪个服务</p><p><strong>16. Ribbon和Feign的区别？</strong></p><p>1.Ribbon都是调用其他服务的，但方式不同。<br>2.启动类注解不同，Ribbon是@RibbonClient feign的是@EnableFeignClients<br>3.服务指定的位置不同，Ribbon是在@RibbonClient注解上声明，Feign则是在定义抽象方法的接口中使用@FeignClient声明。<br>4.调用方式不同，Ribbon需要自己构建http请求，模拟http请求然后使用RestTemplate发送给其他服务，步骤相当繁琐。Feign需要将调用的方法定义成抽象方法即可。</p><p><strong>17. 什么是Spring Cloud Bus?</strong></p><p>spring cloud bus 将分布式的节点用轻量的消息代理连接起来，它可以用于广播配置文件的更改或者服务直接的通讯，也可用于监控。<br>如果修改了配置文件，发送一次请求，所有的客户端便会重新读取配置文件。<br>使用:<br>1.添加依赖<br>2.配置rabbimq</p><p><strong>20. 什么是SpringCloudConfig?</strong></p><p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中。在spring cloud config 组件中，分两个角色，一是config server，二是config client。</p><p>使用：<br>1、添加pom依赖<br>2、配置文件添加相关配置<br>3、启动类添加注解@EnableConfigServer</p><p><strong>21. 架构？</strong></p><p>在微服务架构中，需要几个基础的服务治理组件，包括服务注册与发现、服务消费、负载均衡、断路器、智能路由、配置管理等，由这几个基础组件相互协作，共同组建了一个简单的微服务系统</p><p>在Spring Cloud微服务系统中，一种常见的负载均衡方式是，客户端的请求首先经过负载均衡（zuul、Ngnix），再到达服务网关（zuul集群），然后再到具体的服。服务统一注册到高可用的服务注册中心集群，服务的所有的配置文件由配置服务管理，配置服务的配置文件放在git仓库，方便开发人员随时改配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;SpringMVC&quot;&gt;&lt;a href=&quot;#SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC&quot;&gt;&lt;/a&gt;SpringMVC&lt;/h4&gt;&lt;p&gt;Spring MVC是spring的一个模块，是一个web框架，通过把Model，V
      
    
    </summary>
    
    
    
      <category term="Spring" scheme="https://xulilei.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>秋招复习之Spring事务、分布式事务</title>
    <link href="https://xulilei.github.io/2020/08/19/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BSpring%E4%BA%8B%E5%8A%A1%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>https://xulilei.github.io/2020/08/19/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BSpring%E4%BA%8B%E5%8A%A1%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</id>
    <published>2020-08-19T07:26:07.000Z</published>
    <updated>2020-09-10T04:06:34.273Z</updated>
    
    <content type="html"><![CDATA[<h3 id="spring事务"><a href="#spring事务" class="headerlink" title="spring事务"></a>spring事务</h3><h4 id="spring隔离级别"><a href="#spring隔离级别" class="headerlink" title="spring隔离级别"></a>spring隔离级别</h4><p>比mysql多了一个<strong>ISOLATION_DEFAULT</strong> ：使用后端数据库默认的隔离级别，mysql使用的是REPEATABLE_READ </p><h4 id="支持当前事务："><a href="#支持当前事务：" class="headerlink" title="支持当前事务："></a>支持当前事务：</h4><p><strong>PROPAGATION_REQUIRED</strong>：如果当前存在事务，则加入该事务，如果当前没有事务，则创建一个新的事务</p><p><strong>PROPAGATION_SUPPORTS</strong>：如果当前存在事务，则加入该事务，如果当前没有事务，则以非事务的方式继续执行</p><p><strong>PROPAGATION_MANDATORY</strong>：如果当前存在事务，则加入该事务，如果当前没有事务，则抛出异常</p><h4 id="不支持当前事务："><a href="#不支持当前事务：" class="headerlink" title="不支持当前事务："></a>不支持当前事务：</h4><p><strong>PROPAGATION_REQUIRES_NEW</strong>：创建一个新的事务，如果当前存在事务则把当前事务挂起</p><p><strong>PROPAGATION_NOT_SUPPORTED</strong>：以非事务方式运行，如果当前存在事务则把当前事务挂起</p><p><strong>PROPAGATION_NEVER</strong>：以非事务方式运行，如果当前存在事务，则抛出异常</p><h4 id="其他情况："><a href="#其他情况：" class="headerlink" title="其他情况："></a>其他情况：</h4><p><strong>PROPAGATION_NESTED</strong>： 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务执行，否则就创建新的事务</p><h4 id="事务的实现方式"><a href="#事务的实现方式" class="headerlink" title="事务的实现方式"></a>事务的实现方式</h4><p>申明式事务@Transactional</p><p>编程式事务管理：beginTransaction、commit、rollback</p><h4 id="事务的原理"><a href="#事务的原理" class="headerlink" title="事务的原理"></a>事务的原理</h4><p>是基于SpringAOP的，通过transactionProxyFactoryBean对加了@Transactional注解的对象生成代理对象，再通过transactionintercept完成对方法的拦截，将事务功能编制在拦截方法中，从而完成rollback，commit等操作</p><h4 id="事务中threadlocal的使用"><a href="#事务中threadlocal的使用" class="headerlink" title="事务中threadlocal的使用"></a>事务中threadlocal的使用</h4><p>与数据库交互的事务是和线程绑定起来的,Spring框架在事务开始时会给当前线程绑定一个Jdbc Connection,在整个事务过程都是使用该线程绑定的connection来执行数据库操作，实现了事务的隔离性。Spring框架里面就是用的ThreadLocal来实现这种隔离</p><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>java中的事务由于是jvm层级的，因此只要满足acid，那么这个事务是不会出现异常情况的</p><p>而在分布式事务中，由于不再是jvm层级了，</p><h3 id="有这样一种情况："><a href="#有这样一种情况：" class="headerlink" title="有这样一种情况："></a>有这样一种情况：</h3><p>以我自己做的那个项目为例：一个下单系统，先通过redis预减库存，然后将请求发送给mq，在另一个模块中异步消费mq中的下单请求，操作数据库，接着生成打印订单，用@Transactional注解包裹，如果发生异常rollback将redis中减掉的库存加回去</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>如果在生成打印订单的途中，发生了异常，使得下单失败，那么redis会将减掉的库存加回去，看上去似乎没有问题。但是mq中的消息仍然被消费了，最终数据库中的库存是被剪掉了的，虽然不会导致超卖的现象，但是会出现少卖的情况</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>可靠性最终一致性方案</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;spring事务&quot;&gt;&lt;a href=&quot;#spring事务&quot; class=&quot;headerlink&quot; title=&quot;spring事务&quot;&gt;&lt;/a&gt;spring事务&lt;/h3&gt;&lt;h4 id=&quot;spring隔离级别&quot;&gt;&lt;a href=&quot;#spring隔离级别&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="事务" scheme="https://xulilei.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>项目实操</title>
    <link href="https://xulilei.github.io/2020/08/14/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/"/>
    <id>https://xulilei.github.io/2020/08/14/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/</id>
    <published>2020-08-14T01:40:04.000Z</published>
    <updated>2020-09-10T04:07:00.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Docker下redis集群搭建"><a href="#一、Docker下redis集群搭建" class="headerlink" title="一、Docker下redis集群搭建"></a>一、Docker下redis集群搭建</h2><h3 id="1、主从结构搭建"><a href="#1、主从结构搭建" class="headerlink" title="1、主从结构搭建"></a>1、主从结构搭建</h3><h4 id="配置文件conf"><a href="#配置文件conf" class="headerlink" title="配置文件conf"></a>配置文件conf</h4><h5 id="REPLICAOF"><a href="#REPLICAOF" class="headerlink" title="REPLICAOF"></a>REPLICAOF</h5><p>命令REPLICAOF 可以在线修改当前服务器的复制设置</p><p>如果当前服务器已经是副本服务器，命令REPLIACAOF NO ONE 会关闭当前服务器的复制并转变为主服务器。</p><p>执行 REPLIACOF hostname port 会将当前服务器转变为某一服务器的副本服务器</p><p>如果当前服务器已经是某个主服务器(master server)的副本服务器，那么执行 REPLICAOF hostname port 将使当前服务器停止对原主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步</p><p>对一个副本服务器执行命令 REPLICAOF NO ONE 将使得这个副本服务器关闭复制，并从副本服务器转变回主服务器，原来同步所得的数据集不会被丢弃。因此，当原主服务器停止服务，可以将该副本服务器切换为主服务器，应用可以使用新主服务器进行读写。原主服务器修复后，可将其设置为新主服务器的副本服务器。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">主服务器配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 127.0.0.1        <span class="comment">#如果bind选项为空的话，则允许所有来自于可用网络接口的连接</span></span></span><br><span class="line">protected-mode no      #保护模式，若为yes，只允许本地客户端连接</span><br><span class="line">appendonly yes         #开启后，Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里</span><br><span class="line"><span class="meta">#</span><span class="bash">主服务器配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 127.0.0.1        <span class="comment">#如果bind选项为空的话，则允许所有来自于可用网络接口的连接</span></span></span><br><span class="line">protected-mode no      #保护模式，若为yes，只允许本地客户端连接</span><br><span class="line">appendonly yes         #开启后，Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里</span><br><span class="line">replicaof masterHost port</span><br></pre></td></tr></table></figure><h3 id="3、sentinel模式搭建"><a href="#3、sentinel模式搭建" class="headerlink" title="3、sentinel模式搭建"></a>3、sentinel模式搭建</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 让sentinel服务后台运行</span></span><br><span class="line">daemonize yes </span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改日志文件的路径</span></span><br><span class="line">logfile "/var/log/redis/sentinel.log"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改监控的主redis服务器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后一个2表示，两台机器判定主被动下线后，就进行failover(故障转移)</span></span><br><span class="line">sentinel monitor mymaster 35.236.172.131 6379 2</span><br></pre></td></tr></table></figure><p>创建sentinel容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -di --name redisSentinel -p 26379:26379 -v /usr/local/redisSentinel/sentinel.conf:/etc/redis/sentinel.conf redis /bin/bash</span><br></pre></td></tr></table></figure><p>进入容器开启哨兵</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis exec -it redisSentinel bash</span><br><span class="line">redis-sentinel /etc/redis/sentinel.conf</span><br></pre></td></tr></table></figure><h2 id="二、分布式锁"><a href="#二、分布式锁" class="headerlink" title="二、分布式锁"></a>二、分布式锁</h2><h3 id="1、redis分布式锁的基本实现"><a href="#1、redis分布式锁的基本实现" class="headerlink" title="1、redis分布式锁的基本实现"></a>1、redis分布式锁的基本实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String key;</span><br><span class="line"><span class="comment">//try是为了防止逻辑代码出现异常，导致无法删除key</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//如果有则返回false，如果没有则set并返回false</span></span><br><span class="line">    Boolean result=redisTemplate.opsForValue().setIfAbsent(key,value,timeout);</span><br><span class="line">    <span class="comment">//result为false说明没有key，则获得该锁，此时其他进程返回true，无法获得该锁</span></span><br><span class="line">    <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">        逻辑代码段</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    redisTemplate.delete(<span class="string">"key"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、redisson的分布式锁实现"><a href="#2、redisson的分布式锁实现" class="headerlink" title="2、redisson的分布式锁实现"></a>2、redisson的分布式锁实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">redissonConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*单体模式</span></span><br><span class="line"><span class="comment">    public Redisson getRedisson()&#123;</span></span><br><span class="line"><span class="comment">        Config config=new Config();</span></span><br><span class="line"><span class="comment">        config.useSingleServer().setAddress("118.25.105.4:6379");</span></span><br><span class="line"><span class="comment">        return (Redisson) Redisson.create(config);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">/*主从模式</span></span><br><span class="line"><span class="comment">    public Redisson getRedisson()&#123;</span></span><br><span class="line"><span class="comment">        Config config=new Config();</span></span><br><span class="line"><span class="comment">        config.useMasterSlaveServers().setMasterAddress("118.25.105.4:6379")</span></span><br><span class="line"><span class="comment">        .addSlaveAddress("118.25.105.4:6380");</span></span><br><span class="line"><span class="comment">        return (Redisson) Redisson.create(config);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//哨兵模式</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Redisson <span class="title">getRedisson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Config config=<span class="keyword">new</span> Config();</span><br><span class="line">        config.useSentinelServers().setMasterName(<span class="string">"mymaster"</span>)</span><br><span class="line">                .addSentinelAddress(<span class="string">"118.25.105.4:26379"</span>);</span><br><span class="line">        <span class="keyword">return</span> (Redisson) Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*集群模式</span></span><br><span class="line"><span class="comment">    public Redisson getRedisson()&#123;</span></span><br><span class="line"><span class="comment">        Config config=new Config();</span></span><br><span class="line"><span class="comment">        config.useClusterServers().setScanInterval(2000)</span></span><br><span class="line"><span class="comment">                .addNodeAddress();</span></span><br><span class="line"><span class="comment">        return (Redisson) Redisson.create(config);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(String id)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">     <span class="comment">//验证权限</span></span><br><span class="line">    String token = (String) request.getAttribute(<span class="string">"admin_claims"</span>);</span><br><span class="line"><span class="keyword">if</span>(token==<span class="keyword">null</span>||<span class="string">""</span>.equals(token))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"权限不足"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据ID获得锁对象</span></span><br><span class="line">    RLock lockId = redisson.getLock(id);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//尝试加锁最多等待20秒，成功后10秒删除</span></span><br><span class="line">Boolean flag=lockId.tryLock(<span class="number">20</span>,<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="comment">//执行业务逻辑</span></span><br><span class="line">userDao.deleteById(id);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//没有获取到锁</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"当前人数过多，请重试"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//加锁过程出现错误</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"遇到未知错误"</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//主动释放锁</span></span><br><span class="line">lockId.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、限流方式"><a href="#三、限流方式" class="headerlink" title="三、限流方式"></a>三、限流方式</h2><h3 id="1、对于热点数据通过semaphore防止缓存穿透"><a href="#1、对于热点数据通过semaphore防止缓存穿透" class="headerlink" title="1、对于热点数据通过semaphore防止缓存穿透"></a>1、对于热点数据通过semaphore防止缓存穿透</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Article <span class="title">findById</span><span class="params">(String id)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//先从缓存中查询当前对象</span></span><br><span class="line">Article article= (Article) redisTemplate.opsForValue().get(<span class="string">"article_"</span>+id);</span><br><span class="line"><span class="comment">//如果没有取到</span></span><br><span class="line"><span class="keyword">if</span>(article==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//通过信号量semaphore </span></span><br><span class="line">            <span class="comment">//Semaphore semaphore=new Semaphore(100);</span></span><br><span class="line"><span class="keyword">if</span>(semaphore.tryAcquire())&#123;</span><br><span class="line">article = articleDao.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//存入缓存</span></span><br><span class="line"><span class="keyword">if</span>(article!=<span class="keyword">null</span>)&#123;</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"article_"</span>+id,article);</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">semaphore.release();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//获取不到等待一段时间再次获取</span></span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">article=findById(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> article;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、通过redis</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、首先redis加入库存</span><br><span class="line">2、秒杀开启，重复请求缓存并返回请勿重复下单</span><br><span class="line">3、redis库存大于订单数，则下单成功，推送到mq队列，redis库存小于下单数，则直接返回库存不足</span><br><span class="line">4、再异步从mq消费消息，开一个只允许1000个线程工作的线程池，对数据库执行更新操作，并将结果存储到mq队列</span><br><span class="line">5、消费结果队列，并发送短信给用户</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Docker下redis集群搭建&quot;&gt;&lt;a href=&quot;#一、Docker下redis集群搭建&quot; class=&quot;headerlink&quot; title=&quot;一、Docker下redis集群搭建&quot;&gt;&lt;/a&gt;一、Docker下redis集群搭建&lt;/h2&gt;&lt;h3 id=&quot;1
      
    
    </summary>
    
    
    
      <category term="集群搭建" scheme="https://xulilei.github.io/tags/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://xulilei.github.io/2020/07/27/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8Bspring%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%81%E4%BA%8B%E5%8A%A1/"/>
    <id>https://xulilei.github.io/2020/07/27/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8Bspring%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%81%E4%BA%8B%E5%8A%A1/</id>
    <published>2020-07-27T10:51:53.000Z</published>
    <updated>2020-09-12T03:59:15.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="Spring-中的设计模式"><a href="#Spring-中的设计模式" class="headerlink" title="Spring 中的设计模式"></a>Spring 中的设计模式</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>Spring使用工厂模式通过 BeanFactory、ApplicationContext创建 bean 对象</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>Spring 中 bean 的默认作用域就是 singleton(单例)的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(beanName, <span class="string">"'beanName' must not be null"</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">            <span class="comment">// 检查缓存中是否存在实例  </span></span><br><span class="line">            Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//...省略了很多代码</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//...省略了很多代码</span></span><br><span class="line">                <span class="comment">// 如果实例对象在不存在，我们注册到单例注册表中。</span></span><br><span class="line">                addSingleton(beanName, singletonObject);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p><strong>Spring AOP 就是基于动态代理的</strong>，如果要代理的对象，实现了某个接口，那么Spring AOP会使用<strong>JDK Proxy</strong>，而对于没有实现接口的对象会使用<strong>Cglib</strong> </p><p>具体在AnnotationAwareAspectJAutoProxyCreator的父类中定义了warpifnecessary方法，通过里面的creatProxy方法</p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>适配器模式(Adapter Pattern) 将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。</p><p>在Spring AOP 中，其实现是基于代理模式的。但是，在Spring AOP的增强或者通知（Advice）中，使用到了适配器模式。与之相关的适配器模式为AdvisorAdapter。</p><h3 id="模版方法模式"><a href="#模版方法模式" class="headerlink" title="模版方法模式"></a>模版方法模式</h3><p>模板方法模式是一种行为设计模式，它定义一个操作中的算法的骨架，而将一些步骤延迟到子类中</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>当一个对象发生改变的时候，这个对象所依赖的对象也会做出反应。</p><p>Spring 事件驱动模型就是观察者模式很经典的一个应用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个事件,继承自ApplicationEvent并且写相应的构造函数 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoEvent</span><span class="params">(Object source,String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> message;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个事件监听者,实现ApplicationListener接口，重写 onApplicationEvent() 方法；</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">DemoEvent</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用onApplicationEvent接收消息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(DemoEvent event)</span> </span>&#123;</span><br><span class="line">        String msg = event.getMessage();</span><br><span class="line">        System.out.println(<span class="string">"接收到的信息是："</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发布事件，可以通过ApplicationEventPublisher  的 publishEvent() 方法发布消息。</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoPublisher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="comment">//发布事件</span></span><br><span class="line">        applicationContext.publishEvent(<span class="keyword">new</span> DemoEvent(<span class="keyword">this</span>, message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h2 id=&quot;Spring-中的设计模式&quot;&gt;&lt;a href=&quot;#Spring-中的设计模式&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="设计模式" scheme="https://xulilei.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JAVA WEB、SpringMVC、SpringBoot</title>
    <link href="https://xulilei.github.io/2020/07/27/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BJavaWeb/"/>
    <id>https://xulilei.github.io/2020/07/27/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BJavaWeb/</id>
    <published>2020-07-27T04:46:19.000Z</published>
    <updated>2020-08-19T12:38:41.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA-WEB"><a href="#JAVA-WEB" class="headerlink" title="JAVA WEB"></a>JAVA WEB</h1><h2 id="java-web-三大组件"><a href="#java-web-三大组件" class="headerlink" title="java web 三大组件"></a>java web 三大组件</h2><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p><img src="https://gitee.com/xulilei/pic/raw/master/20200727130219.png" alt=""></p><h4 id="servlet是一个Java接口"><a href="#servlet是一个Java接口" class="headerlink" title="servlet是一个Java接口"></a>servlet是一个Java接口</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200727135946.png" alt=""></p><p>servlet接口定义的是一套处理网络请求的规范，所有实现servlet的类，都需要实现它那五个方法，其中最主要的是两个生命周期方法 init()和destroy()，还有一个处理请求的service()，也就是说，所有实现servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题：</p><ul><li>你初始化时要做什么</li><li>你销毁时要做什么</li><li>你接受到请求时要做什么</li></ul><h4 id="servlet可以处理请求吗"><a href="#servlet可以处理请求吗" class="headerlink" title="servlet可以处理请求吗"></a>servlet可以处理请求吗</h4><p><strong>不能</strong>，因为在servlet中不会写监听比如8080端口的代码，servlet不会直接和客户端打交道！</p><h5 id="那请求怎么来到servlet呢？"><a href="#那请求怎么来到servlet呢？" class="headerlink" title="那请求怎么来到servlet呢？"></a>那请求怎么来到servlet呢？</h5><p>答案是servlet容器，比如我们最常用的tomcat，只有将我们写的servlet部署到一个容器中，servlet才会起作用。</p><h5 id="tomcat才是与客户端直接打交道的"><a href="#tomcat才是与客户端直接打交道的" class="headerlink" title="tomcat才是与客户端直接打交道的"></a>tomcat才是与客户端直接打交道的</h5><ul><li>监听了端口</li><li>请求过来后，根据url等信息，<strong>确定要将请求交给哪个servlet去处理</strong></li><li>然后调用那个servlet的service方法</li><li>service方法返回一个response对象tomcat再把这个response返回给客户端。</li></ul><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p><strong>Servlet的生命周期</strong>有四个阶段</p><ul><li>实例化：调用构造方法创建Servlet实例</li><li>init()：用来对Servlet做一些初始化的操作</li><li>service()：用来处理请求的方法</li><li>destroy()：服务器停止时调用，用来释放资源。</li></ul><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><h4 id="Filter的作用"><a href="#Filter的作用" class="headerlink" title="Filter的作用"></a>Filter的作用</h4><p>filter可以作用在某个Servlet或一组Servlet，主要流程为</p><ul><li>对用户请求(HttpServletRequest)进行预处理</li><li>servlet处理用户请求</li><li>对服务器响应(HttpServletResponse)进行后处理</li></ul><h4 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h4><h4 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h4><ul><li>实例化：调用构造方法创建Filter实例，Filter实例服务器一旦启动就会被创建</li><li>init()：用来对Filter做一些初始化的操作</li><li>doFilter()：Filter的主要方法，用来完成过滤器主要功能的方法</li><li>destroy()：服务器停止时调用，用来释放资源。</li></ul><h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><p>处理中文乱码</p><p>过滤敏感词汇</p><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><p>当触发某个事件，如servlet context初始化完成时，需要做一些事情，servlet规范中定义了若干个Listener用于监听这些事件。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>用于对特定对象的生命周期和特定事件进行响应处理，主要用于对Session,request,context等进行监控。</p><h5 id="主要监听器"><a href="#主要监听器" class="headerlink" title="主要监听器"></a>主要监听器</h5><p>ServletContextListener：ServletContext的创建和销毁</p><p>HttpSessionListener：HttpSession的创建和销毁</p><p>ServletRequestListener： ServletRequest的创建和销毁</p><h3 id="主要接口"><a href="#主要接口" class="headerlink" title="主要接口"></a>主要接口</h3><h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h4><p>Servlet与Servlet容器之间直接通信的接口,一个web应用只独有一个ServletContext，由web容器实现</p><ul><li>用于在web应用范围内存取共享数据,如setAttribute(String name, Object object)，getAttribute()</li><li>获取当前Web应用的资源，如getContextPath()</li><li>获取服务器端的文件系统资源，如getResourceAsStream()</li><li>输出日志，如log(String msg) ： 向Servlet的日志文件中写日志</li><li>在具体ServletContext 实现中，提供了添加Servlet，Filter,Listener到ServletContext里面的方法</li></ul><h4 id="ServletRequest"><a href="#ServletRequest" class="headerlink" title="ServletRequest"></a>ServletRequest</h4><p>封装了客户端请求的所有信息，如果使用HTTP协议通信则包括HTTP协议的请求行和请求头。HTTP协议对应请求对象类型是HttpServletRequest类</p><ul><li>获取HTTP协议请求头部，如getHeader、getHeaders</li><li>获取请求路径，如getContextPath、getServletPath</li><li>获取cookie的方法，如getCookies</li><li>获取session的方法，如getSession,session是存储在服务器内存中，返回响应的时候会写入浏览器一个sessionId的cookie，用来标示这一个会话</li></ul><h4 id="ServletResponse"><a href="#ServletResponse" class="headerlink" title="ServletResponse"></a>ServletResponse</h4><p>Servlet通过ServletResponse对象来生成响应结果，定义了一系列与生成响应结果相关的方法，如:</p><ul><li>setCharacterEncoding() —— 设置相应正文的字符编码；</li><li>setContentLength() —— 设置响应正文的长度；</li></ul><h4 id="HttpSeesion"><a href="#HttpSeesion" class="headerlink" title="HttpSeesion"></a>HttpSeesion</h4><p>服务器端为保存状态而创建的一个特殊的对象</p><h5 id="与servletContext区别"><a href="#与servletContext区别" class="headerlink" title="与servletContext区别"></a>与servletContext区别</h5><p>作用范围不同</p><ul><li>HttpSession是针对每一个客户端浏览器单独有一个</li><li>ServletContext是针对每一个WEB应用程序有一个</li></ul><p>存活时间不同：</p><ul><li>HttpSession第一次访问服务器，服务器端调用request.getSession()时创建，访问间隔时间超过30分钟就销毁。</li><li>ServletContext服务器启动时创建，服务器停止时销毁</li></ul><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>tomcat等容器其实就是web服务的实现，暴露端口，按照特定资源URL找到处理的servlet。然后处理请求</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200727145659.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JAVA-WEB&quot;&gt;&lt;a href=&quot;#JAVA-WEB&quot; class=&quot;headerlink&quot; title=&quot;JAVA WEB&quot;&gt;&lt;/a&gt;JAVA WEB&lt;/h1&gt;&lt;h2 id=&quot;java-web-三大组件&quot;&gt;&lt;a href=&quot;#java-web-三大组件&quot; c
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="java-web" scheme="https://xulilei.github.io/tags/java-web/"/>
    
  </entry>
  
  <entry>
    <title>Spring IOC&amp;AOP</title>
    <link href="https://xulilei.github.io/2020/07/25/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BspringIOC%20AOP/"/>
    <id>https://xulilei.github.io/2020/07/25/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BspringIOC%20AOP/</id>
    <published>2020-07-25T06:52:01.000Z</published>
    <updated>2020-09-12T01:38:13.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="秋招复习之springIOC-AOP"><a href="#秋招复习之springIOC-AOP" class="headerlink" title="秋招复习之springIOC AOP"></a>秋招复习之springIOC AOP</h1><h2 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h2><h4 id="Spring-核心容器"><a href="#Spring-核心容器" class="headerlink" title="Spring 核心容器"></a>Spring 核心容器</h4><p>是整个spring的核心模块，其他的功能需要依赖</p><h4 id="IOC：inversion-of-controller"><a href="#IOC：inversion-of-controller" class="headerlink" title="IOC：inversion of controller"></a>IOC：inversion of controller</h4><ul><li>控制反转：是面向对象编程中的一种设计原则，可以用来降低代码之间的耦合度</li><li>依赖注入（Dependency Injection，简称DI）：是IOC常见的实现方式</li></ul><h4 id="为什么要使用IOC？"><a href="#为什么要使用IOC？" class="headerlink" title="为什么要使用IOC？"></a>为什么要使用IOC？</h4><ul><li>将对象之间的相互依赖关系交给IOC容器管理，并由IOC完成对象的注入，会大大简化程序的开发</li></ul><h4 id="如何将bean注册到容器中去"><a href="#如何将bean注册到容器中去" class="headerlink" title="如何将bean注册到容器中去"></a>如何将bean注册到容器中去</h4><ul><li><h5 id="xml：XML添加对应约束"><a href="#xml：XML添加对应约束" class="headerlink" title="xml：XML添加对应约束"></a>xml：XML添加对应约束</h5><ul><li>set注入和构造器注入</li></ul></li><li><h5 id="annotation：XML添加对应约束，打开注解扫描component-scan"><a href="#annotation：XML添加对应约束，打开注解扫描component-scan" class="headerlink" title="annotation：XML添加对应约束，打开注解扫描component-scan"></a>annotation：XML添加对应约束，打开注解扫描component-scan</h5><ul><li>@component修饰想要IOC管理的类</li></ul></li><li><h5 id="javaconfig：指定-Configuration配置类，开启注解扫描-ComponentScan"><a href="#javaconfig：指定-Configuration配置类，开启注解扫描-ComponentScan" class="headerlink" title="javaconfig：指定@Configuration配置类，开启注解扫描@ComponentScan"></a>javaconfig：指定@Configuration配置类，开启注解扫描@ComponentScan</h5><ul><li>@component修饰想要IOC管理的类</li><li>@Bean 在配置类中创建新对象并交给IOC</li></ul></li><li><h5 id="Import：在配置类上通过import直接注册组件"><a href="#Import：在配置类上通过import直接注册组件" class="headerlink" title="Import：在配置类上通过import直接注册组件"></a>Import：在配置类上通过import直接注册组件</h5><ul><li>实现了ImportBeanDefinitionRegistrar接口的类<ul><li>ImportBeanDefinitionRegistrar提供了BeanDefinitionRegistry</li></ul></li><li>实现ImportSelector接口的类<ul><li>返回的是一个数组，可以批量的注册</li></ul></li></ul></li></ul><h4 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h4><p>只要在类的定义中提供依赖关系，Spring根据配置类型自动装配</p><ul><li><h5 id="Autowired"><a href="#Autowired" class="headerlink" title="@ Autowired"></a>@ Autowired</h5><ul><li>默认按照ByType匹配，会遇到匹配到相同类型多个Bean的问题<ul><li>@ Qualifier(“bean的名字”) </li><li>@ primary 指定主数据源</li></ul></li></ul></li><li><h5 id="Resource"><a href="#Resource" class="headerlink" title="@ Resource"></a>@ Resource</h5><ul><li>默认按照ByName匹配<ul><li>可以通过@Resource(name=”beanName”) 指定被注入的bean的名称</li></ul></li></ul></li></ul><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>5种作用域，分别为 singleton、prototype、request、session和global session ，仅当用户使用支持 Web 的 ApplicationContext 时，最后三个才可用</p><ul><li><h5 id="singleton：单例模式"><a href="#singleton：单例模式" class="headerlink" title="singleton：单例模式"></a>singleton：单例模式</h5><ul><li>Spring IoC 容器中只会存在一个共享的 Bean 实例，无论有多少个Bean 引用它，始终指向同一对象  </li><li>单例模式的bean是线程安全的吗？<ul><li>不是，由于所有线程操作的都是同一个bean，因此写操作会存在线程安全的问题，最简单的方法是将作用域改为prototype</li></ul></li></ul></li><li><h5 id="prototype：原型模式"><a href="#prototype：原型模式" class="headerlink" title="prototype：原型模式"></a>prototype：原型模式</h5><ul><li>每次通过 Spring 容器获取prototype定义的bean时，容器都将创建一个新的 Bean实例，每个Bean实例都有自己的属性和状态  </li></ul></li><li><h5 id="request：一次request一个实例"><a href="#request：一次request一个实例" class="headerlink" title="request：一次request一个实例"></a>request：一次request一个实例</h5><ul><li>在一次 Http 请求中，容器会返回该 Bean 的同一实例。而对不同的Http请求则会<br>产生新的Bean，仅在当前Http Request内有效,随着当前 Http 请求结束而销毁</li></ul></li><li><h5 id="session：一个session，一个实例"><a href="#session：一个session，一个实例" class="headerlink" title="session：一个session，一个实例"></a>session：一个session，一个实例</h5></li><li><h5 id="global-session：一个全局的Http-Session中，容器会返回该-Bean-的同一个实例"><a href="#global-session：一个全局的Http-Session中，容器会返回该-Bean-的同一个实例" class="headerlink" title="global session：一个全局的Http Session中，容器会返回该 Bean 的同一个实例"></a>global session：一个全局的Http Session中，容器会返回该 Bean 的同一个实例</h5></li></ul><h4 id="两种IOC容器区别"><a href="#两种IOC容器区别" class="headerlink" title="两种IOC容器区别"></a>两种IOC容器区别</h4><p>1、实例化bean对象时机不同，beanfactory是在用户需要时才会去实例化这个对象，因此属于懒加载。而applicationContext除了手动设置加载类型为懒加载外，会在容器创建时就实例化所有的bean对象，是即时加载</p><p>2、beanFactory是最原始的面向spring的工厂，它不支持aop，web等spring组件，而applicationContext则支持</p><p>3、继承关系，applicationContext继承了beanFactory对象，拥有beanFactory的所有功能外，更拓展了beanfactory，因此现在绝大多数的情况下都不再使用beanfactoty作为程序的入口</p><h4 id="PostProcessor"><a href="#PostProcessor" class="headerlink" title="PostProcessor"></a>PostProcessor</h4><ul><li>BeanPostProcessor：是Bean的后置处理器，bean创建对象初始化前后工作</li><li>BeanFactoryPostProcessor：是BeanFactory的后置处理器</li><li>BeanDefinitionRegistryPostProcessor：继承自BeanFactoryPostProcessor，多了postProcessBeanDefinitionRegistry可以向容器中注入BeanDefinition</li></ul><h4 id="Bean循环依赖"><a href="#Bean循环依赖" class="headerlink" title="Bean循环依赖"></a>Bean循环依赖</h4><h5 id="循环依赖的原因"><a href="#循环依赖的原因" class="headerlink" title="循环依赖的原因"></a>循环依赖的原因</h5><p>spring实例化一个bean的时，先分两步进行，首先createBeanInstance，然后再populateBean。为bean注入属性时，是先通过递归的方式实例化这个Bean依赖的bean。如果在这其中，形成了循环，那么就会导致循环依赖。</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>通过三级缓存，一级缓存为singletonObjects，存放的是完全实例化的bean，可以直接使用</p><p>二级缓存：earlySingletonObjects，存放早期bean的引用，尚未装配属性</p><p>三级缓存：singletonFactories，三级缓存，存放实例化完成的bean工厂</p><p>主要过程是，假设A依赖B，B依赖A：</p><p>A一次执行doGetBean，查询缓存，createBean创建实例，实例化完成后放入三级缓存singletonFactories，接着执行populate方法装配时，发现依赖了B对象，此时以同样的方式执行B的bean创建，同样的会发现有一个属性是A对象，因此再次执行创建A bean，但执行到getSingleton时，从三级缓存中查询到了A对象未装配完成的实例，此时直接返回A，B就完成了装配，并加入一级缓存singletonObjects中，A自然也就装配完成了</p><h4 id="Aware接口"><a href="#Aware接口" class="headerlink" title="Aware接口"></a>Aware接口</h4><p>在创建对象时，调用规定方法可以注入Spring底层的组件，都通过相关的processor来处理</p><ul><li><p>如ApplicationContext、BeanFactory、BeanName等</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200726161610.png" alt=""></p></li></ul><h4 id="Bean的生命周期就是createBean的过程"><a href="#Bean的生命周期就是createBean的过程" class="headerlink" title="Bean的生命周期就是createBean的过程"></a>Bean的生命周期就是createBean的过程</h4><p>1、首先通过bean的注册器，将bean的各种信息，比如属性，构造方法参数，是否单例等信息转换成beanDefinition并保存在beanDefinitionMap中</p><p>2、从BeanDefinitionMap中取出bean对应的BeanDefinition，并实例化</p><p>3、对实例化的 Bean 进行配置，polulate设置属性</p><p>4、实现了.Aware接口的方法会在这里调用，即为实现该接口的对象传入对应的组件， 比如实现 BeanFactoryAware 接口，调用 setBeanFactory()等</p><p>5、如果存在与 bean 关联的任何 BeanPostProcessors，则调用 postProcessBeforeInitialization() 方法。</p><p>6、如果为 bean 指定了 init 方法，会按照@PostConstruct–&gt;InitializingBean–&gt;init method调用。</p><p>7、最后，如果存在与 bean 关联的任何 BeanPostProcessors，则将调用 postProcessAfterInitialization() 方法。</p><p>8、如果为 bean 指定了destroy 方法，会按照 PreDestroy–&gt;DisposableBean–&gt;destroy-method调用销毁方法</p><h4 id="GetBean的过程"><a href="#GetBean的过程" class="headerlink" title="GetBean的过程"></a>GetBean的过程</h4><p>1、geBean-&gt;getSingleton：先从一个singltonObject的concurrentHashMap中尝试获取bean，如果获取不到则执行createBean</p><p>2、先递归实例化这个bean依赖的bean，完成后通过resolveBeforeInstantiation判断能否获得这个对象的代理对象（如果这个对象被AOP增强了，那么就从这里拿到代理对象），如果获取不到则执行doCreateBean方法</p><p>3、bean的生命周期</p><h4 id="容器初始化过程"><a href="#容器初始化过程" class="headerlink" title="容器初始化过程"></a>容器初始化过程</h4><p>主要工作在refresh方法中</p><ul><li><strong>prepareRefresh()</strong>：初始化工厂类准备工作：包括设置 启动时间，是否激活标志位，初始化属性源配置</li><li><strong>obtainFreshBeanFactory()</strong>：这一步初始化了一个beanFactory（DefaultListableBeanFactory），内部维护了一个BeanDefenitionMap，里面存放了后续定义bean的beanDefenition。</li><li><strong>prepareBeanFactory</strong>(beanFactory)：会手动注册一些特殊的 bean，比如类加载器，ApplicationContextAwareProcessor用来注册ApplicationContext</li><li><strong>invokeBeanFactoryPostProcessors</strong>：先执行我们自己定义的BeanDefinitionRegistry，接着执行系统定义的BeanDefinitionRegistry，最后执行我们自己定义的BeanFactoryPostProcessor<ul><li>这里要特别特一下，系统定义的BeanDefinitionRegistry中有个ConfigurationClassProcessor，用来处理@Configuration类的</li></ul></li><li><strong>registerBeanPostProcessors(beanFactory)</strong>：向Bean工厂注册BeanPostProcessor</li><li>初始化事件派发器，监听器等</li><li><strong>finishBeanFactoryInitialization</strong>(beanFactory);最重要的方法就是preInstantiateSingletons()，初始化所有单实例Bean<ul><li>先执行getBean()，如果拿不到则进行，doCreateBean的过程</li></ul></li><li>finishRefresh();完成容器的初始化操作</li></ul><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>AOP的编程思想就是把这些问题和主业务逻辑分开，达到与主业务逻辑解耦的目的。使代码的重用性和开发效率更高</p><ul><li>日志记录、权限验证、效率检查事务管理、exception等等</li></ul><h4 id="增强术语"><a href="#增强术语" class="headerlink" title="增强术语"></a>增强术语</h4><p>target对象也称原始对象中的方法被称为jion point连接点，连接点的集合被称为point cut切点，连接点经过AOP增强的过程叫weaving织入，什么时候织入，织入到哪里被称为advice通知，生成新的对象叫Proxy代理对象</p><h5 id="Aspect"><a href="#Aspect" class="headerlink" title="Aspect"></a>Aspect</h5><p>是一个实现交叉问题的类，可以使用@Aspect 注解将类声明为 Aspect。</p><h5 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h5><p>是针对特定 JoinPoint 采取的<strong>操作</strong>。可    以将 Advice 视为 Spring 拦截器（Interceptor）或 Servlet 过滤器（filter）</p><h5 id="JoinPoint"><a href="#JoinPoint" class="headerlink" title="JoinPoint"></a>JoinPoint</h5><p>JoinPoint 是应用程序中的特定点，在 Spring AOP 中，一个JoinPoint 代表一个方法的执行。</p><h5 id="Pointcut"><a href="#Pointcut" class="headerlink" title="Pointcut"></a>Pointcut</h5><p>是与 JoinPoint 匹配的正则表达式，是JoinPoint的集合，用于声明切入点表达式。</p><h4 id="如何声明一个通知"><a href="#如何声明一个通知" class="headerlink" title="如何声明一个通知"></a>如何声明一个通知</h4><h5 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200725182452.png" alt=""></p><p><strong>execution</strong>：用于匹配方法执行 join points连接点，<strong>粒度最小，使用最多</strong></p><p>详细实例</p><ul><li>@Pointcut(“execution(* com.chenss.dao.<em>.</em>(..))”)//匹配com.chenss.dao包下的任意接口和类的任意方法</li><li>@Pointcut(“execution(public * com.chenss.dao.<em>.</em>(..))”)//匹配com.chenss.dao包下的任意接口和类的public方法</li><li>@Pointcut(“execution(public * com.chenss.dao.<em>.</em>())”)//匹配com.chenss.dao包下的任意接口和类的public 无方法参数的方法</li><li>@Pointcut(“execution(* com.chenss.dao.<em>.</em>(java.lang.String, ..))”)//匹配com.chenss.dao包下的任意接口和类的第一个参数为String类型的方法</li><li>@Pointcut(“execution(* com.chenss.dao.<em>.</em>(java.lang.String))”)//匹配com.chenss.dao包下的任意接口和类的只有一个参数，且参数为String类型的方法</li><li>@Pointcut(“execution(public * *(..))”)//匹配任意的public方法</li><li>@Pointcut(“execution(* te*(..))”)//匹配任意的以te开头的方法</li><li>@Pointcut(“execution(* com.chenss.dao.IndexDao.*(..))”)//匹配com.chenss.dao.IndexDao接口中任意的方法</li><li>@Pointcut(“execution(* com.chenss.dao..<em>.</em>(..))”)//匹配com.chenss.dao包及其子包中任意的方法</li></ul><h5 id="几种类型的通知"><a href="#几种类型的通知" class="headerlink" title="几种类型的通知"></a>几种类型的通知</h5><ul><li><p>@ Before（”pointCut1()&amp;&amp;!pointCut2()”）：满足pointCut1()切点不满足pointCut2()切点的连接点（方法）之前执行</p></li><li><p>@ After（”pointCut1()”）：满足pointCut1()切点的连接点（方法）之后执行</p></li><li><p>@ AfterReturning：正常返回后运行</p></li><li><p>@ AfterThrowing：抛出异常时运行</p></li><li><p>@ Around：围绕连接点执行</p></li></ul><h5 id="联合使用"><a href="#联合使用" class="headerlink" title="联合使用"></a>联合使用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aopAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* xu..*(..))"</span>)<span class="comment">//切入点表达式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCutA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pointCutA()"</span>)<span class="comment">//通知，对具体切入点所做的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AOP-两种代理方式"><a href="#AOP-两种代理方式" class="headerlink" title="AOP 两种代理方式"></a>AOP 两种代理方式</h4><p>AOP 代理主要分为静态代理和动态代理两大类，静态代理以 AspectJ 为代表；而动态代理则以 Spring AOP 为代表</p><h5 id="静态代理（AspectJ-AOP）"><a href="#静态代理（AspectJ-AOP）" class="headerlink" title="静态代理（AspectJ AOP）"></a>静态代理（AspectJ AOP）</h5><p>静态代理是指使用 AOP 框架（如AspectJ）提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，<strong>基于字节码</strong>操作，因此也称为<strong>编译时增强</strong>；</p><h5 id="动态代理（Spring-AOP）"><a href="#动态代理（Spring-AOP）" class="headerlink" title="动态代理（Spring AOP）"></a>动态代理（Spring AOP）</h5><p>动态代理则在运行时借助于 JDK 动态代理、CGLIB 等在内存中“临时”生成 AOP 动态代理类，是<strong>基于代理</strong>的，因此也被称为<strong>运行时增强</strong>。</p><ul><li><strong>JDK动态接口代理</strong>：主要涉及到 Proxy 和 InvocationHandler。InvocationHandler 是一个接口，通过实现该接口定义织入逻辑，并通过反射机制调用目标类的代码，动态将织入逻辑和业务逻辑编制在一起，生成目标类的代理对象。 </li><li><strong>CGLib动态代理</strong>：是一个强大的高性能， 高质量的代码生成类库，可以在运行期扩展 Java 类与实现 Java 接口， CGLib 封装了 asm，可以在运行期动态生成新的 class。和 JDK动态代理相比较： JDK只能为接口创建代理实例，而CGLib可以为类创建动态代理。  </li></ul><h3 id="AOP实现原理"><a href="#AOP实现原理" class="headerlink" title="AOP实现原理"></a>AOP实现原理</h3><ul><li><p>从一个<strong>注解</strong>说起@ EnableAspectJAutoProxy，该注解向容器中注入了AnnotationAwareAspectJAutoProxyCreator对象</p><ul><li>AnnotationAwareAspectJAutoProxyCreator本质是InstantiationAwareBeanPostProcessor，会尝试在对象创建前获得该对象的代理对象</li></ul></li><li><p>拦截后做了什么呢？</p></li></ul><p><img src="https://gitee.com/xulilei/pic/raw/master/20200726164834.png" alt=""></p><ul><li>PostProcessorAfterInitialization：<strong>warpIfNecessary()</strong>获得代理对象<ul><li>或取当前所有增强方法（通知方法）：<strong>找到能在当前Bean使用的增强器</strong>，通过切入点表达式进行匹配</li><li>如果当前Bean需要增强，通过<strong>ProxyFactory创建当前Bean的代理对象</strong>：通过是否实现接口等自动决定<ul><li>JDK动态代理</li><li>cglib动态代理</li></ul></li></ul></li><li>拦截目标方法的执行，当执行目标方法的时候，代理对象就会执行通知方法中的逻辑<ul><li>容器中保存了代理对象的详细信息，比如目标对象，增强器等、会生成一个拦截器链拦截目标方法的执行</li></ul></li></ul><h5 id="面试答："><a href="#面试答：" class="headerlink" title="面试答："></a>面试答：</h5><p>Aop的实现原理从一个注解说起，@EnableAspectJAutoProxy。这个注解向容器中import了一个AnnotationAwareAspectJAutoProxyCreator对象，这个对象本质是一个InstantiationAwareBeanPostProcessor，他有两个主要的方法，一个是ApplyBeanPostProcessorBeforeInstantiation，这个方法会在createBean前尝试通过resolveBeforeInstantiation拿到代理对象，如果这个bean是aop的targetsource，则不用通过之后的createBean创建对象，而是通过另一个ApplyBeanPostProcessorAfterInitialization方法中的warpifNecessary去创建代理对象，通过切入点表达式找到能在当前bean使用的adivsor，通过proxyFactory创建当前Bean的代理对象，通过是否是接口自动决定，如果基于接口则通过JDK动态代理，基于类则通过cglib动态代理，这个代理对象包含包含target source和advisor等信息，会生成一个interceptor链，当目标方法需要执行则这个代理对象就会执行advisor中的逻辑</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;秋招复习之springIOC-AOP&quot;&gt;&lt;a href=&quot;#秋招复习之springIOC-AOP&quot; class=&quot;headerlink&quot; title=&quot;秋招复习之springIOC AOP&quot;&gt;&lt;/a&gt;秋招复习之springIOC AOP&lt;/h1&gt;&lt;h2 id=&quot;S
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="Spring" scheme="https://xulilei.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>中间件MQ</title>
    <link href="https://xulilei.github.io/2020/07/22/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>https://xulilei.github.io/2020/07/22/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/</id>
    <published>2020-07-22T02:34:14.000Z</published>
    <updated>2020-08-16T08:25:07.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秋招复习之中间件MQ"><a href="#秋招复习之中间件MQ" class="headerlink" title="秋招复习之中间件MQ"></a>秋招复习之中间件MQ</h2><h4 id="1、MQ的使用场景有哪些？"><a href="#1、MQ的使用场景有哪些？" class="headerlink" title="1、MQ的使用场景有哪些？"></a>1、MQ的使用场景有哪些？</h4><p><strong>异步</strong>：将非必要的逻辑业务写入消息队列，异步执行，加快响应速度，比如常见的发送短信验证码等</p><p><strong>削峰</strong>：比如短时间内大量请求数据库，可以先存储进入mq消息队列，数据库再慢慢消费这些消息</p><p><strong>解耦</strong>：对于新增业务模块可以单独扩展后写入消息队列，而不用加入原来的逻辑中，只需要订阅相应的消息队列即可</p><h4 id="2、MQ有哪些角色"><a href="#2、MQ有哪些角色" class="headerlink" title="2、MQ有哪些角色"></a>2、MQ有哪些角色</h4><p>生产者：消息的创建者，负责创建和推送数据到消息服务器</p><p>消费者：消息的接收方，用于处理数据和确认消息</p><p>消息服务器：就是RabbitMQ本身</p><h4 id="3、组成部分"><a href="#3、组成部分" class="headerlink" title="3、组成部分"></a>3、组成部分</h4><h5 id="channel信道"><a href="#channel信道" class="headerlink" title="channel信道"></a>channel信道</h5><p>channel 是真实 TCP 连接上的虚拟连接，发布消息订阅队列所有命令都是通过 channel 发送的，且每一个 channel 有唯一的ID。</p><h5 id="RoutingKey路由键"><a href="#RoutingKey路由键" class="headerlink" title="RoutingKey路由键"></a>RoutingKey路由键</h5><p>生产者在将消息发送给Exchange的时候，一般会指定一个routing key， 来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联合使用才能最终生效</p><h5 id="exchange交换器"><a href="#exchange交换器" class="headerlink" title="exchange交换器"></a>exchange交换器</h5><p>生产者将消息发送到Exchange，内部保存了 binding 关系的查找表，由Exchange根据关系表将消息路由到一个或多个Queue中，Exchange并不存储消息。</p><h5 id="bindingKey绑定键"><a href="#bindingKey绑定键" class="headerlink" title="bindingKey绑定键"></a>bindingKey绑定键</h5><p>用于绑定queue和exchange之间的关联，就是基于路由键将交换器和消息队列连接起来的路由规则</p><h5 id="queue消息队列"><a href="#queue消息队列" class="headerlink" title="queue消息队列"></a>queue消息队列</h5><p>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。等待消费者连接到这个队列将其取走 </p><h4 id="4、Vhost作用"><a href="#4、Vhost作用" class="headerlink" title="4、Vhost作用"></a>4、Vhost作用</h4><p>即mini-RabbitMQ server，其内部含有独立的queue、bind、exchange等，vhost可以作为应用隔离的手段，即不同的应用跑在不同的vhost中</p><h4 id="5、为什么使用rabbitMq"><a href="#5、为什么使用rabbitMq" class="headerlink" title="5、为什么使用rabbitMq"></a>5、为什么使用rabbitMq</h4><p>1、像activeMq RocketMq kafka等响应时间是ms级，而rabbitMq则可以达到us级，性能出色</p><p>2、采用erlang语言开发，并发性能好，管理界面清晰</p><p>3、有相对比较活跃的开源社区，支持比较好</p><h4 id="6、rabbitMq消息是如何发送的"><a href="#6、rabbitMq消息是如何发送的" class="headerlink" title="6、rabbitMq消息是如何发送的"></a>6、rabbitMq消息是如何发送的</h4><p>首先rabbitMq和server需要建立tcp连接，之后会创建一条channel信道，所有的消息都是通过这条信道传输的</p><h4 id="7、有哪几种路由模式"><a href="#7、有哪几种路由模式" class="headerlink" title="7、有哪几种路由模式"></a>7、有哪几种路由模式</h4><p><strong>Direct</strong>直接： 消息中的routingkey如果和binding key 一致，交换器就将消息发到对应的队列中。它是完全匹配、单播的模式  </p><p><strong>Fanout</strong>分发： 每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。每个队列都会获得一份复制的消息  </p><p><strong>topic</strong>主题：可以使来自不同源头的消息能够到达同一个队列</p><h4 id="8、如何确保生产者将消息正确的发送到了RabbitMQ？"><a href="#8、如何确保生产者将消息正确的发送到了RabbitMQ？" class="headerlink" title="8、如何确保生产者将消息正确的发送到了RabbitMQ？"></a>8、如何确保生产者将消息正确的发送到了RabbitMQ？</h4><p>RabbitMQ提供transaction和confirm模式来确保生产者不丢消息</p><h5 id="transaction机制"><a href="#transaction机制" class="headerlink" title="transaction机制"></a>transaction机制</h5><p>发送消息前，开启事务，然后发送消息，如果发送过程中出现什么异常，事务就会回滚,如果发送成功则提交事务，这种方式有个缺点：吞吐量下降；</p><h5 id="confirm模式"><a href="#confirm模式" class="headerlink" title="confirm模式"></a>confirm模式</h5><p>confirm模式是异步的，生产者在等待确认的同时，可以继续发送消息</p><ul><li>生产者将信道设置成confirm模式，所有在该信道上发布的消息都会被指派一个唯一的ID，一旦消息被投递到所有匹配的队列，或者消息被持久化后，rabbitMQ就会发送一个包含消息的唯一ID的ACK信息给生产者</li><li>如果rabbitMQ没能处理该消息，则会发送一个Nack消息给你，你可以进行重试操作。</li></ul><h4 id="9、如何确保消费者消费了消息"><a href="#9、如何确保消费者消费了消息" class="headerlink" title="9、如何确保消费者消费了消息"></a>9、如何确保消费者消费了消息</h4><p>消费者接收每一条消息后都必须进行确认（消息接收和消息确认是两个不同操作）。只有消费者确认了消息，RabbitMQ才能安全地把消息从队列中删除。这里并没有用到超时机制，RabbitMQ仅通过Consumer的连接中断来确认是否需要重新发送消息。也就是说，只要连接不中断，RabbitMQ给了Consumer足够长的时间来处理消息。</p><h5 id="下面罗列几种特殊情况："><a href="#下面罗列几种特殊情况：" class="headerlink" title="下面罗列几种特殊情况："></a>下面罗列几种特殊情况：</h5><ul><li>如果消费者接收到消息，在确认之前断开了连接或取消订阅，RabbitMQ会认为消息没有被分发，然后重新分发给下一个订阅的消费者。（可能存在消息重复消费的隐患，需要根据bizId去重）</li><li>如果消费者接收到消息却没有确认消息，连接也未断开，则RabbitMQ认为该消费者繁忙，将不会给该消费者分发更多的消息。</li></ul><h4 id="10、如何保证避免消息重复消费"><a href="#10、如何保证避免消息重复消费" class="headerlink" title="10、如何保证避免消息重复消费"></a>10、如何保证避免消息重复消费</h4><p>两个ID，一个生产者发送的inner-msg-id，一个消费时bizId。</p><p>在消息生产时，MQ内部针对每条生产者发送的消息生成一个唯一的inner-msg-id，作为去重和幂等的依据，避免重复的消息进入队列；</p><p>在消息消费时，要求消息体中必须要有一个bizId（对于同一业务全局唯一，如支付ID、订单ID、帖子ID等）作为去重和幂等的依据，避免同一条消息被重复消费。</p><h4 id="11、如何保证使用rabbitMQ过程中不丢失数据"><a href="#11、如何保证使用rabbitMQ过程中不丢失数据" class="headerlink" title="11、如何保证使用rabbitMQ过程中不丢失数据"></a>11、如何保证使用rabbitMQ过程中不丢失数据</h4><h5 id="生产者丢失"><a href="#生产者丢失" class="headerlink" title="生产者丢失"></a>生产者丢失</h5><p>transaction机制和confirm模式</p><h5 id="消息队列丢失"><a href="#消息队列丢失" class="headerlink" title="消息队列丢失"></a>消息队列丢失</h5><p>一般是开启持久化磁盘的配置解决消息队列丢失。</p><p>持久化配置是和confirm机制配合使用的，在消息持久化磁盘后，会生产者发送一个Ack信号。这样，如果消息持久化磁盘之前，rabbitMQ宕机了，那么生产者收不到Ack信号，会自动重发。</p><h5 id="消费者丢失"><a href="#消费者丢失" class="headerlink" title="消费者丢失"></a>消费者丢失</h5><p>主要是因为消费的时候，刚消费到，还没处理，结果进程挂了，而rabbitmq认为已经消费了，数据就丢了。</p><p>这个时候关闭rabbitmq自动ack，即确保处理完的时候，再手动ack。这样的话，如果消费者还没处理完就挂掉，rabbitMQ就无法收到ack，就会认为消费者还没处理完，这个时候rabbitmq会把这个消费分配给别的consumer去处理，消息是不会丢的。</p><h4 id="12、如何保证RabbitMQ消息的顺序性"><a href="#12、如何保证RabbitMQ消息的顺序性" class="headerlink" title="12、如何保证RabbitMQ消息的顺序性"></a>12、如何保证RabbitMQ消息的顺序性</h4><p>单线程消费保证消息的顺序性；</p><p>对消息进行编号，消费者处理消息时根据编号处理消息</p><h4 id="13、死信消息"><a href="#13、死信消息" class="headerlink" title="13、死信消息"></a>13、死信消息</h4><ul><li>消息被拒绝并且设置 requeue 参数的值为 false</li><li>消息过期，且未被消费</li><li>队列达到最大的长度</li></ul><h4 id="14、rabbitMQ如何持久化"><a href="#14、rabbitMQ如何持久化" class="headerlink" title="14、rabbitMQ如何持久化"></a>14、rabbitMQ如何持久化</h4><p>rabbitTemplate调用converAndSend时默认就是持久化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;秋招复习之中间件MQ&quot;&gt;&lt;a href=&quot;#秋招复习之中间件MQ&quot; class=&quot;headerlink&quot; title=&quot;秋招复习之中间件MQ&quot;&gt;&lt;/a&gt;秋招复习之中间件MQ&lt;/h2&gt;&lt;h4 id=&quot;1、MQ的使用场景有哪些？&quot;&gt;&lt;a href=&quot;#1、MQ的使用场
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="rabbitMQ" scheme="https://xulilei.github.io/tags/rabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>redis28问</title>
    <link href="https://xulilei.github.io/2020/07/19/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0redis/"/>
    <id>https://xulilei.github.io/2020/07/19/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0redis/</id>
    <published>2020-07-19T10:27:57.000Z</published>
    <updated>2020-08-27T08:39:42.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秋招复习redis之28问"><a href="#秋招复习redis之28问" class="headerlink" title="秋招复习redis之28问"></a>秋招复习redis之28问</h2><h4 id="1、为什么要用redis-缓存"><a href="#1、为什么要用redis-缓存" class="headerlink" title="1、为什么要用redis/缓存"></a>1、为什么要用redis/缓存</h4><p>高性能：对于热点数据，如果不做缓存，每次都要通过硬盘读取数据，会造成性能降低。</p><p>高并发：直接操作内存中数据的并发量是远远大于操作数据库的，添加缓存可以提升系统的并发度</p><h4 id="2、redis数据类型"><a href="#2、redis数据类型" class="headerlink" title="2、redis数据类型"></a>2、redis数据类型</h4><p><strong>String</strong>：包括数字，主要用于统计数据</p><p><strong>Hash</strong>：包含键值对的散列表，适合存储对象，比如用户信息，订单信息等</p><p><strong>List</strong>：双向链表，比如消息列表，还可以做分页</p><p><strong>Set</strong>：不重复，自然序的列表数据，可判断一个成员是否在一个set内，比如好友列表</p><p><strong>Sorted Set</strong>：按照一个权重参数score进行有序排列，多用于自定义的排行列表</p><h4 id="3、为什么使用redis而不使用map-guava-cache等本地缓存"><a href="#3、为什么使用redis而不使用map-guava-cache等本地缓存" class="headerlink" title="3、为什么使用redis而不使用map/guava/cache等本地缓存"></a>3、为什么使用redis而不使用map/guava/cache等本地缓存</h4><p>首先缓存分为分布式缓存和本地缓存：</p><p>1、map/guava/cache等属于本地缓存，每个jvm实例都对应一份本地缓存，生命周期随着jvm的结束而结束，多个JVM实例会导致缓存不一致</p><p>2、redis是一种分布式缓存，多实例共享redis缓存，具有缓存一致性，并且redis支持的数据结构也优于本地缓存</p><h4 id="4、redis为什么这么快"><a href="#4、redis为什么这么快" class="headerlink" title="4、redis为什么这么快"></a>4、redis为什么这么快</h4><p>1、redis完全基于内存，内存的读写速度远超硬盘</p><p>2、redis采用的是单线程epoll多路复用模型，是一种非阻塞I/O</p><p>3、redis单线程模型没有切换线程带来的开小</p><h4 id="5、RDB持久化"><a href="#5、RDB持久化" class="headerlink" title="5、RDB持久化"></a>5、RDB持久化</h4><p>通过创建快照获取内存中数据某个时间点的副本，并将其存储到磁盘中，持久化的是数据</p><h5 id="触发方式"><a href="#触发方式" class="headerlink" title="触发方式"></a>触发方式</h5><p>1、save 900 1：900秒后至少一个数据发生变化</p><p>2、save 300 10：300秒后至少10个数据放生变化</p><p>3、save 60 10000：60秒后至少10000个数据发生变化</p><h5 id="过程："><a href="#过程：" class="headerlink" title="过程："></a><strong>过程</strong>：</h5><p>1、则父进程会fork一个子进程，fork期间父进程是阻塞的，无法处理其他命令</p><p>2、父进程fork完成后，不再阻塞，可以继续处理请求</p><p>3、子进程开始执行创建快照文件，并对原来的RDB文件进行替换，替换完成告知父进程，并自动结束</p><h4 id="6、AOF持久化"><a href="#6、AOF持久化" class="headerlink" title="6、AOF持久化"></a>6、AOF持久化</h4><p>相比于RDB的数据持久化，AOF持久化的是操作redis的命令，在需要时通过命令恢复数据</p><h5 id="触发方式："><a href="#触发方式：" class="headerlink" title="触发方式："></a>触发方式：</h5><p>appendSync-always：即每次有数据修改就写入</p><p>appendSync-everySec：每秒钟写入一次</p><p>appendfsync no ：交由操作系统决定</p><h5 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h5><p>由于存储的是操作redis的命令，随着redis的运行，aof文件会越来越大，此时会触发AOF重写</p><h5 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h5><p>1、父进程会fork一个子进程，这段期间父进程是阻塞的</p><p>2、父进程接触阻塞，并维护一个缓冲区，记录子进程重写期间对数据改动的命令</p><p>3、子进程执行AOF重写没有读取上一个aof文件，而是将当前内存中的数据通过命令重新写入新的AOF文件</p><p>4、子进程AOF重写结束后，父进程将缓冲区的命令追加到aof的末尾，使得数据状态一致</p><h4 id="7、AOF-RDB对比"><a href="#7、AOF-RDB对比" class="headerlink" title="7、AOF/RDB对比"></a>7、AOF/RDB对比</h4><table><thead><tr><th></th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>内容</td><td>全量备份所有数据</td><td>增量备份修改命令</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>安全性</td><td>丢失数据</td><td>根据策略，every sec可能会丢失一秒数据</td></tr></tbody></table><h4 id="8、混合持久化"><a href="#8、混合持久化" class="headerlink" title="8、混合持久化"></a>8、混合持久化</h4><p>重写时，这一刻的内存rdb快照数据和AOF修改命令日志文件存在一起，都写入新的aof文件，快速加载的时候优先加载aof，避免丢失过多的数据</p><p>由于AOF文件中不单是AOF格式还有RDB的部分，因此可读性较差，</p><h4 id="9、redis数据过期删除策略"><a href="#9、redis数据过期删除策略" class="headerlink" title="9、redis数据过期删除策略"></a>9、redis数据过期删除策略</h4><h5 id="立即删除"><a href="#立即删除" class="headerlink" title="立即删除"></a>立即删除</h5><p>立即删除能保证内存中数据的最大新鲜度，因为它保证过期键值会在过期后马上被删除，其所占用的内存也会随之释放。但是立即删除对cpu是最不友好的。因为删除操作会占用cpu的时间，如果刚好碰上了cpu很忙的时候，会给cpu造成额外的压力,所以并不适合用来处理大量的时间事件。</p><h5 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h5><p>惰性删除是指，某个键值过期后，此键值不会马上被删除，而是等到下次被使用的时候，才会被检查到过期，此时才能得到删除。所以惰性删除的缺点很明显，浪费内存。</p><h5 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h5><p>从上面分析来看，立即删除会短时间内占用大量cpu，惰性删除会在一段时间内浪费内存，所以定时删除是一个折中的办法。<br>定时删除是：每隔一段时间扫描部分设置了过期时间的key，删除已经过期的数据。此种做法可以减少删除操作对cpu的影响。也有效的减少了因惰性删除带来的内存浪费。</p><h4 id="10、redis内存淘汰机制"><a href="#10、redis内存淘汰机制" class="headerlink" title="10、redis内存淘汰机制"></a>10、redis内存淘汰机制</h4><p>内存淘汰策略的选取并不会影响删除策略的执行，是在内存空间不足时采取的申请空间的策略</p><p><strong>volatile-lru</strong>：从已设置过期时间中，淘汰最近最少使用的least recently used</p><p><strong>volatile-lfu</strong>：从已设置过期时间中，淘汰最不经常的数据least frequently used</p><p><strong>allkeys-lru</strong>：在全局键空间中，淘汰最近最少使用的key</p><p><strong>allkeys-lfu</strong>：在全局键空间中，淘汰最不经常使用的key</p><h4 id="11、redis如何保证数据都是热点数据"><a href="#11、redis如何保证数据都是热点数据" class="headerlink" title="11、redis如何保证数据都是热点数据"></a>11、redis如何保证数据都是热点数据</h4><p>删除策略和内存淘汰策略结合使用</p><h4 id="12、redis线程模型"><a href="#12、redis线程模型" class="headerlink" title="12、redis线程模型"></a>12、redis线程模型</h4><h5 id="单线程多路复用模型"><a href="#单线程多路复用模型" class="headerlink" title="单线程多路复用模型"></a>单线程多路复用模型</h5><p>多个套接字、IO多路复用程序、事件队列、文件事件分派器、事件处理器</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200721145219.png" alt=""></p><h5 id="消息处理流程"><a href="#消息处理流程" class="headerlink" title="消息处理流程"></a>消息处理流程</h5><ul><li>通过epoll多路复用程序来同时监听多个套接字</li><li>当被监听的套接字准备好执行连接应答(accept)、读取(read)、写入(write)、关闭(close)等操作时，与操作相对应的文件事件就会产生</li><li>尽管多个文件事件可能会并发地出现，但redis会将所有产生事件的套接字都推到一个有序队列里面</li><li>然后通过这个队列，以有序、同步、每次一个套接字的方式向文件事件分派器传送套接字，当上一个套接字产生的事件被处理完毕之后才会继续向文件事件分派器传送下一个套接字</li></ul><h4 id="13、redis内存优化"><a href="#13、redis内存优化" class="headerlink" title="13、redis内存优化"></a>13、redis内存优化</h4><p>用好redis的几种基本数据类型，让数据更紧凑的放置在一起</p><p>比如一个对象有几种属性，不要为每个属性设置单独的key，而是应该把这个对象的属性存储到这个对象的hash中去</p><h4 id="14、redis事务特性"><a href="#14、redis事务特性" class="headerlink" title="14、redis事务特性"></a>14、redis事务特性</h4><p>1、redis不支持回滚，而是继续执行余下的任务，因此事务没有原子性，但是事务中的命令是原子操作</p><p>2、如果某个事务中的命令错误，那么所有命令都不会执行，具有一致性</p><p>3、如果某个事务出现运行错误，那么正确的命令仍然会得到执行</p><p>4、由于redis同一时间只能执行一个事物，因此具有隔离性</p><h4 id="15、redis事务实现"><a href="#15、redis事务实现" class="headerlink" title="15、redis事务实现"></a>15、redis事务实现</h4><p>1、watch：相当于java中的cas是一个乐观锁机制，当一个事务开始执行，其他事务就不会执行</p><p>2、multi：用于开启一个事务，当multi执行后，redis继续接受消息，并将这些命令放入一个事务块队列</p><p>3、exec：执行事务队列中的命令</p><p>4、discard：清空事务队列，放弃执行事务，退出事务模式</p><h4 id="16、redis主从模式"><a href="#16、redis主从模式" class="headerlink" title="16、redis主从模式"></a>16、redis主从模式</h4><h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h5><p>将数据复制给从服务器，写命令发送给主服务器，读命令则发送给从服务器，从而实现读写分离</p><h5 id="同步策略"><a href="#同步策略" class="headerlink" title="同步策略"></a>同步策略</h5><p>主从刚刚连接时执行全量同步，全同步完成后执行增量同步</p><h5 id="同步过程"><a href="#同步过程" class="headerlink" title="同步过程"></a>同步过程</h5><p>1、从服务器连接主服务器，发送sync同步命令</p><p>2、主服务器接收到从服务的sync命令后，开始RDB持久化，并通过缓存区保存持久化期间写命令</p><p>3、主服务器完成RDB持久化后，向所有从服务器发送RDB快照文件，并继续保存期间写命令</p><p>4、从服务器受到RDB快照后，载入快照文件，并继续使用旧数据提供读服务</p><p>5、主服务器发送完快照文件后开始向从服务器发送缓冲区的写命令</p><p>6、从服务器完成对快照文件的载入后丢弃旧数据，并增量同步来自主服务器的写命令</p><p><strong>Tips</strong>：<em>具体搭建过程见项目实操部分</em></p><h4 id="17、redis哨兵模式"><a href="#17、redis哨兵模式" class="headerlink" title="17、redis哨兵模式"></a>17、redis哨兵模式</h4><h5 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h5><p>哨兵是一个独立的进程，也是一个redis服务器，但是并不提供数据服务，端口号默认为26379，而是<strong>监控</strong>提供数据服务的主从服务器，当发现主服务器宕机会自动的将从服务器切换成主服务器，并<strong>通知</strong>其他的从服务器，实现<strong>自动故障转移</strong></p><h5 id="详细工作"><a href="#详细工作" class="headerlink" title="详细工作"></a>详细工作</h5><p><strong>监测</strong>：第一个哨兵获取master状态后，会根据master的信息获取该master主机下的从服务器，接着第二个哨兵以同样的方式获取信息，并与第一个哨兵共享信息，并检测哨兵是否咋子先，依次类推</p><p><strong>自动故障转移</strong>：当一个哨兵认为master挂掉后，会通知其他哨兵，并将服务器状态设置为s_down。此时会触发哨兵投票机制，当半数以上的哨兵发现服务器挂了，会将master状态设置为o_down，并下线这个master，选取响应快的slave作为新的主节点并告知其他从服务器</p><p><strong>Tips</strong>：<em>具体搭建过程见项目实操部分</em></p><h4 id="18、集群cluster模式"><a href="#18、集群cluster模式" class="headerlink" title="18、集群cluster模式"></a>18、集群cluster模式</h4><h5 id="为什么采用分布式集群"><a href="#为什么采用分布式集群" class="headerlink" title="为什么采用分布式集群"></a>为什么采用分布式集群</h5><p>即使是哨兵模式，也是一种全量存储模式，每个redis服务器存储的都是完整的数据，浪费内存</p><p>分布式集群每个节点存储一定哈希槽区间的数据，通过哈希的方式，将数据分片到这些槽中，解决了哨兵模式下内存浪费的情况</p><h5 id="哈希槽具体方案"><a href="#哈希槽具体方案" class="headerlink" title="哈希槽具体方案"></a>哈希槽具体方案</h5><p>1、通过一个散列性良好哈希算法，将数据均匀的分散到16384个哈希槽中，至少需要3主3从</p><p>2、每个主从节点均匀分片存储一定哈希槽区间的数据</p><p>3、数据先写入该数据所在哈希槽的主节点，再同步到从节点</p><p>4、读取数据时，每个节点会将key指向正确的节点</p><p>5、每个节点之间通过16379端口通信</p><h5 id="节点间的内部通信"><a href="#节点间的内部通信" class="headerlink" title="节点间的内部通信"></a>节点间的内部通信</h5><p>节点间通过cluster bus来通信，基于gossip流言协议，就是节点间彼此不断交换信息，一段时间后每个节点都知道其他节点的详细信息，用以进行监测，自动故障转移</p><p>gossip协议：meet（加入），ping（发送信息），pong（回复信息），fail（下线消息）</p><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>哈希槽的存储是对服务器的数量取模，使得每个服务器均匀分片存储一定区间的哈希槽。这样的问题在于当服务器的数量发生改变的时候，数据的位置就会相应的发生改变，会导致缓存雪崩</p><h5 id="一致性哈希具体方案"><a href="#一致性哈希具体方案" class="headerlink" title="一致性哈希具体方案"></a>一致性哈希具体方案</h5><p>使用的哈希值对2的32次方进行取模，将整个哈希值空间组织成一个顺时针的虚拟的圆环，即0和2^32-1会在0点钟方向会和</p><p>根据各个服务器的ip或者主机名等关键字作一个哈希，确定在哈希环上的位置</p><p>再对数据key以同样的方式进行哈希，并确定数据在哈希环上的位置，从此位置沿顺时针行走，遇到的第一个服务器就是数据存储的服务器</p><p>当服务器数量发生变化时，只会影响存储在这个服务器上的数据，其他不受影响</p><h4 id="19、缓存雪崩"><a href="#19、缓存雪崩" class="headerlink" title="19、缓存雪崩"></a>19、缓存雪崩</h4><p>指缓存同一时间大面积的失效，请求直接落到数据库上，造成数据库短时间内承受大量请求而崩掉</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p><strong>事前</strong>：尽量保证redis服务的稳定，宕机尽快补上，这是防止缓存雪崩的根本，比如通过主从，哨兵，集群等方式。如果是因为短时间内大量key失效导致的缓存雪崩，则通过离散化失效时间来防止</p><p><strong>事中</strong>：通过hystrix限流保证不会有大量线程对数据库进行一次性读写，以及临时时间本地缓存对热点数据作二级缓存</p><p><strong>事后</strong>：如果发生了缓存雪崩，则利用redis持久化尽快恢复</p><h4 id="20、缓存穿透"><a href="#20、缓存穿透" class="headerlink" title="20、缓存穿透"></a>20、缓存穿透</h4><p>指缓存和数据库中都没有的数据，穿透了过去，导致所有的请求都落在数据库上，造成数据库短时间承受大量请求而崩掉</p><h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><p>提前做好<strong>参数校验</strong>，比如用户身份的鉴权，满足条件好再给予发送请求的权利，其次就是规定参数格式，拒绝不合法的参数</p><p>对于同一个key的反复攻击，设置<strong>key-null</strong>在缓存中存储，但对于key快速变化的意义不大</p><p><strong>布隆过滤器</strong>：由hash函数和位数组构成的一个可以快速查询数据是否存在或者一定不存在的过滤器，会拦截一个一定不存在的数据</p><h5 id="布隆过滤器原理"><a href="#布隆过滤器原理" class="headerlink" title="布隆过滤器原理"></a>布隆过滤器原理</h5><p>底层是一个bit数组，对于每个映射到过滤器中的值，都通过多个哈希函数生成多个哈希值，并将哈希值对应的位置都值为1.查询时，如果值对应的多个哈希函数的值位置都为1，则判断该值可能存在，反之如果有一个不为0则判断这个值一定不存在</p><h4 id="21、缓存击穿"><a href="#21、缓存击穿" class="headerlink" title="21、缓存击穿"></a>21、缓存击穿</h4><p>指缓存中没有，但数据库中由的数据。与缓存雪崩不同的是，缓存击穿是大量请求查询同一数据</p><h5 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h5><p>1、对热点数据设置长时间不过期</p><p>2、对于热点数据采用加锁的形式，比如semaphore等</p><p><strong>Tips</strong>：<em>具体搭建过程见项目实操部分</em></p><h4 id="22、缓存预热"><a href="#22、缓存预热" class="headerlink" title="22、缓存预热"></a>22、缓存预热</h4><p>系统上线后，将相关的热点数据直接加载进入缓存系统。用户就不用在第一次查询时，先走数据库而是直接查询缓存</p><h4 id="23、缓存降级"><a href="#23、缓存降级" class="headerlink" title="23、缓存降级"></a>23、缓存降级</h4><p>目的是为了防止redis发生的故障导致数据库跟着一起发生雪崩问题，是一种保护数据库的机制</p><p>比较常见的做法是redis出现问题，不去查询数据库而是直接返回默认值给用户</p><h4 id="24-redis分布式锁"><a href="#24-redis分布式锁" class="headerlink" title="24.redis分布式锁"></a>24.redis分布式锁</h4><h5 id="什么情况下使用分布式锁"><a href="#什么情况下使用分布式锁" class="headerlink" title="什么情况下使用分布式锁"></a>什么情况下使用分布式锁</h5><p>分布式架构下对数据有精确控制的情况，比如商品秒杀</p><h5 id="为什么不能用syncronized锁"><a href="#为什么不能用syncronized锁" class="headerlink" title="为什么不能用syncronized锁"></a>为什么不能用syncronized锁</h5><p>在分布式架构下，存在多个服务实例时，由于一个对应对应一个JVM，而syncronized是JVM级别的锁，因此可能会发生超卖的问题</p><h5 id="redis锁为什么可以用？"><a href="#redis锁为什么可以用？" class="headerlink" title="redis锁为什么可以用？"></a>redis锁为什么可以用？</h5><p>1、redis是单线程模型，采用一个队列将并发访问变成串行访问</p><p>2、基于redis的setnx命令，如果key存在不作任何操作，key不存在才可以添加，key可以设置成这个商品的名称</p><p>3、添加成功后获取锁，执行逻辑代码，最后删除key</p><h4 id="25、redis分布式锁基本实现发生的问题和可以优化的点"><a href="#25、redis分布式锁基本实现发生的问题和可以优化的点" class="headerlink" title="25、redis分布式锁基本实现发生的问题和可以优化的点"></a>25、redis分布式锁基本实现发生的问题和可以优化的点</h4><h5 id="1、死锁问题"><a href="#1、死锁问题" class="headerlink" title="1、死锁问题"></a>1、死锁问题</h5><p><strong>原因</strong>：获得锁后，执行代码逻辑过程遇到长时间等待等错误导致key无法删除而造成其他请求无法执行造成死锁，</p><p><strong>解决方法</strong>：是对key设置一个过期时间，并且用try catch包围加锁过程</p><h5 id="2、但是会造成新的问题–无法保证互斥性"><a href="#2、但是会造成新的问题–无法保证互斥性" class="headerlink" title="2、但是会造成新的问题–无法保证互斥性"></a>2、但是会造成新的问题–<strong>无法保证互斥性</strong></h5><p><strong>原因</strong>：已经超过key的过期时间，key已经被删除了，但是上一个逻辑代码由于某一些原因还没有执行结束，这时便存在多个进程操作一个资源，是去了互斥性</p><p><strong>解决方案</strong>：通过redisson提供的加锁机制，每隔1/3时间检查是否还持有锁，如果持有就延长锁的时间，保证了互斥性</p><h5 id="3、又会回到死锁的问题（自己乱猜的，问到再说）"><a href="#3、又会回到死锁的问题（自己乱猜的，问到再说）" class="headerlink" title="3、又会回到死锁的问题（自己乱猜的，问到再说）"></a>3、又会回到<strong>死锁</strong>的问题（自己乱猜的，问到再说）</h5><p><strong>原因</strong>：即一个进程一直持有这把锁，不释放。</p><p><strong>解决方案</strong>：那么就需要一个控制逻辑执行时间的事务，这个时间要略微小于key过期的时间，时间允许范围内，如果逻辑没有执行完毕那么就回滚并结束进程。</p><h4 id="26、主从架构下的redis分布式锁"><a href="#26、主从架构下的redis分布式锁" class="headerlink" title="26、主从架构下的redis分布式锁"></a>26、主从架构下的redis分布式锁</h4><h5 id="1、单点局限性"><a href="#1、单点局限性" class="headerlink" title="1、单点局限性"></a>1、单点局限性</h5><p><strong>原因</strong>：在单点模式下，如果这个redis实例挂了，那么整个服务就挂了</p><p><strong>解决方案</strong>：搭建主从模式，这样的话即使一个redis宕机了，其他也能提供服务</p><h5 id="2、锁丢失的情况"><a href="#2、锁丢失的情况" class="headerlink" title="2、锁丢失的情况"></a>2、锁丢失的情况</h5><p><strong>原因</strong>：在主节点向从节点写入lock key的过程中，如果恰好此刻主节点宕机，并且lock key还没有写入新主节点，那么就会使得其他进程仍然可以获得该锁</p><p><strong>解决方案</strong>：redlock方案</p><h4 id="27、基于reddison的redLock实现分布式锁"><a href="#27、基于reddison的redLock实现分布式锁" class="headerlink" title="27、基于reddison的redLock实现分布式锁"></a>27、基于reddison的redLock实现分布式锁</h4><p>抛弃主从模式，直接使用多个master，相互独立，这样就保证了在master宕机的情况下，不会出现从服务器数据丢失的情况</p><h5 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h5><p>1、设置两个时间，一个是锁失效时间。一个是请求超时时间这个时间要远小于超时时间，防止长时间等待redis服务器响应</p><p>2、依次尝试从n个实例，使用相同的key和value获取锁，当且仅当超过半数的锁获取成功，且时间小于锁失效的时间，锁才算获取成功</p><p>3、如果获取失败，则应该在已经添加了锁的服务器上解锁</p><p><strong>Tips</strong>：<em>具体搭建过程见项目实操部分</em></p><h4 id="28、缓存是数据库双写一致性的问题"><a href="#28、缓存是数据库双写一致性的问题" class="headerlink" title="28、缓存是数据库双写一致性的问题"></a>28、缓存是数据库双写一致性的问题</h4><p>1、如果一定要做到一致性，那么可以采用串行化的方式，但是开销太大，性能大幅降低</p><p>2、如果允许暂时不一致的情况，则遵循先写数据库的原则，因为如果缓存写入成功，而数据库没有写成功，那么之后高并发的读取都是错误的数据</p><p>3、正确的做法是先写入数据库，再将缓存中的key设置为无效，数据库修改成功后再返回来修改缓存，这样的话。最多在写入数据库时缓存短暂失效，但写回后即可重新生效。而不会发生误读的情况</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;秋招复习redis之28问&quot;&gt;&lt;a href=&quot;#秋招复习redis之28问&quot; class=&quot;headerlink&quot; title=&quot;秋招复习redis之28问&quot;&gt;&lt;/a&gt;秋招复习redis之28问&lt;/h2&gt;&lt;h4 id=&quot;1、为什么要用redis-缓存&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="redis" scheme="https://xulilei.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>mysql之底层原理</title>
    <link href="https://xulilei.github.io/2020/07/18/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0mysql%E4%B9%8B%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <id>https://xulilei.github.io/2020/07/18/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0mysql%E4%B9%8B%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</id>
    <published>2020-07-18T05:41:17.000Z</published>
    <updated>2020-09-11T07:57:02.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秋招复习mysql之底层原理"><a href="#秋招复习mysql之底层原理" class="headerlink" title="秋招复习mysql之底层原理"></a>秋招复习mysql之底层原理</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="数据库三大范式"><a href="#数据库三大范式" class="headerlink" title="数据库三大范式"></a>数据库三大范式</h4><p>1、每个列都不可以再拆分</p><p>2、在第一范式的基础上，非主键列完全依赖于主键列，而不是依赖主键列的一部分</p><p>3、在第二范式的基础上，非主键列只依赖与主键列，不依赖于其他主键列、</p><h4 id="Binlog"><a href="#Binlog" class="headerlink" title="Binlog"></a>Binlog</h4><p>是mysql数据库的二进制日志，用来保存数据库除了查询之外的记录，通过mysqlbinlog查看</p><h5 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h5><p>statement：每一条会修改数据的sql都会记录在binlog中。不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能，但是无法记录一些函数比如sleep之类，可能会导致问题</p><p>row：基于行的复制(row-based replication, RBR)：不记录每一条SQL语句的上下文信息，仅需记录哪条数据被修改了，修改成了什么样子了。</p><p>mixed：用statement记录，记录不了的使用row</p><h4 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h4><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p>支持事务和行级锁，外键，采用密集索引，支持mvcc</p><p><strong>密集索引</strong>：密集索引的data域存储了完整的数据记录包括相邻叶子节点的信息，决定了叶子节点的物理排列顺序，因此一个表只能创建一个密集索引，辅助索引则存储了对应的主键，具体过程为：在根据主键索引搜索时，直接找到索引所在的节点即可取出数据，在根据辅助索引查找时，先取出主键索引的值，再走一遍主键索引</p><h5 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h5><p>插入缓冲：每次插入数据时，先判断要插入的数据页是否在缓存中，如果在则直接插入，否则先放入一段buffer缓冲区，再插入</p><p>预读：根据请求，预先读取一部分数据在缓冲区中</p><p>自适应哈希：对于热点数据，则对二级索引页自动建立hash索引方便下次读取</p><p>二次写：为了防止数据库在数据写入磁盘奔溃导致本次数据丢失的情况</p><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><p>不支持事务和行级锁，只支持表级锁，采用稀疏索引，不支持外键，不支持MVCC，强调性能</p><p><strong>稀疏索引</strong>：稀疏索引的data域只存储了主键和数据地址等部分信息，具体过程过程为：根据索引取出data域的数据保存的地址，再根据地址读取相应的数据</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h4><h5 id="什么是索引？"><a href="#什么是索引？" class="headerlink" title="什么是索引？"></a>什么是索引？</h5><p>索引是一种数据结构，以协助快速查询，更新数据库中的数据，更通俗的说，索引就相当于多级目录</p><h5 id="为什么要使用索引"><a href="#为什么要使用索引" class="headerlink" title="为什么要使用索引"></a>为什么要使用索引</h5><p>避免全表扫描，提升查询效率</p><h4 id="索引的数据结构有哪些"><a href="#索引的数据结构有哪些" class="headerlink" title="索引的数据结构有哪些"></a>索引的数据结构有哪些</h4><p>B+Tree索引，hash索引</p><h4 id="hash索引的缺点"><a href="#hash索引的缺点" class="headerlink" title="hash索引的缺点"></a>hash索引的缺点</h4><p>1、仅能满足“=”，“in”  不能使用范围查询</p><p>2、不能避免全表扫描</p><p>3、当哈希值大量相同时，效率会退化</p><h4 id="为什么使用B-树作为索引"><a href="#为什么使用B-树作为索引" class="headerlink" title="为什么使用B+树作为索引"></a>为什么使用B+树作为索引</h4><h5 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h5><p>左子树的值小于根的值，右子树的值大于根的值，这种会遇到退化成链表的情况，时间复杂度由O（logN）变为O（n）</p><h5 id="二叉平衡树"><a href="#二叉平衡树" class="headerlink" title="二叉平衡树"></a>二叉平衡树</h5><p>满足二叉查找树的条件，且任何节点的左右子树的高度差最大为1，控制时间复杂度为O（logN），但是其添加删除数据的操作会频繁的涉及到左旋右旋，因此也不适合作为索引</p><h5 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h5><p>红黑树在二叉搜索树的基础上又对增删的进行了改进，使得不用频繁旋转，但是由于每个节点只能存储一个数据，因此随着数据增多，树的深度会很深，查找数据经历的IO次数会太多</p><h5 id="B-tree"><a href="#B-tree" class="headerlink" title="B-tree"></a>B-tree</h5><p>InnoDB是以页为存储单位读取数据的，每个页都有索引有助于快速定位数据的位置，虽然每个节点可以存储多份数据，但B-tree每个节点都包含data值，与B+Tree相同索引空间下，会导致页存储的索引数量受限，会造成树的深度过深，查找到最终数据经历的I/O次数太多，并且数据的删除与添加也很不便</p><h5 id="B-tree-1"><a href="#B-tree-1" class="headerlink" title="B+tree"></a>B+tree</h5><p>是B-tree的一种优化，相较于B-tree，B+tree主要有以下几点不同：</p><p>1、非叶子节点只存储定位索引的信息，相当于操作系统中的多级页表。带来的好处是非叶子节点存储更多的索引定位信息，大大降低树的高度，减少磁盘IO的次数</p><p>2、所有数据都存储在叶子节点上，且叶子节点之间存在链指针。带来的好处是据的增删效率也大大增加</p><h4 id="索引种类"><a href="#索引种类" class="headerlink" title="索引种类"></a>索引种类</h4><h5 id="种类分为主键索引、唯一索引、普通索引、联合索引"><a href="#种类分为主键索引、唯一索引、普通索引、联合索引" class="headerlink" title="种类分为主键索引、唯一索引、普通索引、联合索引"></a>种类分为主键索引、唯一索引、普通索引、<strong>联合索引</strong></h5><p><strong>主键索引</strong>: 数据列不允许重复，不允许为NULL，一个表只能有一个主键。</p><p><strong>唯一索引</strong>: 数据列不允许重复，允许为NULL值，一个表允许多个列创建唯一索引。</p><p><strong>普通索引</strong>: 基本的索引类型，没有唯一性的限制，允许为NULL值。</p><p><strong>联合索引</strong>：联合索引是指对表上的多个列进行索引，顺序不同索引不同，根据联合索引树找到主键值，再从主键树上查找数据</p><h4 id="索引的使用场景"><a href="#索引的使用场景" class="headerlink" title="索引的使用场景"></a>索引的使用场景</h4><h5 id="where"><a href="#where" class="headerlink" title="where"></a>where</h5><h5 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h5><p>如果不添加索引，会将查询出的所有数据使用外部排序（将数据从硬盘分批读取到内存使用内部排序，最后合并排序结果），而添加索引后，由于索引本身就是有序的，可以直接根据索引映射关系读出数据</p><h5 id="join语句匹配关系（on）涉及的字段"><a href="#join语句匹配关系（on）涉及的字段" class="headerlink" title="join语句匹配关系（on）涉及的字段"></a>join语句匹配关系（on）涉及的字段</h5><h5 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h5><h4 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h4><p>命中索引时一直向左匹配直到遇到范围查询，范围查询后面的索引失效，如果前面的索引没有命中，那么后面的索引是无效的</p><p>因此在联合索引中将选择性最高的列放在索引最前面，依次降低</p><h5 id="索引命中规则"><a href="#索引命中规则" class="headerlink" title="索引命中规则"></a>索引命中规则</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">索引命中规则详解： </span><br><span class="line">t这张表 a,b,c 三个字段组成组合索引</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> a=? <span class="keyword">and</span> b=? <span class="keyword">and</span> c=?  全命中</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> c=? <span class="keyword">and</span> b=? <span class="keyword">and</span> a=?  全命中 解析MySQL的查询优化器会自动调整<span class="keyword">where</span>子句的条件顺序以使用适合的索引</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> a=?  命中a  解析:最左前缀匹配</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> a=? <span class="keyword">and</span> b=?  命中a和b  解析:最左前缀匹配</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> a=? <span class="keyword">or</span> b=?  一个没命中 解析<span class="keyword">or</span>无法命中</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> a=? <span class="keyword">and</span> c=?  命中a 解析:最左前缀匹配，中间没有则无法使用索引 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> a=? <span class="keyword">and</span> b <span class="keyword">in</span> ( x, y, z) <span class="keyword">and</span> c=?  全部命中 <span class="keyword">in</span>精确匹配可以使用索引 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> b=?  一个没命中  解析:最左前缀匹配原则 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> b=? <span class="keyword">and</span> c=?  一个没命中  解析:最左前缀匹配原则 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> a=? <span class="keyword">and</span> b <span class="keyword">like</span> <span class="string">'xxx%'</span>   命中a </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> a=? <span class="keyword">and</span> b <span class="keyword">like</span> <span class="string">'%xxx'</span>  命中a和b </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> a&lt;? <span class="keyword">and</span> b=?   命中a 解析这个是范围查找 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> a <span class="keyword">between</span> ? <span class="keyword">and</span> ?  <span class="keyword">and</span> b=?  命中a和b 解析<span class="keyword">BETWEEN</span>相当于<span class="keyword">in</span>操作是精确匹配 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> a <span class="keyword">between</span> ? <span class="keyword">and</span> ?  <span class="keyword">and</span> b=? <span class="keyword">and</span> c  <span class="keyword">and</span> <span class="keyword">between</span> ? <span class="keyword">and</span> ?    全部命解析中同上 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">where</span> a<span class="number">-1</span>=?   函数和表达式无法命中索引</span><br></pre></td></tr></table></figure><h5 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h5><p>尽可能的通过索引规则，使得索引覆盖的字段更多</p><h4 id="创建索引的原则"><a href="#创建索引的原则" class="headerlink" title="创建索引的原则"></a>创建索引的原则</h4><p>1、只在需要索引的字段建立索引，比如where条件查询，join on字段，orderby字段等</p><p>2、最左前缀原则，尽量使索引覆盖字段最多</p><p>3、重复值多的，null值多的字段不适合做索引</p><p>4、尽量扩展索引，而不添加索引，比如原先有字段A有索引，现在想要（A,B）组合索引，那么修改原来的A索引，而不是去新建一个A,B索引</p><p>5、外键一定要建索引，因为如果外键不建索引，那么关联子表查询时，会对子表进行全表扫描</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="四大特性-1"><a href="#四大特性-1" class="headerlink" title="四大特性"></a>四大特性</h4><p>原子性：不可分割的操作，要么成功要么失败</p><p>隔离性：操作间不能相互影响</p><p>一致性：从某种一致性的状态转换到另一个一致性的状态</p><p>持久性：永久保存</p><p>事务：保证原子性、一致性、隔离性、持久性的数据操作称为一个事务</p><h4 id="隔离性导致的问题"><a href="#隔离性导致的问题" class="headerlink" title="隔离性导致的问题"></a>隔离性导致的问题</h4><p>脏读：一个事务读到了另一个事务没有提交的操作</p><p>不可重复读：同一个事务两次读取的数据不一样</p><p>幻读：一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有看到的数据行</p><table><thead><tr><th>隔离性</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td>会发生</td><td>会发生</td><td>会发生</td></tr><tr><td>读已提交</td><td>不会发生</td><td>会发生</td><td>会发生</td></tr><tr><td>可重复度</td><td>不会发生</td><td>不会发生</td><td>mysql下不会发生</td></tr><tr><td>串行化</td><td>不会发生</td><td>不会发生</td><td>不会发生</td></tr></tbody></table><h4 id="MVCC多版本并发控制"><a href="#MVCC多版本并发控制" class="headerlink" title="MVCC多版本并发控制"></a>MVCC多版本并发控制</h4><p>InnoDB行格式除了保存数据和其他字段外，还保存了三个字段。第一个是row_id，其次是trx_id，指的是数据改动的版本，还有一个point_id用于事务间的回滚，这样就形成了一个数据的版本链</p><p>InnoDB控制并发操作，用的就是MVCC和锁相结合的方式，相较于单一锁机制，该种机制可以提升系统性能</p><h4 id="read-view"><a href="#read-view" class="headerlink" title="read view"></a>read view</h4><p>readView是MVCC多版本并发控制的一个实现手段，就是在事务开启的时候创建一个事务列表集合，在不同的隔离级别下，看到的事务列表集合可能也不同</p><h4 id="读已提交隔离级别使用MVCC避免脏读原理"><a href="#读已提交隔离级别使用MVCC避免脏读原理" class="headerlink" title="读已提交隔离级别使用MVCC避免脏读原理"></a>读已提交隔离级别使用MVCC避免脏读原理</h4><p>在这种隔离级别下，readview事务列表集合存储的是仍处于活跃状态的事务，即未提交的失误，每当事务提交，则重新生成。读取数据时，会从当前最新的版本开始，按照版本链的顺序，根据readview事务列表，找到最近的不活跃的版本中的数据。如此一来，就避免了读取到未提交事务的操作</p><h4 id="可重复度隔离级别使用MVCC避免不可重复读原理"><a href="#可重复度隔离级别使用MVCC避免不可重复读原理" class="headerlink" title="可重复度隔离级别使用MVCC避免不可重复读原理"></a>可重复度隔离级别使用MVCC避免不可重复读原理</h4><p>在RR隔离级别下，readview用来保存这个事务启动瞬间，当前正在“活跃”的所有事务ID。但是之后，这个事务执行期间，其他事务的更新（数据版本）对它不可见。当查询数据时，会按照启动时的版本链找到最近的不活跃的版本数据</p><h3 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h3><h4 id="按操作数据类型来分"><a href="#按操作数据类型来分" class="headerlink" title="按操作数据类型来分"></a>按操作数据类型来分</h4><h5 id="S锁"><a href="#S锁" class="headerlink" title="S锁"></a>S锁</h5><p>读锁：只给读不给写，称共享锁、S锁</p><p>select … in share mode：将查找的数据加一个S锁，允许其他事务继续获得该记录的S锁，不能获取X锁</p><p>场景：读取数据时，其他事务不能修改，自己也不一定能修改，因为其他事务可能也加了读锁</p><h5 id="X锁"><a href="#X锁" class="headerlink" title="X锁"></a>X锁</h5><p>写锁：不给其他事务读，也不给写，线程阻塞，称排它锁、X锁</p><p>select … for update：将查找的数据加一个X锁，不允许其他事务获得该记录的S锁、X锁，不能获取X锁</p><p>场景：当前事务可以读写，其他事物不能读写，update、delete、insert都会默认加写锁</p><h4 id="按锁的粒度划分"><a href="#按锁的粒度划分" class="headerlink" title="按锁的粒度划分"></a>按锁的粒度划分</h4><h5 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h5><p>访问数据库的时候，锁定整个行数据，防止并发错误。 InnoDB存储引擎默认使用行锁</p><p>特点是：并发度高，开销高，粒度最细</p><h5 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h5><p>访问数据库的时候，锁定整个表数据，防止并发错误。 MyISAM存储引擎使用表锁</p><p>特点是：并发低，开销低，粒度大</p><h5 id="gap锁"><a href="#gap锁" class="headerlink" title="gap锁"></a>gap锁</h5><p>介于二者中间的一种锁，只锁定一段范围内的数据</p><h5 id="表锁和行锁时机"><a href="#表锁和行锁时机" class="headerlink" title="表锁和行锁时机"></a>表锁和行锁时机</h5><p>行级锁都是基于索引的，如果一条SQL语句用不到索引则会使用表级锁</p><h4 id="按上锁的行为划分"><a href="#按上锁的行为划分" class="headerlink" title="按上锁的行为划分"></a>按上锁的行为划分</h4><h5 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h5><p>每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁</p><h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><p>每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制</p><h4 id="快照读和当前读"><a href="#快照读和当前读" class="headerlink" title="快照读和当前读"></a>快照读和当前读</h4><p>快照读：简单的select操作，属于快照读，不加锁。select * from table where ?</p><p>当前读：s锁，X锁，insert/delete/update等操作，加锁</p><h4 id="RR级别下解决幻读的原理"><a href="#RR级别下解决幻读的原理" class="headerlink" title="RR级别下解决幻读的原理"></a>RR级别下解决幻读的原理</h4><h5 id="在快照读读情况下，mysql通过mvcc来避免幻读"><a href="#在快照读读情况下，mysql通过mvcc来避免幻读" class="headerlink" title="在快照读读情况下，mysql通过mvcc来避免幻读"></a>在快照读读情况下，mysql通过mvcc来避免幻读</h5><p>在RR隔离级别下，readview用来保存这个事务启动瞬间，当前正在“活跃”的所有事务ID。但是之后，这个事务执行期间，其他事务的更新（数据版本）对它不可见。当查询数据时，会按照启动时的MVCC版本链找到最近的不活跃的版本数据。</p><h5 id="在当前读读情况下，mysql通过next-key来避免幻读"><a href="#在当前读读情况下，mysql通过next-key来避免幻读" class="headerlink" title="在当前读读情况下，mysql通过next-key来避免幻读"></a>在当前读读情况下，mysql通过next-key来避免幻读</h5><p>record lock：单个行记录上的锁</p><p>Gap lock：间隙锁，锁定一个范围，不包括记录本身</p><p>next-key lock：行锁(record lock)+间隙锁(gap lock)，锁定一个范围，包含记录本身</p><p>1、当查询语句包含唯一属性时且全部命中时，此时的next-key锁会降级成行锁，是由于其他事务的操作不会对本次查询造成影响</p><p>2、其他情况会添加next-key锁，锁住包含当前记录的一个范围，这样其他事务就无法在这个范围内添加数据</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="什么是视图？视图的作用优点？"><a href="#什么是视图？视图的作用优点？" class="headerlink" title="什么是视图？视图的作用优点？"></a>什么是视图？视图的作用优点？</h4><p>视图本质上是一种虚拟表，在物理上是不存在的，其内容来源于sql语句查询时引用的基本表，因此视图具有逻辑独立性</p><p>提高复杂sql语句的复用性，查出后可以存储方便下次查询时就不用再次编写复杂语句</p><p>由于视图只含有查询出的特定数据，而没有来源表中的其他数据，因此提高了数据的安全性</p><h4 id="修改视图？"><a href="#修改视图？" class="headerlink" title="修改视图？"></a>修改视图？</h4><p>由于视图来源于基本表，因此修改视图时必须转化为对基本表的某些行的修改</p><h3 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h3><h4 id="数据库发生死锁如何解决？"><a href="#数据库发生死锁如何解决？" class="headerlink" title="数据库发生死锁如何解决？"></a>数据库发生死锁如何解决？</h4><p>死锁是两个或多个事务在同一资源上相互占用， 并等待对方释放锁的现象</p><p>1、如果多个项目读取同一个表，尽量约定同一顺序读取</p><p>2、如果该表死锁发生频繁可以升级锁粒度</p><p>3、同一个事务一次锁定所有需要的资源，但是会导致并发降低</p><h3 id="数据库优化-1"><a href="#数据库优化-1" class="headerlink" title="数据库优化"></a>数据库优化</h3><h4 id="如何定位并优化慢查询"><a href="#如何定位并优化慢查询" class="headerlink" title="如何定位并优化慢查询"></a>如何定位并优化慢查询</h4><p>1、根据慢日志定位到慢查询sql</p><p>2、使用explain工具分析sql，字段type：，all表示走的全表</p><p>3、修改sql，或者让sql尽量走更多的索引，range表示走索引是优化的目标</p><h5 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h5><table><thead><tr><th>TYPE</th><th>类型</th></tr></thead><tbody><tr><td>ALL</td><td>全表扫描</td></tr><tr><td>index</td><td>走索引树的全表扫描</td></tr><tr><td>range</td><td>扫描部分索引，开始于索引的某一个点，结束另一个点</td></tr><tr><td>ref</td><td>使用非唯一索引或非唯一索引前缀进行的查找</td></tr><tr><td>const</td><td>使用=比较主键索引或者唯一索引</td></tr></tbody></table><h4 id="大表优化"><a href="#大表优化" class="headerlink" title="大表优化"></a>大表优化</h4><p>当mysql单表记录数过大时，数据库的crud性能会明显下降</p><h5 id="1、限定数据查询范围"><a href="#1、限定数据查询范围" class="headerlink" title="1、限定数据查询范围"></a>1、限定数据查询范围</h5><p>禁止不带任何限制条件的查询</p><h5 id="2、主从复制、读-写分离（分库）"><a href="#2、主从复制、读-写分离（分库）" class="headerlink" title="2、主从复制、读/写分离（分库）"></a>2、主从复制、读/写分离（分库）</h5><p>Mysql的主从复制和mysql的读写分离两者有紧密的联系，首先要部署主从复制，只有主从复制完成了，才能再此基础上进行数据的读写分离</p><p>主库负责写，从库负责读</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200719162517.png" alt=""></p><h5 id="3、垂直水平分表"><a href="#3、垂直水平分表" class="headerlink" title="3、垂直水平分表"></a>3、垂直水平分表</h5><p>垂直分表：即根据数据的相关性，将多列的表拆分成少列多张表</p><ul><li><p>优点：列数据变小，减小IO次数，简化表结构，易于维护</p></li><li><p>缺点：会出现数据冗余，并且会出现JOIN操作，导致事务变得复杂</p></li></ul><p>水平分表：保持数据结构不变，将存储数据分片，再存储到不同的表或库中</p><ul><li>优点：支持非常大数据的存储，且应用端改造少</li><li>缺点：拆分会给服务端带来逻辑，部署，运维的各种难度，因此不建议对数据进行分片</li></ul><h5 id="分库分表后，id主键如何处理"><a href="#分库分表后，id主键如何处理" class="headerlink" title="分库分表后，id主键如何处理"></a>分库分表后，id主键如何处理</h5><p>分成多个表后，不应让每个表的id从1开始累加，而应该控制全局唯一ID支持</p><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><p>sql注入，简单来说就是用户在前端web页面输入恶意的sql语句用来欺骗后端服务器去执行恶意的sql代码，从而导致数据库数据泄露或者遭受攻击。 </p><h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5><p>java防SQL注入,最简单的办法是杜绝SQL拼接,SQL注入攻击能得逞是因为在原有SQL语句中加入了新的逻辑</p><p>如果使用PreparedStatement来代替Statement来执行SQL语句，其后只是输入参数，SQL注入攻击手段将无效</p><p>在WEB层我们可以过滤用户的输入来防止SQL注入比如用Filter来过滤全局的表单参数 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;秋招复习mysql之底层原理&quot;&gt;&lt;a href=&quot;#秋招复习mysql之底层原理&quot; class=&quot;headerlink&quot; title=&quot;秋招复习mysql之底层原理&quot;&gt;&lt;/a&gt;秋招复习mysql之底层原理&lt;/h2&gt;&lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="mysql" scheme="https://xulilei.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql之sql语句</title>
    <link href="https://xulilei.github.io/2020/07/17/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0mysql%E4%B9%8Bsql%E8%AF%AD%E5%8F%A5/"/>
    <id>https://xulilei.github.io/2020/07/17/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0mysql%E4%B9%8Bsql%E8%AF%AD%E5%8F%A5/</id>
    <published>2020-07-17T10:58:31.000Z</published>
    <updated>2020-08-12T14:52:42.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秋招复习mysql之sql语句"><a href="#秋招复习mysql之sql语句" class="headerlink" title="秋招复习mysql之sql语句"></a>秋招复习mysql之sql语句</h2><h3 id="基础语句"><a href="#基础语句" class="headerlink" title="基础语句"></a>基础语句</h3><h4 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a>SELECT 语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名称</span><br><span class="line">例子:</span><br><span class="line"><span class="keyword">SELECT</span> LastName,FirstName <span class="keyword">FROM</span> Persons</span><br></pre></td></tr></table></figure><h5 id="WHERE条件限定"><a href="#WHERE条件限定" class="headerlink" title="WHERE条件限定"></a>WHERE条件限定</h5><p>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列 运算符 值</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> City=<span class="string">'Beijing'</span></span><br><span class="line">表中选取居住在不包含 <span class="string">"lon"</span> 的城市里的人：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> City <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'%lon%'</span></span><br></pre></td></tr></table></figure><h6 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h6><table><thead><tr><th align="center">操作符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">等于</td></tr><tr><td align="center">!=</td><td align="center">不等于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">BETWEEN</td><td align="center">在某个范围内</td></tr><tr><td align="center">LIKE</td><td align="center">搜索某种模式</td></tr></tbody></table><h6 id="IN-操作符"><a href="#IN-操作符" class="headerlink" title="IN 操作符"></a>IN 操作符</h6><p>IN 操作符允许我们在 WHERE 子句中规定多个值</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">从Persons表中选取姓氏为 Adams 和 Carter 的人：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> LastName <span class="keyword">IN</span> (<span class="string">'Adams'</span>,<span class="string">'Carter'</span>)</span><br><span class="line">等同于</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> LastName =<span class="string">'Adams'</span> <span class="keyword">or</span> LastName =<span class="string">'Carter'</span></span><br></pre></td></tr></table></figure><h6 id="BETWEEN-操作符"><a href="#BETWEEN-操作符" class="headerlink" title="BETWEEN 操作符"></a>BETWEEN 操作符</h6><p>操作符 BETWEEN … AND… （左闭右开）会选取介于两个值之间的数据范围。这些值可以是数值、文本或者日期。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">以字母顺序显示介于 "Adams"（包括）和 "Carter"（不包括）之间的人，请使用下面的 SQL：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> LastName <span class="keyword">BETWEEN</span> <span class="string">'Adams'</span> <span class="keyword">AND</span> <span class="string">'Carter'</span></span><br></pre></td></tr></table></figure><h5 id="limit-offset分页查询"><a href="#limit-offset分页查询" class="headerlink" title="limit offset分页查询"></a>limit offset分页查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">表示读取前三条数据</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> article <span class="keyword">limit</span> <span class="number">3</span></span><br><span class="line">从<span class="number">1</span>+<span class="number">1</span>=<span class="number">2</span>开始读<span class="number">3</span>条，就是跳过<span class="number">1</span>条数据后读取<span class="number">3</span>条数据</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> article <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">offset</span>代表跳过几条，<span class="keyword">limit</span>代表读取几条</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> article <span class="keyword">limit</span> <span class="number">3</span> <span class="keyword">offset</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="TOP语句"><a href="#TOP语句" class="headerlink" title="TOP语句"></a>TOP语句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">现在，我们希望从上面的 "Persons" 表中选取头两条记录</span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">2</span> * <span class="keyword">FROM</span> Persons</span><br><span class="line">现在，我们希望从上面的 <span class="string">"Persons"</span> 表中选取 <span class="number">50</span>% 的记录</span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">50</span> <span class="keyword">PERCENT</span> * <span class="keyword">FROM</span> Persons</span><br></pre></td></tr></table></figure><h5 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">关键词 DISTINCT 用于返回唯一不同的值。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 列名称 <span class="keyword">FROM</span> 表名称</span><br></pre></td></tr></table></figure><h5 id="AND-和-OR-运算符"><a href="#AND-和-OR-运算符" class="headerlink" title="AND 和 OR 运算符"></a>AND 和 OR 运算符</h5><p>AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来</p><p>如果第一个条件和第二个条件都成立，则AND位true</p><p>如果第一个条件和第二个条件中只要有一个成立，则OR为true</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">使用 AND 来显示所有姓为 "Carter" 并且名为 "Thomas" 的人：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName=<span class="string">'Thomas'</span> <span class="keyword">AND</span> LastName=<span class="string">'Carter'</span></span><br><span class="line">使用 <span class="keyword">OR</span> 来显示所有姓为 <span class="string">"Carter"</span> 或者名为 <span class="string">"Thomas"</span> 的人：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> firstname=<span class="string">'Thomas'</span> <span class="keyword">OR</span> lastname=<span class="string">'Carter'</span></span><br></pre></td></tr></table></figure><h5 id="ORDER-BY-语句"><a href="#ORDER-BY-语句" class="headerlink" title="ORDER BY 语句"></a>ORDER BY 语句</h5><p>ORDER BY 语句用于根据指定的列对结果集进行排序。</p><p>ORDER BY 语句默认按照升序对记录进行排序，如果望按照降序对记录进行排序，可以使用 DESC 关键字。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">以逆字母顺序显示公司名称，在公司名称相同的情况下以数字顺序显示顺序号：</span><br><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span>, OrderNumber <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h4 id="INSERT-INTO语句"><a href="#INSERT-INTO语句" class="headerlink" title="INSERT INTO语句"></a>INSERT INTO语句</h4><p>INSERT INTO 语句用于向表格中插入新的行。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名称 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>,....)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons <span class="keyword">VALUES</span> (<span class="string">'Gates'</span>, <span class="string">'Bill'</span>, <span class="string">'Xuanwumen 10'</span>, <span class="string">'Beijing'</span>)</span><br><span class="line">也可以指定所要插入数据的列：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (列<span class="number">1</span>, 列<span class="number">2</span>,...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>,....)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons (LastName, Address) <span class="keyword">VALUES</span> (<span class="string">'Wilson'</span>, <span class="string">'Champs-Elysees'</span>)</span><br></pre></td></tr></table></figure><p>INSERT INTO 语句从一个表中选取数据，然后把数据插入另一个表中</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">将<span class="keyword">select</span>查询的数据插入已存在的表orderinfo，当表不存在时，通过将<span class="keyword">insert</span> <span class="keyword">into</span>改为<span class="keyword">create</span> <span class="keyword">table</span> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> orderinfo</span><br><span class="line"><span class="keyword">SELECT</span> p.username,o.orderNo</span><br><span class="line"><span class="keyword">FROM</span> persons <span class="keyword">as</span> p</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders <span class="keyword">as</span> o</span><br><span class="line"><span class="keyword">on</span> p.id_p=o.id_p</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="Update-语句"><a href="#Update-语句" class="headerlink" title="Update 语句"></a>Update 语句</h4><p>Update 语句用于修改表中的数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">UPDATE</span> 表名称 <span class="keyword">SET</span> 列名称 = 新值 <span class="keyword">WHERE</span> 列名称 = 某值</span><br><span class="line">修改地址address，城市名称city当LastName为Wilson</span><br><span class="line"><span class="keyword">UPDATE</span> Person </span><br><span class="line"><span class="keyword">SET</span> Address = <span class="string">'Zhongshan 23'</span>, City = <span class="string">'Nanjing'</span> </span><br><span class="line"><span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span></span><br></pre></td></tr></table></figure><h4 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h4><p>DELETE 语句用于删除表中的行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"Fred Wilson" 会被删除：</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Person <span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span> </span><br><span class="line">可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的：</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line">或者：</span><br><span class="line"><span class="keyword">DELETE</span> * <span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure><h3 id="高级语句"><a href="#高级语句" class="headerlink" title="高级语句"></a>高级语句</h3><h4 id="CREATE-TABLE"><a href="#CREATE-TABLE" class="headerlink" title="CREATE TABLE"></a>CREATE TABLE</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">列名称 数据类型</span><br><span class="line">Id_P <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>数据类型（data_type）规定了列可容纳何种数据类型。下面的表格包含了SQL中最常用的数据类型：</p><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">integer(size)、int(size)、smallint(size)、 tinyint(size)</td><td align="left">仅容纳整数。在括号内规定数字的最大位数。</td></tr><tr><td align="left">decimal(size,d) 、numeric(size,d)</td><td align="left">容纳带有小数的数字。”size” 规定数字的最大位数。”d” 规定小数点右侧的最大位数。</td></tr><tr><td align="left">char(size)</td><td align="left">容纳固定长度的字符串（可容纳字母、数字以及特殊字符）。在括号中规定字符串的长度。</td></tr><tr><td align="left">varchar(size)</td><td align="left">容纳可变长度的字符串（可容纳字母、数字以及特殊的字符）。在括号中规定字符串的最大长度。</td></tr><tr><td align="left">date(yyyymmdd)</td><td align="left">容纳日期。</td></tr></tbody></table><h5 id="SQL-约束"><a href="#SQL-约束" class="headerlink" title="SQL 约束"></a>SQL 约束</h5><p>约束用于限制加入表的数据的类型。</p><p>可以在创建表时规定约束（通过 CREATE TABLE 语句），或者在表创建之后也可以（通过 ALTER TABLE 语句）。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(Id_P <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>)</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">add</span> PRIMARY <span class="keyword">KEY</span>(id_p)</span><br><span class="line"><span class="keyword">drop</span> PRIMARY <span class="keyword">KEY</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">添加外键，要指明指向的是哪个表的逐渐</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orders</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> <span class="keyword">alias</span></span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(id_p)</span><br><span class="line"><span class="keyword">REFERENCES</span> persons(id_p)</span><br><span class="line">删除外键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orders</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">alias</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">在已经存在表的情况下，添加default约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ALTER</span> City <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="string">'SANDNES'</span></span><br><span class="line">或者删除<span class="keyword">default</span>约束</span><br><span class="line"><span class="keyword">ALTER</span> City <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> persons</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> <span class="keyword">alias</span></span><br><span class="line"><span class="keyword">CHECK</span>(id_p&gt;<span class="number">0</span> <span class="keyword">and</span> city=<span class="string">'beijing'</span>)</span><br></pre></td></tr></table></figure><p>我们将主要探讨以下几种约束：</p><table><thead><tr><th align="left">约束名</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">NOT NULL</td><td align="left">约束强制列不接受 NULL 值</td></tr><tr><td align="left">UNIQUE</td><td align="left">唯一标识数据库表中的每条记录，可以有多个</td></tr><tr><td align="left">PRIMARY KEY</td><td align="left">唯一标识数据库表中的每条记录，每个表都应该有且仅有一个主键</td></tr><tr><td align="left">FOREIGN KEY</td><td align="left">用于预防破坏表之间连接的动作，防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一</td></tr><tr><td align="left">DEFAULT</td><td align="left">如果没有规定其他的值，那么会将默认值添加到所有的新记录</td></tr><tr><td align="left">CHECK</td><td align="left">此约束会在特定的列中对值进行限制</td></tr></tbody></table><h4 id="sql通配符"><a href="#sql通配符" class="headerlink" title="sql通配符"></a>sql通配符</h4><p>SQL 通配符必须与 LIKE 运算符一起使用</p><table><thead><tr><th align="center">通配符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">%</td><td align="center">替代一个或多个字符</td></tr><tr><td align="center">_</td><td align="center">仅替代一个字符</td></tr><tr><td align="center">[charlist]</td><td align="center">字符列中的任何单一字符</td></tr><tr><td align="center">[^charlist]或者[!charlist]</td><td align="center">不在字符列中的任何单一字符</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">使用 % 通配符</span><br><span class="line">从 "Persons" 表中选取居住在以 "Ne" 开始的城市里的人：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> City <span class="keyword">LIKE</span> <span class="string">'Ne%'</span></span><br><span class="line">使用 _ 通配符</span><br><span class="line">从 <span class="string">"Persons"</span> 表中选取名字的第一个字符之后是 <span class="string">"eorge"</span> 的人：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName <span class="keyword">LIKE</span> <span class="string">'_eorge'</span></span><br><span class="line">使用 [charlist] 通配符</span><br><span class="line">从 <span class="string">"Persons"</span> 表中选取居住的城市以 <span class="string">"A"</span> 或 <span class="string">"L"</span> 或 <span class="string">"N"</span> 开头的人：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> City <span class="keyword">LIKE</span> <span class="string">'[ALN]%'</span></span><br><span class="line">从 <span class="string">"Persons"</span> 表中选取居住的城市不以 <span class="string">"A"</span> 或 <span class="string">"L"</span> 或 <span class="string">"N"</span> 开头的人：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> City <span class="keyword">LIKE</span> <span class="string">'[!ALN]%'</span></span><br></pre></td></tr></table></figure><h4 id="sql别名"><a href="#sql别名" class="headerlink" title="sql别名"></a>sql别名</h4><p>可以通过as为列名称和表名称指定别名（Alias）</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查询出来的code表的codeid显示为cid，role表的roleid显示为rid</span><br><span class="line"><span class="keyword">SELECT</span> c.codeid <span class="keyword">as</span> cid,r.roleid <span class="keyword">as</span> rid</span><br><span class="line">code表起名c，<span class="keyword">role</span>表起名r</span><br><span class="line"><span class="keyword">FROM</span> code <span class="keyword">AS</span> c,<span class="keyword">role</span> <span class="keyword">as</span> r</span><br><span class="line">code表的userid为<span class="number">1</span>和<span class="keyword">role</span>表rolename为<span class="keyword">user</span></span><br><span class="line"><span class="keyword">where</span> c.userid=<span class="number">1</span> <span class="keyword">and</span> r.rolename=<span class="string">'user'</span></span><br></pre></td></tr></table></figure><h4 id="sql-JOIN"><a href="#sql-JOIN" class="headerlink" title="sql JOIN"></a>sql JOIN</h4><p>WHERE子句中使用的连接语句，在数据库语言中，被称为隐性连接。INNER JOIN……ON子句产生的连接称为显性连接。（其他JOIN参数也是显性连接）</p><p>WHERE和INNER JOIN产生的连接关系，没有本质区别，结果也一样。</p><h5 id="inner-join"><a href="#inner-join" class="headerlink" title="inner join"></a>inner join</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.username,o.orderNo</span><br><span class="line"><span class="keyword">FROM</span> persons <span class="keyword">as</span> p,orders <span class="keyword">as</span> o</span><br><span class="line"><span class="keyword">where</span> p.id_p=o.id_p</span><br><span class="line">等价于内连接</span><br><span class="line"><span class="keyword">SELECT</span> p.username,o.orderNo</span><br><span class="line"><span class="keyword">FROM</span> persons <span class="keyword">as</span> p</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders <span class="keyword">as</span> o</span><br><span class="line"><span class="keyword">on</span> p.id_p=o.id_p</span><br><span class="line">三表连接</span><br><span class="line"><span class="keyword">SELECT</span> p.username,o.orderNo,t.address</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">persons <span class="keyword">as</span> p</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">orders <span class="keyword">as</span> o</span><br><span class="line"><span class="keyword">on</span> p.id_p=o.id_p</span><br><span class="line">)<span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">TMD <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> p.id_p=t.id_p</span><br></pre></td></tr></table></figure><h5 id="outer-join"><a href="#outer-join" class="headerlink" title="outer join"></a>outer join</h5><p>left join：理解为“有左显示”，比如on a.field=b.field，则显示a表中存在的全部数据及a、b中都有的数据，a中有、b中没有的数据以null显示<br>right join：理解为“有右显示”，比如on a.field=b.field，则显示b表中存在的全部数据及a、b中都有的数据，b中有、a中没有的数据以null显示</p><h4 id="SQL-UNION"><a href="#SQL-UNION" class="headerlink" title="SQL UNION"></a>SQL UNION</h4><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集，UNION 内部的 SELECT 语句必须拥有相同数量的列，列也必须拥有相似的数据类型。</p><h4 id="SQL-CREATE-INDEX"><a href="#SQL-CREATE-INDEX" class="headerlink" title="SQL CREATE INDEX"></a>SQL CREATE INDEX</h4><p>在表中创建索引，以便更加快速高效地查询数据。用户无法看到索引，它们只能被用来加速搜索/查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">方式一<span class="keyword">create</span>，但是无法建立primaryKey</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> PersonIndex</span><br><span class="line"><span class="keyword">ON</span> Person (LastName, FirstName)</span><br><span class="line">删除</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Person</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> PersonIndex</span><br><span class="line">方式二 <span class="keyword">alter</span> <span class="keyword">add</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">add</span> PRIMARY <span class="keyword">KEY</span>(id_p)</span><br><span class="line">方式三 <span class="keyword">create</span> <span class="keyword">table</span>时添加索引</span><br></pre></td></tr></table></figure><h4 id="SQL-ALTER-TABLE"><a href="#SQL-ALTER-TABLE" class="headerlink" title="SQL ALTER TABLE"></a>SQL ALTER TABLE</h4><p>用于在已有的表中添加add、修改modify或删除drop列</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">在表 "Persons" 中添加一个名为 "Birthday"类型为“DATE”的新列。</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> Birthday <span class="built_in">date</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">改变 "Persons" 表中 "Birthday" 列的数据类型为“year”。</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> Birthday <span class="keyword">year</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">删除 "Person" 表中的 "Birthday" 列：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Person</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> Birthday</span><br></pre></td></tr></table></figure><h4 id="SQL-AUTO-INCREMENT"><a href="#SQL-AUTO-INCREMENT" class="headerlink" title="SQL AUTO INCREMENT"></a>SQL AUTO INCREMENT</h4><p>在每次插入新记录时，自动地为主键字段创建一个唯一的值</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (P_Id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="SQL-VIEW"><a href="#SQL-VIEW" class="headerlink" title="SQL VIEW"></a>SQL VIEW</h4><p>视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> other <span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> a.name <span class="keyword">as</span> username, b.name <span class="keyword">as</span> goodsname </span><br><span class="line"><span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">as</span> a, goods <span class="keyword">as</span> b, ug <span class="keyword">as</span> c </span><br><span class="line"><span class="keyword">where</span> a.id=c.userid <span class="keyword">and</span> c.goodsid=b.id;</span><br><span class="line">创建好视图后，可以直接从view中查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> other</span><br><span class="line">删除视图</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_name</span><br></pre></td></tr></table></figure><h4 id="SQL-DATE"><a href="#SQL-DATE" class="headerlink" title="SQL DATE"></a>SQL DATE</h4><p>下面的表格列出了 MySQL 中最重要的内建日期函数：</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/sql/func_now.asp" target="_blank" rel="noopener">NOW()</a></td><td align="left">返回当前的日期和时间</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/sql/func_curdate.asp" target="_blank" rel="noopener">CURDATE()</a></td><td align="left">返回当前的日期</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/sql/func_curtime.asp" target="_blank" rel="noopener">CURTIME()</a></td><td align="left">返回当前的时间</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/sql/func_date.asp" target="_blank" rel="noopener">DATE()</a></td><td align="left">提取日期或日期/时间表达式的日期部分</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/sql/func_extract.asp" target="_blank" rel="noopener">EXTRACT()</a></td><td align="left">返回日期/时间的单独部分</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/sql/func_date_add.asp" target="_blank" rel="noopener">DATE_ADD()</a></td><td align="left">给日期添加指定的时间间隔</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/sql/func_date_sub.asp" target="_blank" rel="noopener">DATE_SUB()</a></td><td align="left">从日期减去指定的时间间隔</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/sql/func_datediff_mysql.asp" target="_blank" rel="noopener">DATEDIFF()</a></td><td align="left">返回两个日期之间的天数</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/sql/func_date_format.asp" target="_blank" rel="noopener">DATE_FORMAT()</a></td><td align="left">用不同的格式显示日期/时间</td></tr></tbody></table><h4 id="SQL-NULL"><a href="#SQL-NULL" class="headerlink" title="SQL NULL"></a>SQL NULL</h4><p>对于可选列，当插入一条可选列无值的数据，会以NULL值保存</p><p>无法使用比较运算符来测试 NULL 值，比如 =, &lt;, 或者 &lt;&gt;，</p><p>必须使用 IS NULL 和 IS NOT NULL 操作符。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LastName,FirstName,Address <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> Address <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><p>涉及到计算时通过IFNULL(VALUE,0),COALSCE(VALUE,0)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ProductName,<span class="keyword">COALESCE</span>(OrderNo,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br></pre></td></tr></table></figure><h3 id="SQL函数"><a href="#SQL函数" class="headerlink" title="SQL函数"></a>SQL函数</h3><p>常见sql函数，详见<a href="https://blog.csdn.net/zeng_ll/article/details/87706409" target="_blank" rel="noopener">https://blog.csdn.net/zeng_ll/article/details/87706409</a></p><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>avg(数值列)</td><td>返回数值列的平均值。NULL 值不包括在计算中</td></tr><tr><td>abs(数值列)</td><td>返回数值列的绝对值</td></tr><tr><td>count(字段名)</td><td>返回匹配指定条件的行数</td></tr><tr><td>first(字段名)/last(字段名)</td><td>函数返回指定的字段中第一个/最后一个记录的值</td></tr><tr><td>max(字段名)/min(字段名)</td><td>返回一列中的最大值/最小值</td></tr><tr><td>ucase(字段名)/lcase(字段名)</td><td>字段值转换为大写/小写</td></tr><tr><td>len(字段名)</td><td>文本字段中值的长度</td></tr><tr><td>ROUND(字段名，小数位数)</td><td>把数值字段舍入为指定的小数位数</td></tr><tr><td>IF(expr,v1,v2）</td><td>如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2</td></tr></tbody></table><h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><p>GROUP BY 语句根据一个或多个列对结果集进行分组，在分组的列上我们可以使用 COUNT, SUM, AVG等合计函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer,<span class="keyword">SUM</span>(OrderPrice) <span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customer</span><br></pre></td></tr></table></figure><h4 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h4><p>在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与合计函数一起使用</p><p>HAVING SUM(OrderPrice)&lt;2000中的“SUM(OrderPrice)&lt;2000”即为合计函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customer,<span class="keyword">SUM</span>(OrderPrice) <span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customer</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">SUM</span>(OrderPrice)&lt;<span class="number">2000</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">找到客户BUSH或者ADAMS中订单超过1500的金额</span><br><span class="line"><span class="keyword">SELECT</span> Customer,<span class="keyword">SUM</span>(OrderPrice) <span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> Customer=<span class="string">'Bush'</span> <span class="keyword">OR</span> Customer=<span class="string">'Adams'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customer</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">SUM</span>(OrderPrice)&gt;<span class="number">1500</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;秋招复习mysql之sql语句&quot;&gt;&lt;a href=&quot;#秋招复习mysql之sql语句&quot; class=&quot;headerlink&quot; title=&quot;秋招复习mysql之sql语句&quot;&gt;&lt;/a&gt;秋招复习mysql之sql语句&lt;/h2&gt;&lt;h3 id=&quot;基础语句&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="mysql" scheme="https://xulilei.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="https://xulilei.github.io/2020/07/15/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://xulilei.github.io/2020/07/15/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-07-15T07:39:07.000Z</published>
    <updated>2020-08-21T07:51:48.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秋招复习之操作系统"><a href="#秋招复习之操作系统" class="headerlink" title="秋招复习之操作系统"></a>秋招复习之操作系统</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h4 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h4><p>1、匿名管道：用于具有亲缘关系的父子进程或者兄弟进程之间的通信，存放于内存中</p><p>2、有命管道：匿名管道由于没有名字，只能用于亲缘关系进程之间的通信。有名管道以磁盘文件方式存在，可以实现本机任意两个进程通信，遵守先进先出</p><p>3、信号：用于通知接收进程某个事件已经发生</p><p>4、消息队列：是消息的链表，具有特定的格式，存放在内存中并有消息队列标识符标识，可以实现消息的随机查询，不一定按照FIFO的顺序，可以按照消息的类型读取</p><p>5、信号量：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步，主要用于解决与同步相关的问题，并避免竞争条件</p><p>6、共享内存：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享数据的更新，但需依赖互斥锁，信号量等，是最有用的线程间通信方式</p><p>7、套接字：用于客户端进程和服务器之间通过网络进行通信</p><h4 id="线程间的同步方式"><a href="#线程间的同步方式" class="headerlink" title="线程间的同步方式"></a>线程间的同步方式</h4><p>1、互斥量：即某一时刻，互斥对象中只有一个能够访问公共资源，比如java中的Syncronized</p><p>2、信号量：它允许同一时刻多个线程访问同一资源，比如semaphore等</p><p>3、事件：允许一个线程在处理完一个任务后，主动唤醒另外一个线程执行任务。比如wait，notify等，以及countlatch等组件</p><h4 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h4><p>1、先到先服务：从就绪队列选择一个最早进入队列的进程，为该资源分配进程立即执行</p><p>2、短作业优先：从就绪队列选择一个估计运行时间最短的进程，为该资源分配进程立即执行</p><p>3、时间片轮转：每个进程被分配一个时间段，称作它的时间片，即该线程允许运行的时间</p><p>4、优先级：为每个进程分配优先级，高优先级先执行，相同优先级先到先执行</p><p>5、多级反馈队列：既保证高优先级进程得到响应，又能使短作业进程快速完成</p><h4 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h4><p>1、new：进程正在被创建，还未就绪</p><p>2、ready：线程已经准备就绪，当获得cpu资源即可开始运行</p><p>3、running：线程正在运行中</p><p>4、waiting：等待状态，即该进程让出CPU资源，即使CPU空闲也不会运行</p><p>5、ending：进程从系统中结束</p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><h4 id="操作系统内存管理做了什么"><a href="#操作系统内存管理做了什么" class="headerlink" title="操作系统内存管理做了什么"></a>操作系统内存管理做了什么</h4><p>主要负责内存的分配与回收，以及讲逻辑地址映射成响应的物理地址</p><h4 id="常见的内存管理机制"><a href="#常见的内存管理机制" class="headerlink" title="常见的内存管理机制"></a>常见的内存管理机制</h4><p>连续分配管理：为一个进程分配一个连续的内存空间，如块式管理，如果进程只需很小的空间的话，会造成浪费</p><p>非连续分配管理：允许一个程序使用的内存分布在离散的内存中</p><p>页式管理：将主存分为大小相等且固定的一页一页的形式，粒度更小，通过页表对应物理和逻辑地址</p><p>段式管理：将主存分为一段一段，每个段赋予了逻辑信息，通过段表对应物理和逻辑地址</p><p>段页式管理机制：结合了段式和页式管理的优点，先将主存分成若干段，再将每个段分配成若干页</p><h4 id="段页机制的共同点与区别"><a href="#段页机制的共同点与区别" class="headerlink" title="段页机制的共同点与区别"></a>段页机制的共同点与区别</h4><h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><p>1、分页机制和分段机制都是为了提高内存利用率，减少内存碎片</p><p>2、页和段都是离散存储的，但是段和页内的内存是连续的</p><h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><p>1、页大小固定，段大小根据运行的程序</p><p>2、分页是为了满足操作系统内存管理的需求，而段是具有逻辑信息的，体现为代码段，数据段等</p><h4 id="多级页表和快表"><a href="#多级页表和快表" class="headerlink" title="多级页表和快表"></a>多级页表和快表</h4><h5 id="快表"><a href="#快表" class="headerlink" title="快表"></a>快表</h5><p>为了解决虚拟地址到物理地址的转换速度，使用页表后转换流程</p><p>1、根据虚拟地址中的页号查快表</p><p>2、如果该页在快表中，则直接从快表中读取相应的物理地址</p><p>3、如果不在快表中，则访问页表，得到物理地址后，映射一份到快表中，以备下次转换</p><p>4、快表满后，则根据淘汰策略淘汰一页</p><h5 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h5><p>避免把全部页表一直放在内存中占用过多空间，多级页表通过一个顶级页表为真正有用的页表提供索引，这样一些不需要的页表就不用一直存储在内存中了，只需要通过顶级页表索引查询到具体的页表即可，是一种时间换空间的做法</p><h4 id="虚拟-逻辑-地址与物理地址"><a href="#虚拟-逻辑-地址与物理地址" class="headerlink" title="虚拟(逻辑)地址与物理地址"></a>虚拟(逻辑)地址与物理地址</h4><p>程序产生的与段相关的偏移地址，而物理地址则是代表真实物理内存中的地址</p><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><h4 id="cpu寻址"><a href="#cpu寻址" class="headerlink" title="cpu寻址"></a>cpu寻址</h4><p>cpu通过虚拟寻址将虚拟地址翻译成物理地址，这样才能访问到真正的物理内存</p><h4 id="虚拟地址空间"><a href="#虚拟地址空间" class="headerlink" title="虚拟地址空间"></a>虚拟地址空间</h4><p>没有虚拟地址空间的时候，程序直接访问和操作的都是物理内存会造成以下问题</p><p>1、用户程序可以随意访问任意内存，很容易破坏系统</p><p>2、运行多个程序不便，比如A程序分配了1XX的内存地址，当另一个程序也分配到这里的时候会造成覆盖</p><p>使用虚拟地址空间：</p><p>1、用户可以使用相邻的虚拟地址访问物理地址不相邻的内存</p><p>2、不同程序之间虚拟地址被隔离，保护了系统，以及运行的程序</p><h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><h4 id="表现为以下两个方面："><a href="#表现为以下两个方面：" class="headerlink" title="表现为以下两个方面："></a>表现为以下两个方面：</h4><p>时间局部性：如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某数据被访问，则不久之后该数据可能再次被访问。</p><p>空间局部性：是指一旦程序访问了某个存储单元，则不久之后，其附近的存储单元也将被访问。</p><h4 id="CPU对应的做法"><a href="#CPU对应的做法" class="headerlink" title="CPU对应的做法"></a>CPU对应的做法</h4><p>时间局部性：如果一个信息项正在被访问，数据在寄存器被计算完成后，将会放入高速缓存中。</p><p>空间局部性：在读取内存的时候将该内存附近的内存也读进缓存中。</p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>虚拟内存可以让程序拥有超过物理内存大小的可用内存空间，定义了一个连续的虚拟地址空间，并把内存扩展到硬盘空间</p><h4 id="虚拟内存的实现"><a href="#虚拟内存的实现" class="headerlink" title="虚拟内存的实现"></a>虚拟内存的实现</h4><p>1、在载入程序的时候，装入程序的一部分，而另一部分留在外寸</p><p>2、缺页中断：当程序执行过程中，访问信息不在内存中时（成为缺页缺段），再将需要的部分读入内存，继续执行程序</p><p>3、虚拟地址空间：逻辑地址到物理地址的转换</p><h4 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h4><p>地址映射过程中，若在页面中发现所要访问的页面不在内存中，则发生缺页中断，如果当前内存中没有空闲的页面，操作系统就必须在内存选择一个页面将其一出内存，这就涉及到了页面置换算法</p><p>LFU页面置换算法：系统会维护一个按最近一次访问时间排序的页面链表，链表首节点最近刚刚使用过的页面，链表尾节点是最久未使用的，缺页时，置换链表尾节点的页面。也就是说，内存使用越频繁的页面，保留的时间也越长</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;秋招复习之操作系统&quot;&gt;&lt;a href=&quot;#秋招复习之操作系统&quot; class=&quot;headerlink&quot; title=&quot;秋招复习之操作系统&quot;&gt;&lt;/a&gt;秋招复习之操作系统&lt;/h2&gt;&lt;h3 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="操作系统" scheme="https://xulilei.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>IO模型</title>
    <link href="https://xulilei.github.io/2020/07/14/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BIO/"/>
    <id>https://xulilei.github.io/2020/07/14/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BIO/</id>
    <published>2020-07-14T06:07:52.000Z</published>
    <updated>2020-09-11T10:54:29.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秋招基础复习之IO模型"><a href="#秋招基础复习之IO模型" class="headerlink" title="秋招基础复习之IO模型"></a>秋招基础复习之IO模型</h2><p>基本四个：InputStream，outputStream，reader，writer</p><h3 id="字节流和字符流的区别"><a href="#字节流和字符流的区别" class="headerlink" title="字节流和字符流的区别"></a>字节流和字符流的区别</h3><p>1、字节流是最小单元，但是在字符与字节流的转化过程中，可能会造成乱码，因此提供了直接操作字符的工具</p><p>2、字节流在操作时本身不会用到缓冲区（内存），是文件本身直接操作的；而字符流在操作时使用了缓冲区，通过缓冲区再操作文件。</p><h4 id="什么是缓冲区？有什么作用？"><a href="#什么是缓冲区？有什么作用？" class="headerlink" title="什么是缓冲区？有什么作用？"></a>什么是缓冲区？有什么作用？</h4><p>缓冲区就是一段特殊的内存区域，很多情况下当程序需要频繁地操作一个资源（如文件或数据库）则性能会很低，所以为了提升性能就可以将一部分数据暂时读写到缓存区，以后直接从此区域中读写数据即可，这样就显著提升了性能。</p><h4 id="缓冲和缓存的区别"><a href="#缓冲和缓存的区别" class="headerlink" title="缓冲和缓存的区别"></a>缓冲和缓存的区别</h4><p>缓存（cache）是在读取硬盘中的数据时，把最常用的数据保存在内存的缓存区中，再次读取该数据时，就不去硬盘中读取了，而在缓存中读取。<br>缓冲（buffer）是在向硬盘写入数据时，先把数据放入缓冲区,然后再一起向硬盘写入，把分散的写操作集中进行，减少磁盘碎片和硬盘的反复寻道，从而提高系统性能。</p><h3 id="BIO-NIO-AIO"><a href="#BIO-NIO-AIO" class="headerlink" title="BIO/NIO/AIO"></a>BIO/NIO/AIO</h3><h4 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h4><p>两个阻塞点：Socket socket=serverSocket.accept()处理请求的时候，另一个是InputStream is=socket.getInputStream()处理io流的时候</p><p>优点是：一个线程为一个客户端服务，质量好。</p><p>缺点是：并发量大的时候性能差</p><h4 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h4><h5 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h5><p>从两个事件介绍，一个是selector的accpet事件，另一个是read事件</p><p>accpet事件的执行过程为：</p><p>1、介绍几个概念，第一个是selector选择器，用于监听注册在其上的selectionKey事件集合的状态，第二个是serversocketChannel，主要关心的是accept事件，第三个是channel，是对BIO的流的模拟，即数据从一个地方到另一个地方一定要经过这个流。</p><p>2、第一步，创建serversocketChannel并设置为非阻塞模式，将其注册到selctor上去，并监听slectionKey.op_accept事件</p><p>3、Selector对象循环监听每一个Channel通道的事件，循环执行 Selector.select() 方法（这个就是多路复用模型selector/epoll/poll等），轮询就绪的Channel，如果事件为op_accept就执行serversocketChannel.accept建立连接，这也是为什么说serversocketChannel关心的accept事件</p><p>4、接着将事件的状态改为OP_read，进入读取进制，并删除OP_ACCEPT的selectionKey，表明这个时间完成了</p><p>下面执行的是读取机制</p><p>要介绍几个新的概念，第一个是buffer缓冲区，在NIO中所有数据都通过buffer来处理，实质是一个数组，比如byteBuffer（option，limit来限定每个channel所在的位置），还有一个SocketChannel，关心的是IO事件。</p><p>1、首先打开socketChannel，并设置为非阻塞模式，将其注册到selector上去，并监听selectionKey.op_read事件</p><p>2、selector继续轮询监听各个事件，在读取机制中，检测的是Selection.op_read事件，如果事件为op_read，则将数据异步的读取到buffer中，再将buffer中的信息写到socketChannel中，获取消息</p><h3 id="I-O多路复用机制"><a href="#I-O多路复用机制" class="headerlink" title="I/O多路复用机制"></a>I/O多路复用机制</h3><p>多路I/O复用模型是利用 select、poll、epoll 可以同时监察多个流的 I/O 事件的能力，在空闲的时候，会把当前线程阻塞掉。当有一个或多个流有 I/O事件时，就从阻塞态中唤醒，依次顺序的处理就绪的流，这种做法就避免了大量的无用操作</p><h4 id="多路复用流程"><a href="#多路复用流程" class="headerlink" title="多路复用流程"></a>多路复用流程</h4><h5 id="用户态将文件描述符传入内核"><a href="#用户态将文件描述符传入内核" class="headerlink" title="用户态将文件描述符传入内核"></a>用户态将文件描述符传入内核</h5><ul><li>select/poll：将用户态文件拷贝到内核中，监听IO操作。其中select有fd数量限制，默认是1024。</li><li>epoll：会在内核的中建立一颗红黑树以及就绪链表。每一个用户态文件描述符会对应红黑树的一个节点，同时注册回调函数。</li></ul><h5 id="内核态检测文件描述符读写状态"><a href="#内核态检测文件描述符读写状态" class="headerlink" title="内核态检测文件描述符读写状态"></a>内核态检测文件描述符读写状态</h5><ul><li>select/poll：采用轮询方式，遍历所有fd，找到就绪的fd。</li><li>epoll：采用回调机制。内核在检测到事件时会调用回调函数，该回调函数会将就绪的事件放在就绪链表中。</li></ul><h5 id="找到就绪的文件描述符传递给用户态"><a href="#找到就绪的文件描述符传递给用户态" class="headerlink" title="找到就绪的文件描述符传递给用户态"></a>找到就绪的文件描述符传递给用户态</h5><ul><li>select/poll：将之前传入的就绪fd拷贝到用户态。</li><li>epoll：epoll_wait只用观察就绪链表中有无数据依次处理即可。</li></ul><h4 id="多路复用优点"><a href="#多路复用优点" class="headerlink" title="多路复用优点"></a>多路复用优点</h4><p>用select/epoll的优势在于，它可以同时处理很多个连接。与一条线程维护一个连接相比，系统不必创建线程，也不必维护这些线程，从而大大减小了系统的开销。</p><h4 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h4><p>异步IO，指的是当有IO请求时，不用拿到IO，而线程可以继续运行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;秋招基础复习之IO模型&quot;&gt;&lt;a href=&quot;#秋招基础复习之IO模型&quot; class=&quot;headerlink&quot; title=&quot;秋招基础复习之IO模型&quot;&gt;&lt;/a&gt;秋招基础复习之IO模型&lt;/h2&gt;&lt;p&gt;基本四个：InputStream，outputStream，read
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="IO" scheme="https://xulilei.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>java基础（一）</title>
    <link href="https://xulilei.github.io/2020/07/12/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8Bjava%E5%9F%BA%E7%A1%80/"/>
    <id>https://xulilei.github.io/2020/07/12/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8Bjava%E5%9F%BA%E7%A1%80/</id>
    <published>2020-07-12T08:15:47.000Z</published>
    <updated>2020-09-11T11:42:55.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秋招复习之java基础"><a href="#秋招复习之java基础" class="headerlink" title="秋招复习之java基础"></a>秋招复习之java基础</h2><h3 id="JAVA概述"><a href="#JAVA概述" class="headerlink" title="JAVA概述"></a>JAVA概述</h3><h4 id="1、JVM、JRE、JDK"><a href="#1、JVM、JRE、JDK" class="headerlink" title="1、JVM、JRE、JDK"></a>1、JVM、JRE、JDK</h4><p>JVM：被称为java虚拟机，是运行java字节码的虚拟机</p><p>JRE：java运行时环境，包括JVM，Java类库，Java命令和其他一些基础组件</p><p>JDK：拥有JRE所拥有的一切，还有java编译器javac和工具</p><h4 id="2、什么是字节码？好处是什么？"><a href="#2、什么是字节码？好处是什么？" class="headerlink" title="2、什么是字节码？好处是什么？"></a>2、什么是字节码？好处是什么？</h4><p>字节码是经过java虚拟机编译后形成的.class文件，不面向平台，只面向对应的虚拟机，因此java程序无需重新编译即可在不同的平台运行</p><h3 id="3、java中的编译器和解释器"><a href="#3、java中的编译器和解释器" class="headerlink" title="3、java中的编译器和解释器"></a>3、java中的编译器和解释器</h3><p>java源代码先经过编译器编译成虚拟机能够理解的代码，再由解释器解析在特定的环境中运行</p><h4 id="4、java和c-的区别"><a href="#4、java和c-的区别" class="headerlink" title="4、java和c++的区别"></a>4、java和c++的区别</h4><p>1、都是面向对象的语言，都支持继承封装，多态三大特性</p><p>2、java不提供指针直接操作内存，相比C++更加安全</p><p>3、java类是单继承原则，c++可以多继承</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h4><p>引用数据类型：类，接口，数组</p><p>基本数据类型：整型4个，浮点型2个，字符型1个，布尔型1个。</p><p><img src="https://gitee.com/xulilei/pic/raw/master/6N89T@$E%60R3PM6%60_0GDV_AC.png" alt=""></p><h4 id="2、switch-是否能作用在-byte-上，是否能作用在-long-上，是否能作用在-String-上"><a href="#2、switch-是否能作用在-byte-上，是否能作用在-long-上，是否能作用在-String-上" class="headerlink" title="2、switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上"></a>2、switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上</h4><p>switch语句可以执行byte，short，int，char，string，枚举类型，但是目前为止不支持长整形</p><h4 id="3、Math-round-11-5-等于多少？Math-round-11-5-等于多少"><a href="#3、Math-round-11-5-等于多少？Math-round-11-5-等于多少" class="headerlink" title="3、Math.round(11.5) 等于多少？Math.round(-11.5)等于多少"></a>3、Math.round(11.5) 等于多少？Math.round(-11.5)等于多少</h4><p>计算规则，+0.5取整，因此前者为12，后者为-11</p><h4 id="4、float-3-4是否正确？"><a href="#4、float-3-4是否正确？" class="headerlink" title="4、float=3.4是否正确？"></a>4、float=3.4是否正确？</h4><p>3.4是双精度型，双精度型赋值给单精度型是向下赋值，会造成精度丢失，因此需要强转，float f =(float)3.4或者float f =3.4F</p><h4 id="5、short-s1-1-s1-s1-1有错吗-short-s1-1-s1-1有错吗？"><a href="#5、short-s1-1-s1-s1-1有错吗-short-s1-1-s1-1有错吗？" class="headerlink" title="5、short s1 = 1; s1 = s1 + 1有错吗?short s1 = 1; s1 += 1有错吗？"></a>5、short s1 = 1; s1 = s1 + 1有错吗?short s1 = 1; s1 += 1有错吗？</h4><p>s1=1，1+1位int型，因此需要强转，错误</p><p>s1+=1，隐含了s1=（short）（s1+1），因此正确</p><h4 id="6、JAVA采用何种编码？特点？"><a href="#6、JAVA采用何种编码？特点？" class="headerlink" title="6、JAVA采用何种编码？特点？"></a>6、JAVA采用何种编码？特点？</h4><p>java采用Unicode标准码编码，为每个字符指定了唯一的数值，因此可以在任意平台放心使用</p><h4 id="7、访问修饰符"><a href="#7、访问修饰符" class="headerlink" title="7、访问修饰符"></a>7、访问修饰符</h4><p>private：在同一类内可见，可以修饰方法，变量，内部类（外部类不可以）</p><p>protected：同一包可见，外包子类可见，修饰方法，变量，内部类（不能修饰外部类）</p><p>default（即缺省，不加关键字修饰）：在同一包中可见，外包子类不可见，修饰方法，变量，类，接口</p><p>public：所有可见</p><h4 id="8、-amp-和-amp-amp-的区别"><a href="#8、-amp-和-amp-amp-的区别" class="headerlink" title="8、&amp;和&amp;&amp;的区别"></a>8、&amp;和&amp;&amp;的区别</h4><p>逻辑与(&amp;)和短路与(&amp;&amp;)在运算上对条件的结果判断不会产生影响,但会对条件判断的运算有影响</p><p>关键在于,逻辑与(&amp;)在运算时会连续运算所有需要判断的命令.但短路与当遇到false时就会停止运算</p><p>同样的，逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p><h4 id="9、final关键字"><a href="#9、final关键字" class="headerlink" title="9、final关键字"></a>9、final关键字</h4><p>修饰变量：如果是基本数据类型，则其数值一旦在初始化后就不能更改；如果是引用类型的变量，则对其初始化后就不能再指向另一个对象</p><p>修饰类：表明这个类不能被继承</p><p>修饰方法：防止该方法被重写，private方法都隐式都指定为final</p><h4 id="10、final、finally、finalize区别"><a href="#10、final、finally、finalize区别" class="headerlink" title="10、final、finally、finalize区别"></a>10、final、finally、finalize区别</h4><p>final：看9</p><p>finally：一般用作try-catch块中，通常将一定要执行的代码方法finally代码块中，表示不管有没有异常，该部分逻辑都要执行</p><p>finalize：是垃圾回收期在GC时调用</p><h4 id="11、this和super"><a href="#11、this和super" class="headerlink" title="11、this和super"></a>11、this和super</h4><p>this是代表指向自身的对象，可以理解为一个指向本身的一个指针</p><p>super是指向离自己最近的父类对象</p><p>在构造函数中使用时，都需放在构造函数的第一行，且不能在同一个构造函数中同时使用super和this</p><p>静态方法中不能使用super和this关键字</p><h4 id="12、break、continue、return"><a href="#12、break、continue、return" class="headerlink" title="12、break、continue、return"></a>12、break、continue、return</h4><p>break：跳传当前的循环体，要退出多层嵌套循环，可以在循环外定一个标志位，使用break+标志位退出到标志点</p><p>continue：跳传本次循环，继续执行下次循环</p><p>return：程序返回，不再执行下面的代码</p><h4 id="13、自动装箱与拆箱"><a href="#13、自动装箱与拆箱" class="headerlink" title="13、自动装箱与拆箱"></a>13、自动装箱与拆箱</h4><p>装箱：将基本数据类型用他们对应的引用类型包装起来</p><p>拆箱：将包装类型转换为基本数据类型</p><p>一种机制，使得这些基本类型在一般的编程中被当作非对象的简单类型处理，在另一些场合，又允许它们被视作是一个对象</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="1、面对对象的理解"><a href="#1、面对对象的理解" class="headerlink" title="1、面对对象的理解"></a>1、面对对象的理解</h4><p>面向对象易维护，易复用，易扩展。因为面向对象有封装、继承、多态三大特性，所以基于面对对象思想构建的程序具有低耦合、更灵活、易维护等特点</p><h5 id="封装、继承、多态"><a href="#封装、继承、多态" class="headerlink" title="封装、继承、多态"></a>封装、继承、多态</h5><p>封装：把一个对象的属性私有化，同时提供一些可以被外界访问属性的方法</p><p>继承：是指可以让某个类型的对象获得另一个类型的对象的属性的方法。</p><p>多态：就是指一个类实例的相同方法在不同情形有不同表现形式，多态的三个必要条件：继承、重写、向上转型</p><h4 id="2、面对过程"><a href="#2、面对过程" class="headerlink" title="2、面对过程"></a>2、面对过程</h4><p>优点：由于面向对象需要实例化对象，维护对象之间的关系，因此面对过程效率比面向对象高，开销少，比如linux，单片机等都是面对过程开发</p><p>缺点：面对对象的优点就是面对过程的缺点，比如不易复用，不易维护，不易扩展</p><h4 id="3、面对对象的五大原则"><a href="#3、面对对象的五大原则" class="headerlink" title="3、面对对象的五大原则"></a>3、面对对象的五大原则</h4><p>单一职责原则：类的功能要单一</p><p>开闭原则：对于拓展是开放的，对于修改是封闭的</p><p>里氏替换原则：子类可以替换父类出现在父类能够出现的任何地方、</p><p>依赖倒置原则：低层次模块要依赖高层次模块，具体依赖抽象</p><p>接口分离原则：拆分不同功能到不同的接口中</p><h4 id="4、重载、重写与重构的区别"><a href="#4、重载、重写与重构的区别" class="headerlink" title="4、重载、重写与重构的区别"></a>4、重载、重写与重构的区别</h4><p>重载：发生在同一个类中，方法名必须相同，参数类型，个数，顺序，返回值类型，访问修饰符等都可以不同</p><p>重写：是子类对父类允许访问的方法的实现过程进行重新编写，发生在子类中，方法名、参数列表必须相同，返回值范围小于等于父类，访问修饰符范围大于等于父类，如果父类是private修饰的就不能重写该方法。也就是说方法提供的行为改变，而方法的外貌并没有改变</p><p>重构：是重写的一种特殊方式，子类与父类的成员方法的返回值、方法名称、参数类型及个数完全相同，唯一不同的是方法实现内容，这种特殊重写方式被称为重构。</p><h4 id="5、接口和抽象类"><a href="#5、接口和抽象类" class="headerlink" title="5、接口和抽象类"></a>5、接口和抽象类</h4><p>以JDK1.8为基准</p><p>相同点：二者都不能被实例化，只能实例化实现或者继承他们的类，接口可以有静态方法，抽象类一直都可以有</p><p>不同点：1、接口中变量只能是publis static final类型的，而抽象类中的变量可以任意修饰 2、接口中不能有构造函数，抽象类中可以有 3、抽象类可以用除了private之外的修饰符修饰，而接口只能使用public4、类只能继承一个类，但可以实现多个接口</p><h4 id="6、对象实例和对象引用的区别"><a href="#6、对象实例和对象引用的区别" class="headerlink" title="6、对象实例和对象引用的区别"></a>6、对象实例和对象引用的区别</h4><p>对象实例存放在堆内存中，可以有n个引用指向他。而对象引用存放在栈内存中，可以指向0或者1个对象实例</p><h4 id="7、static静态"><a href="#7、static静态" class="headerlink" title="7、static静态"></a>7、static静态</h4><h5 id="主要意义"><a href="#主要意义" class="headerlink" title="主要意义"></a>主要意义</h5><p>用于创立独立于具体对象之外的变量和方法，以至于不实例化对象，就可以使用属性和方法</p><p>由于生命周期从属于类，因此static修饰的代码只会被执行一次，可用于优化代码</p><p>static修饰的变量属于类变量，存放在方法区/元空间中，被该类的对象共享</p><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><p>静态只能访问静态，非静态可以访问静态也可以访问非静态</p><p>静态可以不用实例化，直接通过类名.属性名或者方法名调用，生命周期从属于类</p><p>非静态必须要实例化对象后，通过对象调用，生命周期从属于对象</p><h4 id="8、静态变量、成员变量和局部变量的区别"><a href="#8、静态变量、成员变量和局部变量的区别" class="headerlink" title="8、静态变量、成员变量和局部变量的区别"></a>8、静态变量、成员变量和局部变量的区别</h4><ul><li>所属不同：<ul><li>静态变量：属于类，也称为类变量</li><li>成员变量：属于对象，也称为对象变量或实例变量。</li><li>局部变量：属于方法      </li></ul></li><li>在内存中的位置不同：<ul><li>静态变量：存储于方法区/元空间。</li><li>成员变量：存储于堆内存</li><li>局部变量：存储于栈，随着方法结束自动回收                                                                                    </li></ul></li><li>生命周期不同：<ul><li>静态变量：随着类的加载而加载，随着类的消失而消失。</li><li>成员变量：存在于类中方法外，随着对象的创建而存在，随着对象的消失而消失。</li><li>局部变量：存在于方法内部，随着方法的调用而存在，随着方法的调用完毕而消失</li></ul></li><li>调用不同：<ul><li>静态变量：可以通过对象名调用，也可以通过类名调用</li><li>成员变量：只能通过对象名调用</li><li>局部变量：方法外部无法调用</li></ul></li><li>初始值不同：<ul><li>静态变量：有默认值</li><li>成员变量：有默认值</li><li>局部变量：么有默认值，必须先赋值</li></ul></li></ul><h4 id="9、空构造函数的作用"><a href="#9、空构造函数的作用" class="headerlink" title="9、空构造函数的作用"></a>9、空构造函数的作用</h4><p>构造函数的作用：当new一个对象的时候，调用构造函数完成对象的初始化</p><p>在类中如果没有参构造函数，系统会默认一个无参构造函数，此时写不写空构造没有影响。但如果父类只定义了有参构造，在子类的构造函数中，又没有通过super()来调用父类特定有参构造函数的情况下，将会发生编译错误。</p><h4 id="10、内部类"><a href="#10、内部类" class="headerlink" title="10、内部类"></a>10、内部类</h4><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><p>类内部由static修饰的类，需要通过outer.inner inner=new outer.inner();实例化</p><h5 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h5><p>类内部非static类，需要先实例化外部类，在通过外部类对象outer.inner inner=outer.new inner()实例化</p><h5 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h5><p>定义在方法中的内部类，就是局部内部类。需要在方法中实例化这个类，并调用这个类的方法</p><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>匿名内部类就是没有名字的内部类，匿名内部类必须继承一个抽象类或者实现一个接口。</p><h4 id="11、为什么要使用内部类，哪些应用场景"><a href="#11、为什么要使用内部类，哪些应用场景" class="headerlink" title="11、为什么要使用内部类，哪些应用场景"></a>11、为什么要使用内部类，哪些应用场景</h4><p>1、内部类可以访问创建它的外部类的属性</p><p>2、内部类不为同一包的其他类所见，有很好的封装性</p><p>3、内部类拓展了多重继承，优化了类单继承的缺陷</p><p>使用场景是某个类只会被它的外部类调用的时候</p><h4 id="12、-与equals方法"><a href="#12、-与equals方法" class="headerlink" title="12、==与equals方法"></a>12、==与equals方法</h4><p>==：判断两个对象的地址是不是相等，即判断两个对象是不是同一个对象，基本数据类型比较的是值，引用数据类型比较的是内存地址</p><p>equals：若没有重写equals方法，则比较对象时，等价于“==”，若重写了equals，则等价于重写的相等的逻辑</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            String a = <span class="keyword">new</span> String(<span class="string">"ab"</span>); <span class="comment">// a 为⼀个引⽤</span></span><br><span class="line">            String b = <span class="keyword">new</span> String(<span class="string">"ab"</span>); <span class="comment">// b为另⼀个引⽤,对象的内容⼀样</span></span><br><span class="line">            String aa = <span class="string">"ab"</span>; <span class="comment">// 放在常量池中</span></span><br><span class="line">            String bb = <span class="string">"ab"</span>; <span class="comment">// 从常量池中查找</span></span><br><span class="line">            <span class="comment">//true，同一对象</span></span><br><span class="line">            System.out.println(aa==bb);</span><br><span class="line">            <span class="comment">//false，非同一对象</span></span><br><span class="line">            System.out.println(a == b);</span><br><span class="line">            <span class="comment">//String对equals方法进行了重写，a的值与b的值相等</span></span><br><span class="line">            System.out.println(a.equals(b))；</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、重写equals方法为什么要重写hashcode"><a href="#13、重写equals方法为什么要重写hashcode" class="headerlink" title="13、重写equals方法为什么要重写hashcode()"></a>13、重写equals方法为什么要重写hashcode()</h4><p>hashcode值是基于对象内存地址和内容得到的值，作用是获取hash码定位哈希表中索引的位置</p><p>如果两个对象相等，那么他们的hashcode值一定是相同的，而如果两个对象不相同那么他们的hashcode也有可能相等</p><p>以hashmap为例，首先获得对象的hashcode定位到要加入的位置，再通过equals方法判断两个对象是否真的相同</p><p>如果重写了euqals方法，而不重写hashcode方法，那么就会导致相同的对象equals不相等，这样一来，就会导致get出的值为null</p><h4 id="14、为什么说java只有值传递"><a href="#14、为什么说java只有值传递" class="headerlink" title="14、为什么说java只有值传递"></a>14、为什么说java只有值传递</h4><p>Java总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，方法不能修改传递给它的任何参数变量的内容。</p><ul><li><p>第一种是int之类的基本数据类型，值的副本不会改变</p></li><li><p>第二种是数组之类的引用数据类型，传递的引用的副本，由于引用副本也是指向的同一个对象,所以方法可以改变对象参数，但其本质仍然是按值调用</p></li></ul><p>值调用表示方法接收的是调用者提供的值</p><p>按引用调用表示方法接收的是被调用对象的地址</p><h4 id="15、浅拷贝、深拷贝"><a href="#15、浅拷贝、深拷贝" class="headerlink" title="15、浅拷贝、深拷贝"></a>15、浅拷贝、深拷贝</h4><p>浅拷贝：对基本数据类型进行值传递；如果该字段是引用类型的话，则复制引用但不复制引用的对象  ，因此原始对象及其副本引用同一个对象  </p><p>深拷贝：对基本数据类型进行值传递；如果该字段是引用类型的话，则创建一个新的对象，并复制其内容，赋值给这个新的对象</p><h4 id="16、直接引用与符号引用"><a href="#16、直接引用与符号引用" class="headerlink" title="16、直接引用与符号引用"></a>16、直接引用与符号引用</h4><p>符号引用：在编译时，java类并不知道所引用的类的实际地址，因此只能使用符号引用来代替。</p><p>直接引用：直接引用可以是直接指向目标的指针</p><h4 id="17、对象的序列化和反序列化"><a href="#17、对象的序列化和反序列化" class="headerlink" title="17、对象的序列化和反序列化"></a>17、对象的序列化和反序列化</h4><p>序列化：把对象转换为字节序列的过程称为对象的序列化。保存(持久化)指定的对象，并在将来重新读取被保存的对象。  </p><p>反序列化：把字节序列恢复为对象的过程称为对象的反序列化</p><p>对于不想序列化的变量，使用transient关键词修饰</p><h4 id="18、java泛型"><a href="#18、java泛型" class="headerlink" title="18、java泛型"></a>18、java泛型</h4><p>泛型，即“参数化类型”。就是将类型由原来的具体的类型参数化</p><h4 id="19、Comparator和Comparable的区别"><a href="#19、Comparator和Comparable的区别" class="headerlink" title="19、Comparator和Comparable的区别"></a>19、Comparator和Comparable的区别</h4><p>二者都可以用来实现集合中元素的比较，排序</p><p>comparable将比较逻辑封装在实现了comparable接口对象的内部，通过compareTo方法实现，可以直接使用collection.sort排序</p><p>comparator则在另一个实现了comparator接口的实体类compare方法中实现比较逻辑，使用collection.sort时需要传入这个实体类</p><p>因此，comparable耦合性比较强</p><h3 id="String相关"><a href="#String相关" class="headerlink" title="String相关"></a>String相关</h3><h4 id="1、StringBuffer、StringBuilder、String"><a href="#1、StringBuffer、StringBuilder、String" class="headerlink" title="1、StringBuffer、StringBuilder、String"></a>1、StringBuffer、StringBuilder、String</h4><p>String：由final关键字修饰，即String对象是不可变的，线程安全</p><p>StringBuffer：对象可变，线程安全</p><p>StringBuilder：对象可变，线程不安全</p><h4 id="2、字符串常量池"><a href="#2、字符串常量池" class="headerlink" title="2、字符串常量池"></a>2、字符串常量池</h4><p>字符串常量池位于堆内存中，专门用于存储字符串常量，可以提高内存的使用率，避免开辟多块内存存储相同字符串</p><h4 id="3、String-str-”i”与-String-str-new-String-“i”-一样吗？"><a href="#3、String-str-”i”与-String-str-new-String-“i”-一样吗？" class="headerlink" title="3、String str=”i”与 String str=new String(“i”)一样吗？"></a>3、String str=”i”与 String str=new String(“i”)一样吗？</h4><p>不一样因为，前者会将其分配到常量池中，存储于元空间中。而后者会存放在字符串常量池中，存在于堆中</p><h4 id="4、String-s-new-String-“xyz”-创建了几个字符串对象"><a href="#4、String-s-new-String-“xyz”-创建了几个字符串对象" class="headerlink" title="4、String s = new String(“xyz”);创建了几个字符串对象"></a>4、String s = new String(“xyz”);创建了几个字符串对象</h4><p>两个对象，一个是静态区的”xyz”，一个是用new创建在堆上的对象。</p><p>反射</p><h3 id="异常反射机制"><a href="#异常反射机制" class="headerlink" title="异常反射机制"></a>异常反射机制</h3><h4 id="1、java异常体系"><a href="#1、java异常体系" class="headerlink" title="1、java异常体系"></a>1、java异常体系</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200713160928.png" alt=""></p><p>如果某个方法不能按照正常的途径完成任务，就可以通过另一种路径退出方法。在这种情况下会抛出一个封装了错误信息的对象。此时，这个方法会立刻退出同时不返回任何值。另外，调用这个方法的其他代码也无法继续执行，异常处理机制会将代码执行交给异常处理器  </p><h5 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h5><p>Error：类是指 java 运行时系统的内部错误和资源耗尽错误。应用程序不会抛出该类对象。如果出现了这样的错误，除了告知用户，剩下的就是尽力使程序安全的终止。<br>Exception（RuntimeException、 CheckedException）：RuntimeException 如 ： NullPointerException、ClassCastException； 一个是检查异常CheckedException，如 I/O 错误导致的 IOException、 SQLException。</p><h5 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h5><p>抛出异常有三种形式，一是 throw,一个 throws，还有一种系统自动抛异常 ：</p><p>throws 用在函数上，后面跟的是异常类，可以跟多个； 而 throw 用在函数内，后面跟的是异常对象 </p><h5 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h5><p>try块：用于捕获异常，其后可跟0或多个catch块，如果没有catch块，则必须跟一个finally块</p><p>catch块：用于处理try捕获到的异常</p><p>finally块：无论是否捕获到或者处理了异常，finally块里的语句都会被执行,弱try或者catch语句有return语句时，finally中的语句会被执行，若有返回值会覆盖原始的返回值，如下例子，最终返回0</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value * value;</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value == <span class="number">2</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、java语言的反射机制"><a href="#2、java语言的反射机制" class="headerlink" title="2、java语言的反射机制"></a>2、java语言的反射机制</h4><p>指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制  </p><h5 id="获取calss对象的三种方法"><a href="#获取calss对象的三种方法" class="headerlink" title="获取calss对象的三种方法"></a>获取calss对象的三种方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、调用某个对象的getClass()方法：</span></span><br><span class="line">    Person p=<span class="keyword">new</span> Person(); </span><br><span class="line">    Class clazz=p.getClass();</span><br><span class="line"><span class="comment">//2、调用某个类的 class 属性来获取该类对应的 Class 对象：如</span></span><br><span class="line">    Class clazz=Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//3、使用 Class 类中的 forName()静态方法(最安全/性能最好/最常用) ：如</span></span><br><span class="line">    Class clazz=Class.forName(<span class="string">"类的全路径"</span>);</span><br></pre></td></tr></table></figure><h5 id="获取类方法属性信息"><a href="#获取类方法属性信息" class="headerlink" title="获取类方法属性信息"></a>获取类方法属性信息</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Field 类：Java.lang.reflec 包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值</span></span><br><span class="line">Field[] field=clazz.getDeclaredFields(); </span><br><span class="line"><span class="keyword">for</span>(Field f:field)&#123; </span><br><span class="line">    System.out.println(f.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Method 类：Java.lang.reflec 包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法</span></span><br><span class="line">Method[] method=clazz.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m:method)&#123; </span><br><span class="line">    System.out.println(m.toString()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Constructor 类：Java.lang.reflec 包中的类，表示类的构造方法</span></span><br><span class="line">Constructor[] constructor=clazz.getDeclaredConstructors(); </span><br><span class="line"><span class="keyword">for</span>(Constructor c:constructor)&#123; </span><br><span class="line">    System.out.println(c.toString()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通过反射创建对象的方法"><a href="#通过反射创建对象的方法" class="headerlink" title="通过反射创建对象的方法"></a>通过反射创建对象的方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、使用 Class 对象的 newInstance()方法来创建该 Class 对象对应类的实例，但是这种方法要求 该 Class 对象对应的类有默认的空构造器</span></span><br><span class="line">Person p=(Person) clazz.newInstance();</span><br><span class="line"><span class="comment">//2、先使用 Class 对象获取指定的 Constructor 对象，再调用 Constructor 对象的 newInstance() 方法来创建 Class 对象对应类的实例</span></span><br><span class="line">Constructor c=clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">Person p1=(Person) c.newInstance(<span class="string">"李四"</span>,<span class="string">"男"</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="JAVA8新特性"><a href="#JAVA8新特性" class="headerlink" title="JAVA8新特性"></a>JAVA8新特性</h3><ul><li><p>速度更快 – <strong>红黑树</strong>：HashMap数据结构由数组+链表改成数组+链表+红黑树</p></li><li><p>代码更少 – <strong>Lambda</strong>：允许把函数作为一个方法的参数</p></li><li><p>强大的Stream API – <strong>Stream</strong>： 支持链式编程，为集合类和数组提供了一些方便的操作方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; collected1 = Arrays.asList(<span class="string">"alpha"</span>,<span class="string">"beta"</span>);</span><br><span class="line">        <span class="comment">//对collected1中的元素进行toUpperCase()</span></span><br><span class="line">        <span class="comment">//将一个集合转换成stream后，通过Filter，map对流进行一些操作，最后再转回对应的ji</span></span><br><span class="line">        collected1 = collected1.stream().map(string -&gt; string.toUpperCase()).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collected1);</span><br><span class="line">        String ids = <span class="string">"1,2,3,4,5"</span>;</span><br><span class="line">        List&lt;String&gt; listIds = Arrays.asList(ids.split(<span class="string">","</span>)).stream().filter(e -&gt; Integer.parseInt(e)&gt;<span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">        listIds.forEach(e-&gt; System.out.println(e));</span><br><span class="line">        <span class="comment">//System.out.println(listIds);</span></span><br><span class="line">        <span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//对arr筛选</span></span><br><span class="line">        <span class="keyword">int</span>[]arr1= Arrays.stream(arr).filter(e-&gt;e&gt;<span class="number">3</span>).toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最大化减少空指针异常 – <strong>Optional</strong>： 是一个容器类，代表一个值存在或不存在，原来用null 表示一个值不存在，现在Optional 可以更好的表达这个概念，并且可以避免空指针异常</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;秋招复习之java基础&quot;&gt;&lt;a href=&quot;#秋招复习之java基础&quot; class=&quot;headerlink&quot; title=&quot;秋招复习之java基础&quot;&gt;&lt;/a&gt;秋招复习之java基础&lt;/h2&gt;&lt;h3 id=&quot;JAVA概述&quot;&gt;&lt;a href=&quot;#JAVA概述&quot; cla
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="java基础" scheme="https://xulilei.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>多线程（二）</title>
    <link href="https://xulilei.github.io/2020/07/11/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B2/"/>
    <id>https://xulilei.github.io/2020/07/11/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B2/</id>
    <published>2020-07-11T07:32:32.000Z</published>
    <updated>2020-09-10T12:10:12.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秋招基础复习之多线程（二）"><a href="#秋招基础复习之多线程（二）" class="headerlink" title="秋招基础复习之多线程（二）"></a>秋招基础复习之多线程（二）</h2><h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><p>AQS（AbstractQueuedSynchronizer 类）是一个用来构建锁和同步器的框架，各种 Lock 包中的锁（常用的有 ReentrantLock、 ReadWriteLock，countdownlatch、cyclicbarrier）都是基于 AQS 来构建</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200711154900.png" alt=""></p><h4 id="AQS-工作原理"><a href="#AQS-工作原理" class="headerlink" title="AQS 工作原理"></a>AQS 工作原理</h4><p>AQS的核心思想是，如果被请求的资源空闲，则将当前请求的线程设置为工作线程，并将该资源设置为锁定状态。如果被请求的资源已经被占用，那么就需要一套线程阻塞等待以及唤醒时锁分配的机制，而这个机制是通过CLH队列锁实现的，即将分配不到锁的线程加入到队列中</p><h6 id="CLH锁"><a href="#CLH锁" class="headerlink" title="CLH锁"></a>CLH锁</h6><p>CLH队列是一个虚拟的双向队列，即不存在队列的实例，仅存在节点之间的关联关系，AQS将请求线程封装成CLH队列的一个Node节点，是一个FIFO的过程</p><h4 id="AQS工作步骤"><a href="#AQS工作步骤" class="headerlink" title="AQS工作步骤"></a>AQS工作步骤</h4><p>AQS 在内部定义了一个 volatile int state 变量，表示同步状态：当线程调用 lock 方法时，会通过tryAcquire()独占该锁 ，如果 state=0，说明没有任何线程占有共享资源的锁，可以获得锁并将 state=1；如果 state不为0，先判断是否属于重入的情况，不是的话，则说明有线程目前正在使用共享变量，则该线程必须加入同步队列（CLH）的队尾进行等待，直到占有资源的线程通过tryRelease()对state进行减一操作释放锁到state=0，其他线程才能够去获取该锁。</p><h4 id="AQS公平锁非公平锁"><a href="#AQS公平锁非公平锁" class="headerlink" title="AQS公平锁非公平锁"></a>AQS公平锁非公平锁</h4><ul><li>公平锁：在获取锁时，增加了一个当前线程是否为head结点的判断，当且仅当等待队列为空或者当前线程是等待队列的head结点时才会获取该锁</li><li>非公平锁：那些尝试获取锁且尚未进入等待队列的线程会和等待队列的head节点的线程发生竞争</li></ul><h3 id="AQS组件"><a href="#AQS组件" class="headerlink" title="AQS组件"></a>AQS组件</h3><h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><h5 id="与Synchronized-相比，可重入锁ReentrantLock其实现原理有什么不同？"><a href="#与Synchronized-相比，可重入锁ReentrantLock其实现原理有什么不同？" class="headerlink" title="与Synchronized 相比，可重入锁ReentrantLock其实现原理有什么不同？"></a>与Synchronized 相比，可重入锁ReentrantLock其实现原理有什么不同？</h5><h6 id="从加锁方面：synchronized操作Mark-Word，lock调用AQS的state和FIFO队列来控制加锁"><a href="#从加锁方面：synchronized操作Mark-Word，lock调用AQS的state和FIFO队列来控制加锁" class="headerlink" title="从加锁方面：synchronized操作Mark Word，lock调用AQS的state和FIFO队列来控制加锁"></a>从加锁方面：synchronized操作Mark Word，lock调用AQS的state和FIFO队列来控制加锁</h6><ul><li>Synchronized 通过在对象头中设置标记实现了这一目的，是一种 JVM 原生的锁实现方式</li><li>而 ReentrantLock 以及所有的基于 Lock 接口的实现类，都是通过用一个 volitile 修饰的 int 型变量，并保证每个线程都能拥有对该 int 的可见性和原子修改， 其本质是基于 AQS 框架。</li></ul><h6 id="从锁释放方面"><a href="#从锁释放方面" class="headerlink" title="从锁释放方面"></a>从锁释放方面</h6><ul><li>Synchronized 在 JVM 层面上实现的，不但可以通过一些监控工具监控 Synchronized 的锁定，而且在代码执行出现异常时，JVM 会自动释放锁定；</li><li>Lock 是通过代码实现的，需要通过 unLock() 来释放锁</li></ul><h6 id="从锁粒度方面，ReentrantLock-比-Synchronized-的同步操作更精细"><a href="#从锁粒度方面，ReentrantLock-比-Synchronized-的同步操作更精细" class="headerlink" title="从锁粒度方面，ReentrantLock 比 Synchronized 的同步操作更精细"></a>从锁粒度方面，ReentrantLock 比 Synchronized 的同步操作更精细</h6><ul><li>如等待可中断：当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，对处理执行时间非常长的同步块很有用。</li><li>带超时的获取锁尝试：在指定的时间范围内获取锁，如果时间到了仍然无法获取则返回。</li><li>可以判断是否有线程在排队等待获取锁，以及是否获取成功。</li><li>可以实现公平锁。</li></ul><h4 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h4><p>虽然 ReentrantLock 和 Synchronized 简单实用，但是行为上有一定局限性，要么不占，要么独占。实际应用场景中， 有时候不需要大量竞争的写操作，而是以并发读取为主，为了进一步优化并发操作的粒度，Java 提供了读写锁。  读写锁基于的原理是多个读操作不需要互斥，如果读锁试图锁定时，写锁是被某个线程持有，读锁将无法获得，而只好等待对方操作结束， 这样就可以自动保证不会读取到有争议的数据</p><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p>某个线程通过awit阻塞，其他线程通过countDown方法，每调用一次计数器减1，当计数器为0，主线程awiat放行</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200711172403.png" alt=""></p><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p>CyclicBarrier 叫循环栅栏，它实现让一组线程等待至某个状态之后再全部同时执行，而且当所有等待线程被释放后，CyclicBarrier 可以被重复使用。</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200711172517.png" alt=""></p><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>Semaphore是一个计数信号量，它的作用是限制某段代码块的并发数。通过传入int n表示至多n个线程同时访问，如果超出n则等待，当n=1时，semaphore就是一个syncronized</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>1：降低线程切换所带来的资源消耗</p><p>2：解耦作用：线程的创建于执行分开，方便维护</p><p>3：便于其他线程的复用</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><ul><li>在 Java 中，所谓的线程池中的“线程”，其实是被抽象为了一个静态内部类 Worker，它基于 AQS 实现，存放在线程池 的HashSet<Worker> workers 成员变量中；</li><li>需要执行的任务则存放在BlockingQueue<Runnable> workQueue中。 这样，整个线程池实现的基本思想就是：从workQueue 中不断取出需要执行的任务，放在 Workers 中进行处理。<ul><li>blockingQueue：生产者不断的向队列中生产任务，直到队列满了阻塞生产者线程一直到队列不满。同样的消费者不断的从队列中取出任务消费直到队列为空时阻塞，不为空继续执行。</li></ul></li></ul><h4 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h4><h5 id="阿里的开发手册不允许使用Executors去创建线程池，而是通过ThreadPoolExecutor-？"><a href="#阿里的开发手册不允许使用Executors去创建线程池，而是通过ThreadPoolExecutor-？" class="headerlink" title="阿里的开发手册不允许使用Executors去创建线程池，而是通过ThreadPoolExecutor ？"></a>阿里的开发手册不允许使用Executors去创建线程池，而是通过ThreadPoolExecutor ？</h5><p>通过Executors创建的线程池，通过内部构造方法生成的线程池的初始参数会导致OOM</p><p>FixedThreadPool 和SingleThreadExecutor：初始化请求队列的长度为Integer.MAX_VALUE，可能会堆积大量请求，导致OOM</p><p>CachedThreadPool和ScheduledThreadPool：允许创建线程池的数量为Integer.MAX_VALUE，可能会创建大量线程导致OOM</p><h4 id="ThreadPoolExecutor类分析"><a href="#ThreadPoolExecutor类分析" class="headerlink" title="ThreadPoolExecutor类分析"></a>ThreadPoolExecutor类分析</h4><h5 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h5><h5 id="corePoolSize：线程池的核心线程数。"><a href="#corePoolSize：线程池的核心线程数。" class="headerlink" title="corePoolSize：线程池的核心线程数。"></a>corePoolSize：线程池的核心线程数。</h5><ul><li>在刚创建线程池时线程不会立即启动，到有任务提交时才开始创建线程并逐步线程数目达到corePoolSize</li></ul><h5 id="maximumPoolSize：线程池允许的最大线程数。"><a href="#maximumPoolSize：线程池允许的最大线程数。" class="headerlink" title="maximumPoolSize：线程池允许的最大线程数。"></a>maximumPoolSize：线程池允许的最大线程数。</h5><ul><li>当核心线程满，且阻塞队列也满时，才会判断当前线程数是否小于最大线程数，才决定是否创建新线程</li></ul><h5 id="keepAliveTime：超过核心线程数时闲置线程的存活时间。"><a href="#keepAliveTime：超过核心线程数时闲置线程的存活时间。" class="headerlink" title="keepAliveTime：超过核心线程数时闲置线程的存活时间。"></a>keepAliveTime：超过核心线程数时闲置线程的存活时间。</h5><h5 id="workQueue：任务执行前保存任务的队列，保存由-execute-方法提交的-Runnable-任务。"><a href="#workQueue：任务执行前保存任务的队列，保存由-execute-方法提交的-Runnable-任务。" class="headerlink" title="workQueue：任务执行前保存任务的队列，保存由 execute 方法提交的 Runnable 任务。"></a>workQueue：任务执行前保存任务的队列，保存由 execute 方法提交的 Runnable 任务。</h5><h5 id="handler：线程池允许的最大线程数。"><a href="#handler：线程池允许的最大线程数。" class="headerlink" title="handler：线程池允许的最大线程数。"></a>handler：线程池允许的最大线程数。</h5><ul><li>线程池中的线程已经用完了，无法继续为新任务服务，等待队列也已经排满了，再也塞不下新任务了，这时候我们就需要拒绝策略机制合理的处理这个问题。  </li></ul><h4 id="线程池种类"><a href="#线程池种类" class="headerlink" title="线程池种类"></a>线程池种类</h4><h5 id="SingleThreadExecutor-线程池"><a href="#SingleThreadExecutor-线程池" class="headerlink" title="SingleThreadExecutor 线程池"></a>SingleThreadExecutor 线程池</h5><ul><li>这个线程池只有一个核心线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束， 那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</li></ul><h5 id="FixedThreadPool-线程池"><a href="#FixedThreadPool-线程池" class="headerlink" title="FixedThreadPool 线程池"></a>FixedThreadPool 线程池</h5><ul><li>固定大小的线程池，只有核心线程。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。 线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</li></ul><h5 id="CachedThreadPool-线程池"><a href="#CachedThreadPool-线程池" class="headerlink" title="CachedThreadPool 线程池"></a>CachedThreadPool 线程池</h5><ul><li>无界线程池，如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60 秒不执行任务）线程， 当任务数增加时，此线程池又可以智能的添加新线程来处理任务。</li></ul><h5 id="ScheduledThreadPool-线程池"><a href="#ScheduledThreadPool-线程池" class="headerlink" title="ScheduledThreadPool 线程池"></a>ScheduledThreadPool 线程池</h5><ul><li>核心线程池固定，大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。</li></ul><h4 id="ThreadPoolExecutor-handler拒绝策略"><a href="#ThreadPoolExecutor-handler拒绝策略" class="headerlink" title="ThreadPoolExecutor  handler拒绝策略"></a>ThreadPoolExecutor  handler拒绝策略</h4><p>AbortPolicy ： 直接抛出异常，阻止系统正常运行</p><p>CallerRunsPolicy ： 只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。显然这样做不会真的丢弃任务，但是，任务提交线程的性能极有可能会急剧下降。</p><p>DiscardOldestPolicy ： 丢弃最老的一个请求，也就是即将被执行的一个任务，并尝试再次提交当前任务。</p><p>DiscardPolicy ： 该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。  </p><h4 id="执行execute-⽅法和submit-方法的区别是什么呢？"><a href="#执行execute-⽅法和submit-方法的区别是什么呢？" class="headerlink" title="执行execute()⽅法和submit()方法的区别是什么呢？"></a>执行execute()⽅法和submit()方法的区别是什么呢？</h4><p>execute()：用于提交不需要返回值的任务，所以通常传入Runnable对象</p><p>submit()： 用于提交需要返回值的任务，线程池会返回一个Futrue类型的对象，通过get获取返回值，因此通常传入Callable对象</p><h4 id="创建线程池过程"><a href="#创建线程池过程" class="headerlink" title="创建线程池过程"></a>创建线程池过程</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200711192440.png" alt=""></p><ul><li>如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；</li><li>如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；</li><li>如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</li><li>如果等待队列满了的同时，正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会执行拒绝策略。</li><li>当一个线程完成任务时，它会从队列中取下一个任务来执行。 当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断。 如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。</li></ul><h4 id="任务调度的过程"><a href="#任务调度的过程" class="headerlink" title="任务调度的过程"></a>任务调度的过程</h4><p>维护了一个二级队列，当有外部任务进来时候，会根据任务的优先级进行区分，并存放在不同的优先级队列中，调度线程是一个死循环，会一直执行任务调度</p><p>当线程池队列满时，暂时不进行任务调度，直到线程池队列有空间，遍历二级队列，找到优先级最高的任务将其放入线程池队列中，并结束本轮循环。如果没有高优先级的任务，则先设定一个阈值N，当活跃线程大于N时才会去执行低优先级的任务。设置这个阈值是为了高优先级的任务无法得到优先执行</p><h4 id="具体情况下如何设置线程池线程数"><a href="#具体情况下如何设置线程池线程数" class="headerlink" title="具体情况下如何设置线程池线程数"></a>具体情况下如何设置线程池线程数</h4><p>1、高并发，执行时间短的业务，线程池线程数可以设置为CPU核数+1，减少线程上下文的切换</p><p>2、并发不高、任务执行时间长的计算密集型，和1策略一样，仍然是降低线程池线程数，减少上下文切换带来的开小</p><p>3、并发不高、任务执行时间长的IO密集型，可以增大线程池数量，因为io密集型不涉及cpu，因此可以让cpu尽可能多的利用</p><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>ThreadLocal，线程本地存储， ThreadLocal 的作用是提供线程内的局部变量， 这种变量只在本线程的生命周期内起作用</p><h4 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h4><p>ThreadLocal类中有一个静态内部类ThreadLocalMap，相当于一个哈希表，用private Entry[ ] table来存储数据，其中Entry是一个实现了弱引用（下次GC会被回收）的内部类，它的key为弱引用，目的是为了在GC时防止内存泄漏。而value是强引用，GC是会产生key为null，值为value无法回收的内存，造成内存泄露，ThreadLocalMap会在key回收时，自动清理掉key为null的记录</p><h3 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h3><p>以AtomicInteger为例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> <span class="comment">//获取当前的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> newValue)</span><span class="comment">//获取当前的值，并设置新的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span><span class="comment">//获取当前的值，并⾃增</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndDecrement</span><span class="params">()</span> <span class="comment">//获取当前的值，并⾃减</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> delta)</span> <span class="comment">//获取当前的值，并加上预期的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> <span class="comment">//如果输⼊的数值等于预期值，则以原⼦⽅式将该值设置为输⼊值（update）</span></span></span><br></pre></td></tr></table></figure><h4 id="AtomicInteger原理"><a href="#AtomicInteger原理" class="headerlink" title="AtomicInteger原理"></a>AtomicInteger原理</h4><p>AtomicInteger主要利用CAS+Volatile+Native方法来保证原子操作，通过本地方法objectFieldO!set()拿到原来值的内存地址，再拿到Volatile修饰的value，最后再通过CAS来进行最终更新值的操作，足以保证在任何时刻任何线程拿到的都是该变量的最新值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;秋招基础复习之多线程（二）&quot;&gt;&lt;a href=&quot;#秋招基础复习之多线程（二）&quot; class=&quot;headerlink&quot; title=&quot;秋招基础复习之多线程（二）&quot;&gt;&lt;/a&gt;秋招基础复习之多线程（二）&lt;/h2&gt;&lt;h3 id=&quot;AQS&quot;&gt;&lt;a href=&quot;#AQS&quot; c
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="多线程" scheme="https://xulilei.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程（一）</title>
    <link href="https://xulilei.github.io/2020/07/10/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://xulilei.github.io/2020/07/10/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-07-10T07:16:32.000Z</published>
    <updated>2020-07-27T04:58:14.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秋招基础复习之多线程（一）"><a href="#秋招基础复习之多线程（一）" class="headerlink" title="秋招基础复习之多线程（一）"></a>秋招基础复习之多线程（一）</h2><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><h4 id="线程和进程的区别？"><a href="#线程和进程的区别？" class="headerlink" title="线程和进程的区别？"></a>线程和进程的区别？</h4><p>进程是系统资源分配的最小单位，线程是CPU调度的基本单位</p><p>线程不能看成独立应用，而进程可以</p><p>进程有独立的地址空间，相互不影响，而线程没有独立的地址空间，只是进程的不同执行路径</p><p>进程的切换开销比线程大</p><h4 id="Java进程和线程的关系"><a href="#Java进程和线程的关系" class="headerlink" title="Java进程和线程的关系"></a>Java进程和线程的关系</h4><p>运行一个程序会产生一个进程，一个进程至少一个线程</p><p>每个进程对应一个JVM实例，多个线程共享JVM的堆</p><h4 id="线程的状态-6种"><a href="#线程的状态-6种" class="headerlink" title="线程的状态(6种)"></a>线程的状态(6种)</h4><p>初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。</p><p>运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。</p><p>阻塞(BLOCKED)：表示线程阻塞于锁。</p><p>等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断)不会被分配CPU执行时间，由Object.wait()和Thread.join()导致</p><p>超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。</p><p>终止(TERMINATED)：表示该线程已经执行完毕</p><h4 id="start和run方法的区别"><a href="#start和run方法的区别" class="headerlink" title="start和run方法的区别"></a>start和run方法的区别</h4><p>run()方法只是Thread的一个普通方法的调用，会继续使用当前线程执行该方法</p><p>start()方法会创建一个新的线程并启动,start()方法会调用JVM的StartThread方法创建一个子线程，并且通过thread_entry方法取调用子线程中的run方法</p><p>所有线程都是通过start方法开启的</p><h4 id="Thread类和Runnable接口是什么关系"><a href="#Thread类和Runnable接口是什么关系" class="headerlink" title="Thread类和Runnable接口是什么关系?"></a>Thread类和Runnable接口是什么关系?</h4><p>Thread是实现了Runnable接口的类，使得run支持多线程</p><p>因为类的单一继承性，推荐多使用Runnable接口</p><p>Runnable需要通过构造:Thread t = new Thread(new Runnable())    t.start()启动</p><p>实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的</p><h4 id="如何实现处理线程的返回值"><a href="#如何实现处理线程的返回值" class="headerlink" title="如何实现处理线程的返回值"></a>如何实现处理线程的返回值</h4><p>1：主线程等待法(缺点是需要自己实现循环的等待方法，变量多的话代码臃肿)</p><p>2：使用Thread类的join()阻塞当前线程以等待子线程处理完毕，缺点是不能更精细的处理，只能等待join()线程全部执行完毕</p><p>3：通过Callable接口实现：FutureTask和线程池获取</p><ul><li>利用FutureTask获取: FutureTask&lt;&gt; task = new FutureTask&lt;&gt;(new MyCallable())，这里的MyCallable必须实现Callable接口,然后new Thread(task).start()开启新线程，调用task.get();可以或者返回值</li><li>利用线程池获取: ExecutorService newCachedThreadPool = Executors.newCachedThreadPool(); 然后调用线程池的提交方法Future<string> future = newCachedThreadPool.submit(new MyCallable()); 返回一个Future，调用future.get()获取返回值</string></li></ul><h4 id="sleep-和wait-的区别"><a href="#sleep-和wait-的区别" class="headerlink" title="sleep()和wait()的区别"></a>sleep()和wait()的区别</h4><p>sleep是Thread类的方法，wait是Object类中定义的方法，也是native中的方法</p><p>sleep()方法可以在任何地方使用，而wait()方法只能在synchionized方法或synchronized块中使用</p><p>最本质区别：</p><ul><li>Thread.sleep只会让出CPU，不会导致锁行为的改变</li><li>Object.wait()不仅让出CPU，还会释放已经占有的同步资源锁，并进入等待池中，不会再竞争锁，需要通过notify或者notifyAll()唤醒</li></ul><h4 id="锁池和等待池的区别"><a href="#锁池和等待池的区别" class="headerlink" title="锁池和等待池的区别"></a>锁池和等待池的区别</h4><p>锁池：假设某个线程想进入一个对象的synchronized方法，而这个对象锁却被其他线程所占有，该线程就会进入一个地方取等待锁的释放，这个地方就是锁池</p><p>等待池：假设线程A调用了某个对象的wait方法，线程A就会释放该对象的锁，同时进入该对象的等待池中，进入到等待池中的线程不会取竞争该对象的锁，除非被         notify唤醒</p><p>notify()和notifyAll()的区别</p><ul><li>notify只会随机选取一个处于等待池中的线程进入锁池去竞争获取锁的机会</li><li>notifyAll会让所有处于等待池的线程全部进入锁池去竞争获取锁的机会</li></ul><h4 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt()"></a>interrupt()</h4><p>调用interrupt()，通知线程应该中断了</p><ul><li>1：如果线程处于被阻塞状态，那么线程将立即退出被阻塞状态，并且抛出一个InterruptedException异常。</li><li>2：如果线程处于正常活动状态，那么会将线程的中断标志设置为true，设置中断标志的线程将继续正常运行，不受影响,在运行任务时，我们已经经常检查本线程的中断标志位，如果被设置了中断标志，就自行停止线程</li></ul><p>调用stop()，是让线程强制执行，已经不再推荐使用</p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><h5 id="线程死锁和进程死锁"><a href="#线程死锁和进程死锁" class="headerlink" title="线程死锁和进程死锁"></a>线程死锁和进程死锁</h5><p>线程死锁：线程A想要持有线程B持有的资源1，线程B想要持有线程A持有的资源2，互相等待，造成死锁</p><p>进程死锁的四大条件</p><ul><li>互斥条件：即任意时刻，一个资源只能有一个线程持有</li><li>请求与保持：在一个线程请求资源而阻塞的时候，不会释放自己已经持有的资源</li><li>不可剥夺：线程已经获得的资源不能被其他线程强行剥夺，只能等待自己释放</li><li>循环等待：若干进程之间形成一种头尾相接的循环等待的关系</li></ul><h5 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h5><p>破坏进程死锁的四大条件</p><ul><li>互斥条件：这个做不到</li><li>请求与保持：一次性申请所有用到的资源，申请不到线程不工作</li><li>不可剥夺：申请其他资源时，如果一段时间申请不到则主动释放已持有的资源</li><li>循环等待：破坏循环等待</li></ul><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><h4 id="线程安全的主要诱因"><a href="#线程安全的主要诱因" class="headerlink" title="线程安全的主要诱因"></a>线程安全的主要诱因</h4><ul><li>1：存在共享数据（也成临界资源）</li><li>2：存在多条线程共同操作这些共享数据</li></ul><h4 id="解决线程安全问题的根本方法"><a href="#解决线程安全问题的根本方法" class="headerlink" title="解决线程安全问题的根本方法"></a>解决线程安全问题的根本方法</h4><ul><li>同一时刻有且只有一个线程在操作共享数据，其他线程必须等到该线程处理完数据后再对共享数据进行操作</li></ul><h4 id="互斥锁的特性"><a href="#互斥锁的特性" class="headerlink" title="互斥锁的特性"></a>互斥锁的特性</h4><ul><li>互斥性：在同一时间只允许一个线程持有某个对象锁</li><li>可见性：必须确保在锁被释放之前，对共享变量所做的修改，对于随后获得该锁的另一线程是可见的</li></ul><h4 id="什么是可重入性-，为什么说-Synchronized是可重入锁？"><a href="#什么是可重入性-，为什么说-Synchronized是可重入锁？" class="headerlink" title="什么是可重入性 ，为什么说 Synchronized是可重入锁？"></a>什么是可重入性 ，为什么说 Synchronized是可重入锁？</h4><ul><li>从互斥性的设计上来说，当一个线程试图操作一个由其他线程持有的对象锁时，将会处于阻塞状态，但当一个线程再次请求自己持有对象的锁时，这种情况属于重入。可重入性是锁的一个基本要求，如果不能够重入，会发生自己锁死自己的情况。</li></ul><h4 id="获取对象锁的两种用法"><a href="#获取对象锁的两种用法" class="headerlink" title="获取对象锁的两种用法"></a>获取对象锁的两种用法</h4><ul><li>同步代码块，synchronized(this)，锁的是括号中的实例对象，代码块的外面，方法的里面还是异步的。</li><li>同步非静态方法（synchronized method），锁的是当前对象的实例对象，方法整个都是同步的，需要获得当前对象的锁</li></ul><h4 id="获取类锁的两种用法"><a href="#获取类锁的两种用法" class="headerlink" title="获取类锁的两种用法"></a>获取类锁的两种用法</h4><ul><li>同步代码块 synchronized(类.class) 锁的是小括号()中的类对象(Class对象)</li><li>同步静态方法 synchronized static method 锁的是当前对象的类对象(Class对象)</li></ul><h4 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h4><ul><li><p>Java对象在内存中由三部分组成，对象头，实例数据，对齐填充，其中对象头的是synchronized的核心，其中的Mark Word部分存储着锁信息，包括锁的类型，状态标志，通过在对象头设置标记，从而达到了获取锁和释放锁的目的</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200710155159.png" alt=""></p></li><li><p>monitor:每个java对象天生自带了一把看不见的锁,就是monitor锁，在java虚拟机中，monitor是由ObjectMonitor(在JVM中由C++)实现的，查看JVM中ObjectMonitor源码，里面有一个count_计数器</p></li><li><p>sychronized方法：生成的字节码文件中会多一个ACC_SYNCHRONIZED标志位，当一个线程访问方法时，会先取检查是否存在ACC_SYNCHRONIZED标志，如果存在，执行线程将先获取monitor，获取成功后才能执行方法体，方法执行完后再释放monitor。方法执行期间，其他任何线程都无法再获得同一个monitor对象</p></li><li><p>synchronized代码块：加了synchronized关键字的代码段，生成的字节码文件中会多出monitorenter和monitorexit两条指令，每个monitor维护着一个记录着次数的计数器_count，未被拥有的monitor的该计数器为0，当一个线程执行monitorenter指令，当前线程试图获取对象锁，如果此时的monitor的count计数器为0，线程成功获得monitor，计算器加1，当同一个线程执行了monitorexit指令，计算器减1，当计算器为0时，monitor便被释放.</p></li></ul><h4 id="JDK6以后对于synchronized的优化"><a href="#JDK6以后对于synchronized的优化" class="headerlink" title="JDK6以后对于synchronized的优化"></a>JDK6以后对于synchronized的优化</h4><h5 id="自旋锁和自适应自旋锁"><a href="#自旋锁和自适应自旋锁" class="headerlink" title="自旋锁和自适应自旋锁"></a>自旋锁和自适应自旋锁</h5><ul><li>许多情况下，共享数据的锁定状态持续时间较短，切换线程不值得，通过让线程执行忙循环等待锁的释放，不让出CPU、</li><li>缺点：若锁被其他线程长时间占用，会带来许多性能上的开销</li><li>自适应自旋锁：自旋的次数不再固定，由前一次在同一个锁上的自旋时间以及锁的拥有者的状态来决定</li></ul><h5 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h5><ul><li>如果某个锁不可能被其他线程引用，比如局部变量，由于栈私有，JVM会自动消除内部对象的锁</li></ul><h5 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h5><ul><li>如果检测到一连串的操作都是对同一个对象加锁，JVM会将锁的范围粗化到这一连串操作的外部</li></ul><h4 id="synchronized锁的四种状态以及升级过程"><a href="#synchronized锁的四种状态以及升级过程" class="headerlink" title="synchronized锁的四种状态以及升级过程"></a>synchronized锁的四种状态以及升级过程</h4><h5 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h5><ul><li>无锁–偏向锁–轻量级锁–重量级锁</li></ul><h5 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁:"></a>偏向锁:</h5><ul><li>如果一个线程获得了锁，那么锁就进入偏向模式，Mark Word结构也变为了偏向锁结构，当该线程再次请求锁时，只需要检查Mark Word的锁标记位为偏向锁以及当前线程的ID等于Mark Work 的ThreadID即可。</li><li>不适用于锁竞争比较激烈的多线程场合</li></ul><h5 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h5><ul><li>轻量级锁由偏向锁升级来的，当第二个线程加入锁的争用时，偏向锁会升级为轻量级锁</li><li>每个线程都有自己的栈针，会在栈针中生成一个LockRecord指针，通过CAS去争夺这个锁，LR修改成功的线程获得该锁，而另一个线程会自动进入循环CAS获取这个锁的过程，该过程被称为自旋，因此轻量级锁也被称为自旋锁</li></ul><h5 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h5><ul><li>轻量级锁自旋锁由于一直处于循环CAS的过程，会占据一定量的系统资源，自JDK6后JVM会自适应控制自选次数，当自选次数超过该阈值，则会自动升级为重量级锁。</li><li>升级成重量级锁后，会形成一个队列，没有竞争到锁的线程会进入该队列，且不消耗系统资源</li></ul><h5 id="三种锁的优缺点以及使用场景"><a href="#三种锁的优缺点以及使用场景" class="headerlink" title="三种锁的优缺点以及使用场景"></a>三种锁的优缺点以及使用场景</h5><ul><li>偏向锁的优缺点以及使用场景<ul><li>优点：加锁和解锁不需要CAS操作，没有额外的性能消耗，和非同步方法相比性能差距较小</li><li>缺点：如果线程间存在锁竞争，会带来额外的锁撤销的消耗</li><li>使用场景：只有一个线程访问同步块或者同步方法</li></ul></li><li>轻量级锁的优缺点以及使用场景<ul><li>优点：竞争的线程不会阻塞，提高了响应速度</li><li>缺点：若线程长时间抢不到锁，自旋会消耗CPU性能</li><li>使用场景：线程交替执行同步块或者同步方法的场景</li></ul></li><li>重量级锁的优缺点以及使用场景<ul><li>优点：线程竞争不适用自旋，不会消耗CPU</li><li>缺点：线程阻塞，相应时间缓慢，在多线程下，频繁的获取释放锁，会带来巨大的性能消耗</li><li>使用场景：追求吞吐量，同步块或同步方法执行时间较长的场景</li></ul></li></ul><h3 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h3><h4 id="指令重排序"><a href="#指令重排序" class="headerlink" title="指令重排序"></a>指令重排序</h4><p>指令重排序是编译器和处理器为了高效对程序进行优化的手段，它只能保证程序执行的结果时正确的，但是无法保证程序的操作顺序与代码顺序一致。这在单线程中不会构成问题，但是在多线程中就会出现问题。</p><h4 id="指令重排序需要满足的条件"><a href="#指令重排序需要满足的条件" class="headerlink" title="指令重排序需要满足的条件"></a>指令重排序需要满足的条件</h4><ul><li>在单线程环境下不能改变程序运行的结果</li><li>不存在数据依赖关系的</li><li>不满足happens-before原则</li></ul><h4 id="Java内存模型JMM"><a href="#Java内存模型JMM" class="headerlink" title="Java内存模型JMM"></a>Java内存模型JMM</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/JMM1.png" alt=""></p><h5 id="JMM中的主内存（main-memory）"><a href="#JMM中的主内存（main-memory）" class="headerlink" title="JMM中的主内存（main memory）"></a>JMM中的主内存（main memory）</h5><ul><li>存储Java实例对象</li><li>包括成员变量，类信息，常量，静态变量</li><li>属于数据共享的区域，多线程并发操作会引发线程安全问题</li></ul><h5 id="JMM中的工作内存（L1-L2-L3）"><a href="#JMM中的工作内存（L1-L2-L3）" class="headerlink" title="JMM中的工作内存（L1,L2,L3）"></a>JMM中的工作内存（L1,L2,L3）</h5><ul><li>存储当前方法的局部变量信息，局部变量对其他线程不可见</li><li>字节码行号指示器，Native方法信息</li><li>属于线程私有的数据区域，不存在线程安全问题</li></ul><h5 id="读写过程"><a href="#读写过程" class="headerlink" title="读写过程"></a>读写过程</h5><ul><li>将主存中的数据加载到工作内存中</li><li>CPU对工作内存中的数据进行修改</li><li>将每个线程工作内存中修改后的值刷新到主内存中</li></ul><h4 id="Volatile原理"><a href="#Volatile原理" class="headerlink" title="Volatile原理"></a>Volatile原理</h4><p>关键字 volatile 是 Java 虚拟机提供的最轻量级的同步机制。当一个变量被定义成 volatile 之后，具备两种特性：</p><ul><li>1.保证此变量对所有线程的可见性。当一条线程修改了这个变量的值，新值对于其他线程是可以立即得知的。</li><li>2.禁止指令重排序。普通变量仅仅能保证在该方法执行过程中，得到正确结果，但是不保证程序代码的执行顺序。</li></ul><h5 id="如何实现上述两种特性？"><a href="#如何实现上述两种特性？" class="headerlink" title="如何实现上述两种特性？"></a>如何实现上述两种特性？</h5><ul><li>线程可见性：主要通过缓存一致性协议和总线锁两种方式实现<ul><li>立即将线程中工作内存的数据写会到主内存中</li><li>其他处理器数据监测判断自己线程工作区内存中的值是不是过期了，如果过期了，就会将对应的数据置为无效。而当处理器对这个数据进行修改时，会重新从内存中把数据读取到缓存中进行处理。</li></ul></li><li>禁止指令重排序：<ul><li>代码级别：对变量加上volatile修饰</li><li>字节码级别：会生成ACC_volatile指令</li><li>JVM级别：通过JVM的内存屏障禁止内存屏障前后的指令执行重排序优化</li></ul></li></ul><h5 id="DCL单例模式需不需要volatile指令？"><a href="#DCL单例模式需不需要volatile指令？" class="headerlink" title="DCL单例模式需不需要volatile指令？"></a>DCL单例模式需不需要volatile指令？</h5><p>需要，因为在new一个对象的过程中对象并不是刚被创建就会将构造函数中的参数赋值给变量，而是会有一个半初始化的状态，此时如果发生指令重排序会使得别的线程拿到这个半初始化的对象，造成BUG，因此需要双重检测（对象创建的过程见<a href="https://xulilei.github.io/2020/07/06/秋招复习之JVM/">https://xulilei.github.io/2020/07/06/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BJVM/</a>）</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="keyword">private</span> Volatile <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>{};</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//第一次检测</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>)</span>{</span><br><span class="line">                <span class="comment">//第二次检测</span></span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>){</span><br><span class="line">                    instance=<span class="keyword">new</span> Singleton();</span><br><span class="line">                }         </span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Syncronized和volatile对比"><a href="#Syncronized和volatile对比" class="headerlink" title="Syncronized和volatile对比"></a>Syncronized和volatile对比</h3><ul><li>volatile本质是告诉JVM当前变量在工作内存中的值是不确定的，需要从主存中读取；synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住直到该线程完成变量操作为止。</li><li>volatile仅能使用在变量上；synchronized则可以使用在变量，方法和类级别</li><li>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞</li><li>volatile仅能实现变量的修改的可见性，不能保持原子性；而synchronized则可以保证变量修改的可见性和原子性</li></ul><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p><img src="https://gitee.com/xulilei/pic/raw/master/20200710180358.png" alt=""></p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><ul><li>底层通过Unsafe类实现原子性操作，包括三个操作数——内存地址V，预期原值A和新值B</li><li>将内存地址的值与预期原值进行比较，如果匹配，那么处理器将该位置的值，自动更新为新值，否则会进行自旋，然后再重新以当前的值为原值再次比较，这也是自旋锁实现的基础</li></ul><h4 id="乐观锁悲观锁"><a href="#乐观锁悲观锁" class="headerlink" title="乐观锁悲观锁"></a>乐观锁悲观锁</h4><ul><li>悲观锁Syncronized：是典型的悲观锁，总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。</li><li>乐观锁CAS：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据</li></ul><h4 id="CAS缺点（乐观锁的缺点）"><a href="#CAS缺点（乐观锁的缺点）" class="headerlink" title="CAS缺点（乐观锁的缺点）"></a>CAS缺点（乐观锁的缺点）</h4><ul><li>如果自旋时间长，则CPU资源开销很大</li><li>只能保证一个共享变量的原子操作</li><li>ABA问题<ul><li>如果内存地址V初次读取的值为A，并且在准备赋值的时候检查到也为A，如果它曾经被改为了B，但是后来又被改成了A，那么CAS就会误认为它从来没被改变过</li><li>解决：给值加上一个版本号每当修改一次将值加1，或者使用AtomicStampedReference（ 版本戳）</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;秋招基础复习之多线程（一）&quot;&gt;&lt;a href=&quot;#秋招基础复习之多线程（一）&quot; class=&quot;headerlink&quot; title=&quot;秋招基础复习之多线程（一）&quot;&gt;&lt;/a&gt;秋招基础复习之多线程（一）&lt;/h2&gt;&lt;h3 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; cla
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="多线程" scheme="https://xulilei.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="https://xulilei.github.io/2020/07/08/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8B%E9%9B%86%E5%90%88/"/>
    <id>https://xulilei.github.io/2020/07/08/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8B%E9%9B%86%E5%90%88/</id>
    <published>2020-07-08T04:59:33.000Z</published>
    <updated>2020-09-10T02:46:00.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="秋招基础复习之集合"><a href="#秋招基础复习之集合" class="headerlink" title="秋招基础复习之集合"></a>秋招基础复习之集合</h1><p><img src="https://gitee.com/xulilei/pic/raw/master/20200708144032.png" alt=""></p><p>集合类存放于 Java.util 包中， 主要有 3 种： set(集）、 list(列表包含 Queue）和 map(映射)。Collection： Collection 是集合 List、 Set、 Queue 的最基本的接口。Iterator：迭代器，可以通过迭代器遍历集合中的数据。Map：是映射表的基础接口 。</p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><img src="https://gitee.com/xulilei/pic/raw/master/Collection1.png" alt=""></p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="ArrayList（数组，线程不安全）"><a href="#ArrayList（数组，线程不安全）" class="headerlink" title="ArrayList（数组，线程不安全）"></a>ArrayList（数组，线程不安全）</h4><p>ArrayList 是最常用的 List 实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔， 当数组大小不满足时需要增加存储能力，就要将已经有数组的数据复制到新的存储空间（1.5倍扩容）中。 当从 ArrayList 的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。 </p><h4 id="Vector（-数组，线程安全）"><a href="#Vector（-数组，线程安全）" class="headerlink" title="Vector（ 数组，线程安全）"></a>Vector（ 数组，线程安全）</h4><p>Vector 与 ArrayList 一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写 Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问 ArrayList 慢，扩容机制与arraylist相似，但是扩容的大小被称为扩容因子，可以自己定义一般为1倍。</p><h5 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h5><p>继承自vector，是一个先进后出的数据结构</p><h4 id="LinkList（链表，线程不安全）"><a href="#LinkList（链表，线程不安全）" class="headerlink" title="LinkList（链表，线程不安全）"></a>LinkList（链表，线程不安全）</h4><p>LinkedList 底层使用的数据结构是一个双向链表，，由于有每个元素之间有指针指向，因此适合增删，而查找需要从头结点开始遍历，因此不适合快速查找，添加元素直接在相应的位置添加，没有初始化大小因此没有扩容机制。</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="HashSet（Hash表）"><a href="#HashSet（Hash表）" class="headerlink" title="HashSet（Hash表）"></a>HashSet（Hash表）</h4><p>set最主要的功能是去重，底层是一个hashmap，key存储的是hashset的值，value是一个静态的present对象，由于hashmap的key是唯一的，因此达到去重的功能。 HashSet 存储元素的顺序并不是按照存入时的顺序（和 List 显然不同） 而是按照哈希值来存的所以取数据也是按照哈希值取得。元素的哈希值是通过元素的hashcode 方法来获取的, HashSet 首先判断两个元素的哈希值，如果哈希值一样，接着会比较equals 方法 如果 equls 结果为 true ， HashSet 就视为同一个元素。如果 equals 为 false 就不是同一个元素，以链表的形式。</p><h4 id="TreeSet（二叉树）"><a href="#TreeSet（二叉树）" class="headerlink" title="TreeSet（二叉树）"></a>TreeSet（二叉树）</h4><p>底层使用的是treeMap，TreeSet()是使用二叉树的原理对新添加的对象按照指定的顺序排序（升序、降序），每增加一个对象都会进行排序，将对象插入的二叉树指定的位置，如果key已经存在，则采用覆盖的做法，达到了去重的目的<br>Integer 和 String 对象都可以进行默认的 TreeSet 排序，而自定义类的对象是不可以的， 自己定义的类必须实现 Comparable 接口，才可以正常使用。</p><h4 id="LinkHashSet（-HashSet-LinkedHashMap）"><a href="#LinkHashSet（-HashSet-LinkedHashMap）" class="headerlink" title="LinkHashSet（ HashSet+LinkedHashMap）"></a>LinkHashSet（ HashSet+LinkedHashMap）</h4><p>对于 LinkedHashSet 而言，它继承与 HashSet、又基于 LinkedHashMap 来实现的。由于底层使用 LinkedHashMap 来保存所有元素 ，因此可以通过双向链表来记录插入的顺序</p><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><p>队列主要遵循FIFO的规则，其下主要有dqueue和priorityQueue，duque是一个双端队列，可以实现从队首和队尾添加元素删除元素</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><img src="https://gitee.com/xulilei/pic/raw/master/Map.png" alt=""></p><h3 id="HashMap底层实现"><a href="#HashMap底层实现" class="headerlink" title="HashMap底层实现"></a>HashMap底层实现</h3><h4 id="JDK1-7实现"><a href="#JDK1-7实现" class="headerlink" title="JDK1.7实现"></a>JDK1.7实现</h4><p>数组+链表</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200708161943.png" alt=""></p><p>HashMap 的主干是一个数组，然后数组中每个元素是一个单向链表。上图中，每个绿色的实体是嵌套类 Entry 的实例， Entry 包含四个属性： key, value, hash 值和用于单向链表的 next。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认大小</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"><span class="comment">//最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">//默认负载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">//存储元素的数组</span></span><br><span class="line"><span class="keyword">transient</span> Entry[] table;</span><br><span class="line"><span class="comment">//键值对数量</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">//阈值，size大于阈值触发扩容</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"><span class="comment">//负载因子默认是0.75</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"><span class="comment">//修改次数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> modCount;</span><br></pre></td></tr></table></figure><h4 id="Put的过程"><a href="#Put的过程" class="headerlink" title="Put的过程"></a>Put的过程</h4><p><strong>面试答</strong>：</p><ul><li>容器为空时，调用初始化方法，找到大于threshold的最小二次幂数</li><li>如果键为空，则放在数组下标为0的位置，如果已经存在就覆盖旧值</li><li>根据key得到hash值，再通过indexFor方法得到数组下标</li><li>若该数组没有数据，则新建链表一个节点</li><li>若该数组下标有数据，则遍历链表，若value存在，则用新value覆盖oldvalue，</li><li>若value不存在，则采用头插法新建一个链表节点</li><li>上述新建过程需要判断size是否大于threshold，触发相应的扩容过程</li></ul><h5 id="resize过程"><a href="#resize过程" class="headerlink" title="resize过程"></a>resize过程</h5><ul><li>创建一个新的Hash Table，两倍大小</li><li>将Old Hash Table上的数据迁移到New Hash Table上</li><li>transfer()，采用头插法，rehash，用hash&amp;（扩容后的length-1）</li><li>重新计算threshold</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//resize()方法中的transfer()，采用头插法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">      <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">          <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">             Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">             <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">             e.next = newTable[i];</span><br><span class="line">             newTable[i] = e;</span><br><span class="line">             e = next;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h6 id="造成死循环的原因"><a href="#造成死循环的原因" class="headerlink" title="造成死循环的原因"></a>造成死循环的原因</h6><p>在扩容的过程中，将原来hashMap数组中的链表转移到新的hashmap中时，采用的是头插法进行指针操作，会将原hashmap的链表顺序反转，但如果此时再进来一个线程，会导致next指针指向一个环，形成死循环</p><h4 id="JDK1-8实现"><a href="#JDK1-8实现" class="headerlink" title="JDK1.8实现"></a>JDK1.8实现</h4><p>数组+链表+红黑树，当链表中的元素超过了 8 个以后，会将链表转换为红黑树  </p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200709110657.png" alt=""></p><h5 id="put过程"><a href="#put过程" class="headerlink" title="put过程"></a>put过程</h5><h5 id="文字描述"><a href="#文字描述" class="headerlink" title="文字描述"></a>文字描述</h5><h6 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h6><p><img src="https://gitee.com/xulilei/pic/raw/master/20180719172426832.png" alt=""></p><h5 id="resize过程-1"><a href="#resize过程-1" class="headerlink" title="resize过程"></a>resize过程</h5><p>与1.7相差不多</p><p>主要是transfer()不一样</p><p>采用尾插法，rehash采用hash与数组长度右移一位，为0下标不变，为1下标加上原来长度</p><h3 id="ConCurrentHashMap底层实现"><a href="#ConCurrentHashMap底层实现" class="headerlink" title="ConCurrentHashMap底层实现"></a>ConCurrentHashMap底层实现</h3><h4 id="hashTable实现"><a href="#hashTable实现" class="headerlink" title="hashTable实现"></a>hashTable实现</h4><p>表锁</p><h4 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h4><p>基于<strong>reentrantlock+segment+HashEntry</strong>实现</p><h5 id="put过程-1"><a href="#put过程-1" class="headerlink" title="put过程"></a>put过程</h5><p>与hashmap不同的是在定位存储位置时，需要通过2次hash定位</p><ul><li>第一次key的hash来定位segment的位置，如果该segment还没有初始化，即通过cas操作进行初始化操作</li><li>第二次hash定位真正要插入的hashEntry数组索引，利用继承reentrantlock获得的tryLock方法获取锁</li><li>获取成功，遍历链表，key值存在更新value，不存在则setNext(first)在 头部插入新节点</li><li>获取失败，则以自旋的方式继续条用trylock获取锁</li></ul><h5 id="get过程"><a href="#get过程" class="headerlink" title="get过程"></a>get过程</h5><p>get通过大量的volatile关键字，保证读取到的数据是最新的，过程也是先定位到segment再定位到hashEntry的具体位置</p><h5 id="resize过程-2"><a href="#resize过程-2" class="headerlink" title="resize过程"></a>resize过程</h5><p>使用头插法的方式迁移，由于segment锁的存在，这里不会是线程安全的</p><ul><li>创建一个两倍长度大小的新数组</li><li>遍历旧数组，找到第一个后续所有节点扩容后index不变的节点，记为LastRun，并将其迁移到新数组中</li><li>接着处理lastRun之前的节点，将其逐一迁移到新数组中</li></ul><h4 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h4><p>1.8的ConcurrentHashMap取消了分段锁，采用CAS和syncronized来保证并发安全，syncronized只锁定一个node链表的首节点</p><h5 id="put过程-2"><a href="#put过程-2" class="headerlink" title="put过程"></a>put过程</h5><ul><li>根据key的hash值，找到对应的数组索引节点，如果还没有初始化，则通过cas进行初始化工作</li><li>若该节点的值为moved说明正在扩容，则加入扩容过程，对该桶的节点进行转移（扩容时的写操作）</li><li>对桶中第一个节点加锁，若获取成功，遍历node节点，key值存在更新value，不存在则采用尾插法加入新节点</li><li>若长度达到红黑树转化阈值，则转化为红黑树</li></ul><h5 id="get过程-1"><a href="#get过程-1" class="headerlink" title="get过程"></a>get过程</h5><ul><li>计算hash值，定位到该table索引位置</li><li>遍历node节点，匹配则返回value，没有返回null</li><li>如果该数组位置正在扩容，通过forwardingNode定位到对应位置，帮助扩容，完成后读取数据</li></ul><h5 id="resize过程-3"><a href="#resize过程-3" class="headerlink" title="resize过程"></a>resize过程</h5><p>一个线程发起扩容过程后，其他线程发起的读写请求遇到forwardingNode时会加入扩容过程</p><h3 id="HashMap面试问题总结"><a href="#HashMap面试问题总结" class="headerlink" title="HashMap面试问题总结"></a>HashMap面试问题总结</h3><h4 id="1、为什么hashmap的长度是2的幂次方？"><a href="#1、为什么hashmap的长度是2的幂次方？" class="headerlink" title="1、为什么hashmap的长度是2的幂次方？"></a>1、为什么hashmap的长度是2的幂次方？</h4><p>首先不可能直接用散列化后的值直接作为数组下标，而是需要对长度进行取模运算，再得到下标。这个数组下标的计算方法为（n-1）&amp;hash。之所以使用与操作是因为与操作的性能优于取余。而当length是2的幂次方时，hash%length==hash&amp;（length-1），因此长度是2的幂次方。</p><h4 id="2、hashmap1-7与1-8的区别"><a href="#2、hashmap1-7与1-8的区别" class="headerlink" title="2、hashmap1.7与1.8的区别"></a>2、hashmap1.7与1.8的区别</h4><h5 id="1-结构不同"><a href="#1-结构不同" class="headerlink" title="(1)结构不同"></a>(1)结构不同</h5><p>1.7采用数组+链表，1.8采用数组+链表+红黑树</p><h6 id="为什么采用红黑树"><a href="#为什么采用红黑树" class="headerlink" title="为什么采用红黑树"></a>为什么采用红黑树</h6><ul><li>链表在数据量大的时候查询会变得很缓慢</li><li>对于二叉搜索树，可能存在极度不均衡退化成链表或者层数过多的情况</li><li>红黑树相比于AVL树并不追求极致的平衡，因此在增删的时候不需要频繁的旋转 </li></ul><h5 id="2-插入位置不同"><a href="#2-插入位置不同" class="headerlink" title="(2)插入位置不同"></a>(2)插入位置不同</h5><p>JDK1.7用的是头插法，而JDK1.8及之后使用的都是尾插法，因为JDK1.7是用单链表进行的纵向延伸，当采用头插法时可以避免遍历链表造成的性能损失，但是会容易出现逆序及多线程下环形链表死循环问题。但是在JDK1.8之后因为加入了红黑树使用尾插法，插入效率提升，且能够避免出现逆序和链表死循环的情况</p><h5 id="3-扩容数据存储位置的计算方式不一样"><a href="#3-扩容数据存储位置的计算方式不一样" class="headerlink" title="(3)扩容数据存储位置的计算方式不一样"></a>(3)扩容数据存储位置的计算方式不一样</h5><p>1.7通过扰动之后的hash&amp;（length-1）得到数组下标，1.8在扩容中只用判断原来的 hash 值与数组长度左移动的一位(扩大一倍)按位与操作是 0 或 1 就行，0 的话索引就不变，1 的话索引变成原索引加上扩容前数组</p><h5 id="4-扩容时数据的插入时机不同"><a href="#4-扩容时数据的插入时机不同" class="headerlink" title="(4)扩容时数据的插入时机不同"></a>(4)扩容时数据的插入时机不同</h5><p>1.7是先扩容后插入（先判断达不达到扩容要求），1.8是先插入后扩容（先插入后再判断需不需要扩容）</p><h5 id="3、为什么HashMap是线程不安全的，实际会如何体现"><a href="#3、为什么HashMap是线程不安全的，实际会如何体现" class="headerlink" title="3、为什么HashMap是线程不安全的，实际会如何体现"></a>3、为什么HashMap是线程不安全的，实际会如何体现</h5><p>第一，如果多个线程同时使用put方法添加元素:假设正好存在两个put的key发生了碰撞(hash值一样)，那么根据HashMap的实现，这两个key会添加到数组的同一个位置，这样最终就会发生其中一个线程的put的数据被覆盖</p><p>第二、hashmap1.7在扩容时，由于采取头插法会导致死循环</p><h5 id="4、为什么要使用syncronized来代替reentrantlock"><a href="#4、为什么要使用syncronized来代替reentrantlock" class="headerlink" title="4、为什么要使用syncronized来代替reentrantlock"></a>4、为什么要使用syncronized来代替reentrantlock</h5><p>主要原因是由于锁的粒度降低了，1.7中使用的是segment锁，范围大。但在1.8中由于只锁定数组的头结点，因此syncronized的效率并不低</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;秋招基础复习之集合&quot;&gt;&lt;a href=&quot;#秋招基础复习之集合&quot; class=&quot;headerlink&quot; title=&quot;秋招基础复习之集合&quot;&gt;&lt;/a&gt;秋招基础复习之集合&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/xulilei/pic/ra
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="集合" scheme="https://xulilei.github.io/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="https://xulilei.github.io/2020/07/06/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BJVM/"/>
    <id>https://xulilei.github.io/2020/07/06/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8BJVM/</id>
    <published>2020-07-06T07:07:16.000Z</published>
    <updated>2020-09-07T11:33:35.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="秋招基础复习之JVM"><a href="#秋招基础复习之JVM" class="headerlink" title="秋招基础复习之JVM"></a>秋招基础复习之JVM</h1><h2 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h2><p><img src="https://gitee.com/xulilei/pic/raw/master/20200707193840.png" alt=""></p><h2 id="JVM-GC垃圾回收"><a href="#JVM-GC垃圾回收" class="headerlink" title="JVM-GC垃圾回收"></a>JVM-GC垃圾回收</h2><h3 id="知识点概览"><a href="#知识点概览" class="headerlink" title="知识点概览"></a>知识点概览</h3><p><img src="https://gitee.com/xulilei/pic/raw/master/20200706165214.png" alt=""></p><h3 id="判断对象可回收"><a href="#判断对象可回收" class="headerlink" title="判断对象可回收"></a>判断对象可回收</h3><h4 id="引用计数法（JVM中不用）"><a href="#引用计数法（JVM中不用）" class="headerlink" title="引用计数法（JVM中不用）"></a>引用计数法（JVM中不用）</h4><p>给对象添加一个计数器，每当有一个地方引用计数器+1，反之失效-1，当计数器为0的时候，则代表该对象不太可能会被继续用到，则判断该对象为可回收对象，但是会出现循环引用的问题</p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>为了解决引用计数法的循环引用问题， Java 使用了可达性分析的方法。通过一系列的“GC roots”对象作为起点搜索。如果在“GC roots”和一个对象之间没有可达路径，则称该对象是不可达的。 </p><p> GC roots：类加载器，Thread，虚拟机栈的引用，方法区static变量的引用，本地方法栈的引用等等</p><h4 id="强软弱虚引用"><a href="#强软弱虚引用" class="headerlink" title="强软弱虚引用"></a>强软弱虚引用</h4><h5 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h5><p>在 Java 中最常见的就是强引用， 把一个对象赋给一个引用变量，这个引用变量就是一个强引用。当一个对象被强引用变量引用时，它处于可达状态，它是不可能被垃圾回收机制回收的，即使该对象以后永远都不会被用到 JVM 也不会回收。因此强引用是造成 Java 内存泄漏的主要原因之一。</p><h5 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h5><p>软引用需要用 SoftReference 类来实现，对于只有软引用的对象来说，当系统内存足够时它不会被回收，当系统内存空间不足时它会被回收。软引用通常用在对内存敏感的程序中。</p><h5 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h5><p>弱引用需要用 WeakReference 类来实现，它比软引用的生存期更短，对于只有弱引用的对象来说，只要垃圾回收机制一运行，不管 JVM 的内存空间是否足够，总会回收该对象占用的内存。</p><h5 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h5><p>不能单独使用，必须和引用队列联合使用。 虚引用的主要作用是跟踪对象被垃圾回收的状态。  </p><h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><h4 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><h5 id="新生代的复制算法"><a href="#新生代的复制算法" class="headerlink" title="新生代的复制算法"></a>新生代的复制算法</h5><p>eden、survivorFrom  SurvicorTo按照8比1比1划分新生代</p><h6 id="1：eden、-survivorFrom-复制到-SurvivorTo，年龄-1"><a href="#1：eden、-survivorFrom-复制到-SurvivorTo，年龄-1" class="headerlink" title="1：eden、 survivorFrom 复制到 SurvivorTo，年龄+1"></a>1：eden、 survivorFrom 复制到 SurvivorTo，年龄+1</h6><p>首先，把 Eden 和 survivorFrom 区域中存活的对象复制到  SurvivorTo 区域（如果有对象的年龄以及达到了老年的标准15，则赋值到老年代区），同时把这些对象的年龄+1（如果  SurvivorTo 不够位置了就放到老年区）； </p><h6 id="2：清空-eden、-survivorFrom"><a href="#2：清空-eden、-survivorFrom" class="headerlink" title="2：清空 eden、  survivorFrom"></a>2：清空 eden、  survivorFrom</h6><p>然后，清空 Eden 和  survivorFrom 中的对象  </p><h6 id="3：-SurvivorTo和-ServicorFrom-互换"><a href="#3：-SurvivorTo和-ServicorFrom-互换" class="headerlink" title="3： SurvivorTo和 ServicorFrom 互换"></a>3： SurvivorTo和 ServicorFrom 互换</h6><p>最后， SurvivorTo 和 survivorFrom互换，原 SurvivorTo 成为下一次 GC 时的 survivorFrom<br>区。  </p><h5 id="老年代的标记-整理算法"><a href="#老年代的标记-整理算法" class="headerlink" title="老年代的标记-整理算法"></a>老年代的标记-整理算法</h5><p>首先扫描一次所有老年代，标记出存活的对象，让所有存活对象都向一端移动，然后直接清理掉端边界以外的内存</p><h4 id="分区收集算法"><a href="#分区收集算法" class="headerlink" title="分区收集算法"></a>分区收集算法</h4><p>分区算法则将整个堆空间划分为连续的不同小区间, 每个小区间独立使用, 独立回收. 这样做的好处是可以控制一次回收多少个小区间 , 根据目标停顿时间, 每次合理地回收若干个小区间(而不是整个堆), 从而减少一次 GC 所产生的停顿。  </p><h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><p><img src="https://gitee.com/xulilei/pic/raw/master/garbage.png" alt=""></p><h4 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h4><h5 id="Serial：单线程收集器，采用复制算法"><a href="#Serial：单线程收集器，采用复制算法" class="headerlink" title="Serial：单线程收集器，采用复制算法"></a>Serial：单线程收集器，采用复制算法</h5><p>它不但只会使用一个 CPU 或一条线程去完成垃圾收集工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。它简单高效，对于限定单个 CPU 环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率，因此 Serial垃圾收集器依然是 java 虚拟机运行在 <strong><em>Client</em></strong> 模式下默认的新生代垃圾收集器。  </p><h5 id="Parnew：serial收集器的多线程版本，采用复制算法"><a href="#Parnew：serial收集器的多线程版本，采用复制算法" class="headerlink" title="Parnew：serial收集器的多线程版本，采用复制算法"></a>Parnew：serial收集器的多线程版本，采用复制算法</h5><p>除了使用多线程进行垃圾收集之外，其余的行为和 Serial 收集器完全一样， ParNew 垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程，ParNew垃圾收集器是很多 java虚拟机运行在 <strong><em>Server</em></strong> 模式下新生代的默认垃圾收集    </p><h5 id="Parallel-Scavenge：复制算法，可控制吞吐量的收集器"><a href="#Parallel-Scavenge：复制算法，可控制吞吐量的收集器" class="headerlink" title="Parallel Scavenge：复制算法，可控制吞吐量的收集器"></a>Parallel Scavenge：复制算法，可控制吞吐量的收集器</h5><p>采用复制算法，多线程并行，这些与parnew相似，它的独特之处在于它关注的点是一个可控制的吞吐量，通过参数MaxGCPauseMillis可以控制收集器最大停顿时间，GCTimeRatio可以直接设置吞吐量的大小，以及UseAdaptiveSizePolicy开启GC自适应调节策略，将gc细节交给JVM完成，这是parnew所没有的  </p><h4 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h4><h5 id="Serial-Old：serial收集器的老年代版本，使用标记-整理算法"><a href="#Serial-Old：serial收集器的老年代版本，使用标记-整理算法" class="headerlink" title="Serial Old：serial收集器的老年代版本，使用标记-整理算法"></a>Serial Old：serial收集器的老年代版本，使用标记-整理算法</h5><p>工作时会暂停用户线程</p><h5 id="Parallel-Old：Parallel-Scavenge收集器的老年代版本，多线程，标记-整理算法"><a href="#Parallel-Old：Parallel-Scavenge收集器的老年代版本，多线程，标记-整理算法" class="headerlink" title="Parallel Old：Parallel Scavenge收集器的老年代版本，多线程，标记-整理算法"></a>Parallel Old：Parallel Scavenge收集器的老年代版本，多线程，标记-整理算法</h5><p>工作时会暂停用户线程</p><h5 id="CMS：采用标记-清除算法"><a href="#CMS：采用标记-清除算法" class="headerlink" title="CMS：采用标记-清除算法"></a>CMS：采用标记-清除算法</h5><p>由于耗时最长的并发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作， 所以总体上来看CMS 收集器的内存回收和用户线程是一起并发地执行。 </p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200706195251.png" alt=""></p><h6 id="第一步-初始标记"><a href="#第一步-初始标记" class="headerlink" title="第一步-初始标记"></a>第一步-初始标记</h6><p>只是标记一下 GC Roots 能直接关联的对象，速度很快，仍然需要暂停所有的工作线程。  </p><h6 id="第二步-并发标记"><a href="#第二步-并发标记" class="headerlink" title="第二步-并发标记"></a>第二步-并发标记</h6><p>进行 GC Roots 跟踪的过程，和用户线程一起工作，不需要暂停工作线程  </p><h6 id="第三步-重新标记"><a href="#第三步-重新标记" class="headerlink" title="第三步-重新标记"></a>第三步-重新标记</h6><p>为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，仍然需要暂停所有的工作线程。 </p><h6 id="第四步-并发清除"><a href="#第四步-并发清除" class="headerlink" title="第四步-并发清除"></a>第四步-并发清除</h6><p>清除 GC Roots 不可达对象，和用户线程一起工作，不需要暂停工作线程。 </p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>1、并发清理阶段产生的没有被回收掉的浮动垃圾，从而导致另一次full GC的产生。</p><p>2、并发清楚会产生内存碎片</p><h5 id="Garbage-first：-分区收集以及采用标记-整理算法"><a href="#Garbage-first：-分区收集以及采用标记-整理算法" class="headerlink" title="Garbage first： 分区收集以及采用标记-整理算法"></a>Garbage first： 分区收集以及采用标记-整理算法</h5><p>基于标记-整理算法，不产生内存碎片。可以非常精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收。</p><p>G1 收集器避免全区域垃圾收集，它把堆内存划分为大小固定的几个独立区域，并且跟踪这些区域的垃圾收集进度，同时在后台维护一个优先级列表，每次根据所允许的收集时间， 优先回收垃圾最多的区域。区域划分和优先级区域回收机制，确保 G1 收集器可以在有限时间获得最高的垃圾收集效率。  </p><h2 id="JVM类加载机制"><a href="#JVM类加载机制" class="headerlink" title="JVM类加载机制"></a>JVM类加载机制</h2><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><p><img src="https://gitee.com/xulilei/pic/raw/master/20200707183837.png" alt=""></p><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>加载是类加载过程中的一个阶段， 这个阶段会在内存中生成一个代表这个类的 java.lang.Class 对象  </p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>这一阶段的主要目的是为了确保 Class 文件的字节流中包含的信息语法符合当前虚拟机的要求  </p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>准备阶段是正式为类变量分配内存并设置类变量的初始值阶段，即在方法区中分配这些变量所使用的内存空间。</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。</p><h6 id="符号引用"><a href="#符号引用" class="headerlink" title="符号引用"></a>符号引用</h6><p>符号引用就是 class 文件中的：  CONSTANT_Class_info、 CONSTANT_Field_info、 CONSTANT_Method_info 等类型的常量，在编译时，java类并不知道所引用的类的实际地址，因此只能使用符号引用来代替。</p><h6 id="直接引用"><a href="#直接引用" class="headerlink" title="直接引用"></a>直接引用</h6><p>直接引用可以是指向目标的指针。如果有了直接引用，那引用的目标必定已经在内存中存在  </p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段由 JVM 主导。到了初始化阶段，才开始真正执行类中定义的 Java 程序代码 </p><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><h4 id="类加载器的种类"><a href="#类加载器的种类" class="headerlink" title="类加载器的种类"></a>类加载器的种类</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200707190324.png" alt=""></p><p>启动类加载器(Bootstrap ClassLoader)：负责加载核心库java.*，由C++编写。</p><p>扩展类加载器(Extension ClassLoader)：负责加载扩展库，由java编写。</p><p>应用程序类加载器(Application ClassLoader)：负责加载程序所在目录，java编写。</p><p>以及自定义加载器。</p><h4 id="双亲委派机制与全盘委派机制"><a href="#双亲委派机制与全盘委派机制" class="headerlink" title="双亲委派机制与全盘委派机制"></a>双亲委派机制与全盘委派机制</h4><p>1、双亲委派机制：先自下而上的委托父类加载目标类，只有当父类加载器反馈自己无法完成这个请求的时候，子类加载器会自上而下的会尝试自己去加载  </p><p>2、全盘委派机制：该类所依赖的类都由该类的类加载器加载</p><h4 id="类加载方式"><a href="#类加载方式" class="headerlink" title="类加载方式"></a>类加载方式</h4><p>new 隐式加载，支持传参，loadclass与forname显式加载，不支持传参。springioc可以懒加载</p><h3 id="对象创建的步骤区别于类加载的过程"><a href="#对象创建的步骤区别于类加载的过程" class="headerlink" title="对象创建的步骤区别于类加载的过程"></a>对象创建的步骤区别于类加载的过程</h3><p>1、虚拟机遇到new命令时，首先检查这个对应的类能否在常量池定位到一个符号引用</p><p>2、判断这个类是否已经被加载解析（解析让符号引用变成直接引用）和初始化，如果没有则进行相应的类加载过程</p><p>3、为新生对象在java堆中分配内存空间（指针碰撞和空闲链表），这一步是半初始化（单例的双重检测机制就是为了防止半初始化）</p><p>4、设置对象头相关数据（GC分代年龄、对象的哈希吗、锁等元数据信息）–java对象模型</p><p>5、执行init方法，赋值</p><h3 id="对象分配流程"><a href="#对象分配流程" class="headerlink" title="对象分配流程"></a>对象分配流程</h3><p>1、首先尝试栈上分配，即如果该对象的作用域不会逃逸出该方法之外，则可以将其分配在栈上，随着方法的结束而销毁，不用通过GC收集</p><p>2、若失败则采用tlab分配，会先构造一种线程私有的堆空间，哪怕这块堆空间特别小，但是只要有，就可以每个线程在分配对象到堆空间时，先分配到自己所属的那一块堆空间中，避免同步带来的效率问题，从而提高分配效率</p><p>3、若还是失败，则正常的分配至eden区，若太大则直接进入老年代</p><h2 id="JVM核心参数"><a href="#JVM核心参数" class="headerlink" title="JVM核心参数"></a>JVM核心参数</h2><p>-Xms：最小堆</p><p>-Xmx：最大堆</p><p>-Xmn：新生代内存</p><p>-Xss：栈大小</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;秋招基础复习之JVM&quot;&gt;&lt;a href=&quot;#秋招基础复习之JVM&quot; class=&quot;headerlink&quot; title=&quot;秋招基础复习之JVM&quot;&gt;&lt;/a&gt;秋招基础复习之JVM&lt;/h1&gt;&lt;h2 id=&quot;JVM内存模型&quot;&gt;&lt;a href=&quot;#JVM内存模型&quot; class
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="JVM" scheme="https://xulilei.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>计网</title>
    <link href="https://xulilei.github.io/2020/07/05/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8B%E8%AE%A1%E7%BD%91/"/>
    <id>https://xulilei.github.io/2020/07/05/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0%E4%B9%8B%E8%AE%A1%E7%BD%91/</id>
    <published>2020-07-05T07:39:30.000Z</published>
    <updated>2020-09-10T07:52:12.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="秋招基础复习之计网"><a href="#秋招基础复习之计网" class="headerlink" title="秋招基础复习之计网"></a>秋招基础复习之计网</h1><h3 id="7-层模型主要包括："><a href="#7-层模型主要包括：" class="headerlink" title="7 层模型主要包括："></a>7 层模型主要包括：</h3><ul><li>物理层：设备之间的比特流传输。 </li><li>数据链路层：主要将从物理层接收的数据进行 MAC 地址（网卡的地址）的封装与解封装。在这一层工作的设备是交换机，数据通过<strong><em>交换机</em></strong>来传输。 主要协议为ARP协议，提供IP 地址到对应的硬件地址提供动态映射<ul><li>ARP协议：IP地址到对应的硬件地址提供动态映射</li><li>ARP欺骗：主机的地址映射是基于高速缓存的，动态更新的。地址刷新是有时间限制的。可以通过下次更新之前修改计算机上的地址缓存，造成网络不通 </li></ul></li><li>网络层：主要将从下层接收到的数据进行 IP 地址（例 192.168.0.1)的封装与解封装。在这一层工作的设备是<strong><em>路由器</em></strong>，常把这一层的数据叫做数据包。</li><li>传输层：定义了一些传输数据的协议和端口号（WWW 端口 80 等），如：<strong><em>TCP</em></strong>，<strong><em>UDP</em></strong>协议。 主要是将从下层接收的数据进行分段进行传输，到达目的地址后在进行重组。 常常把这一层数据叫做段。 </li><li>会话层：通过传输层（端口号：传输端口与接收端口）建立数据传输的通路。主要在你的系统之间发起会话或或者接受会话请求（设备之间需要互相认识可以是IP也可以是 MAC 或者是主机名） </li><li>表示层：主要是进行对接收的数据进行解释、加密与解密、压缩与解压缩等（也就是把计算机能够 识别的东西转换成人能够能识别的东西（如图片、声音等））</li><li>应用层：主要是一些终端的应用，比如说FTP（各种文件下载），WEB（IE浏览），QQ之类的（你 就把它理解成我们在电脑屏幕上可以看到的东西．就 是终端应用）。</li></ul><h3 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h3><p>TCP协议：是一种可靠的，面向连接的基于字节流的传输控制协议</p><p>UDP协议：是一种不可靠的，面向报文的用户数据报协议</p><p>IP协议：解决了在虚拟网络中数据报传输路径的问题，使得网络层屏蔽底层细节，专注于网络层数据的转发，根据路由表完成数据包的发送</p><h4 id="TCP三次握手四次挥手"><a href="#TCP三次握手四次挥手" class="headerlink" title="TCP三次握手四次挥手"></a>TCP三次握手四次挥手</h4><h5 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200705160254.png" alt=""></p><h6 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h6><p>首先，客户端会发送一个syn=1，以及本次握手的序列号seq=x给服务端，并进入同步已发送的状态，服务端接收到客户端的连接请求后，会回发一个syn=1，确认号ACK=1，以及第二次握手的序列号seq=y，第一次握手的序列号加1的确认号给客户端，并进入同步已收到的状态，客户端收到服务端的信息后会检查确认号ACK是否为1，以及确认序列号是否正确，如果正确，则会回发ack=1，第三次握手的序列号，以及第二次握手的序列号加1的确认序列给服务端并进入建立连接状态，同样的服务器在接受到消息后会检查ack确认号是否为1以及确认序列号是否正确，如果正确则进入建立连接状态，自此3次握手结束，连接建立。</p><h6 id="为什么要三次握手？"><a href="#为什么要三次握手？" class="headerlink" title="为什么要三次握手？"></a>为什么要三次握手？</h6><p>即为什么A还要发送一次确认请求给服务器B，这是为了防止已经失效的连接请求突然又传送到了B。存在这样的一种情况，当A发送连接请求给B，此时由于网络拥堵造成服务器B没有及时收到连接请求，因此A又重新发送了一个请求给B，正常建立连接后，拥堵的第一次请求又传送到了服务器B，如果不采用三次握手，那么B又会发送确认连接的请求给B，又会建立一个新的连接，会浪费许多资源</p><h6 id="syn攻击"><a href="#syn攻击" class="headerlink" title="syn攻击"></a>syn攻击</h6><p>在第一次握手后，服务器向客户端发送确认请求信息后需要等待客户端的再次确认信息，如果此时客户端掉线，服务器会一直尝试发送5次请求信息，会浪费大量资源，可能导致正常的syn请求无法完成。</p><p>那么如何防护呢？</p><p>当syn队列满后，通过tcp_syncookies参数回发syn_cookie给客户端，如果正常连接，客户端会回发这个syn_cookie给服务器，此时即使syn队列满了，依然可以正常建立连接</p><h6 id="建立连接后客户端出现问题怎么办？"><a href="#建立连接后客户端出现问题怎么办？" class="headerlink" title="建立连接后客户端出现问题怎么办？"></a>建立连接后客户端出现问题怎么办？</h6><p>服务器会发送保持会话报文，若一直没有响应一定次数，服务器会中断此次会话</p><h5 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200705164801.png" alt=""></p><h6 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h6><p>首先，客户端会发送一个fin=1，第一次挥手的序列号seq=x给服务端，并进入终止等待1状态，服务店在接受到来自客户端请求终止连接的请求后会回发一个ack=1，第二次挥手的序列号seq=y，以及第一次挥手的序列号加1的确认序列给客户端并进入等待关闭状态，客户端收到消息后检查ack是否为1以及确认序列是否正确，若正确会进入终止等待2状态。当服务端发送完所有的数据后，会向客户端发送fin=1，确认号ack=1，第三次挥手的序列号，以及第一次挥手序列号+1的确认序列给客户端，并进入最终确认状态，客户端收到后再次检查信息是否正确，若正确回回发一个确认号ack=1，第四次挥手的序列号，以及第三次挥手的序列号+1的确认序列给服务端，并进入timewait状态，等待2nmsl后会自动关闭，客户端收到信息后确认是否正确，若正确则立即关闭连接，自此四次挥手结束，连接关闭</p><h6 id="为什么要四次挥手？"><a href="#为什么要四次挥手？" class="headerlink" title="为什么要四次挥手？"></a>为什么要四次挥手？</h6><p>因为TCP是全双工的，客户端给服务器发送信息的同时，服务器也可以给客户端发送，之所以需要四次挥手，是因为在客户端发送结束请求后，可能服务器的数据还没有传输完毕，因此需要2个等待关闭的状态确保所有数据传输完毕，因此需要四次挥手</p><h6 id="为什么客户端还要等待2msl？"><a href="#为什么客户端还要等待2msl？" class="headerlink" title="为什么客户端还要等待2msl？"></a>为什么客户端还要等待2msl？</h6><p>因为服务器给客户端发送的第二次FIN请求后，客户端回发给服务器的最终确认可能丢失，如果服务器没有收到最终确认，则会再次发送FIN请求给客户端，那么在客户端等待关闭的这2MSL里再次收到请求后，会再次发送最终请求，使得服务器能够正常准确的关闭</p><h4 id="如何理解IP协议的不可靠和无连接？"><a href="#如何理解IP协议的不可靠和无连接？" class="headerlink" title="如何理解IP协议的不可靠和无连接？"></a>如何理解IP协议的不可靠和无连接？</h4><p>不可靠：指的是不能保证数据报能成功地到达目的地。 发生错误时候，丢弃该数据包，发送 ICMP 消息给信源端，可靠性由上层提供。 </p><p>无状态：IP 不维护关于后续数据报的状态信息。 体现在，IP 数据可以不按顺序发送和接收。A 发送连续的数据报， 来回路由选择可能不一样，路线也不一样，到达先后顺序也不一样。</p><h4 id="TCP如何保证可靠性？"><a href="#TCP如何保证可靠性？" class="headerlink" title="TCP如何保证可靠性？"></a>TCP如何保证可靠性？</h4><ul><li>确认机制，发送报文后停止发送，等待确认后再发送</li><li>重发机制，没有及时收到确认，将重发数据段。 </li><li>拥塞控制，当网络拥塞时启用<ul><li>慢启动（窗口从1开始逐渐增大）</li><li>快速重传（收到失序报文立刻重传）</li><li>快速恢复（收到重复确认可能没有拥堵，因此不执行慢启动而是快速恢复）</li><li>拥塞避免（门限设为一半后开始慢启动算法）</li></ul></li><li>排序，有专门的序列号字段，丢弃重复数据</li><li>流量控制，通过滑动窗口实现<ul><li>TCP链接的数据量只能限制在这个滑动窗口范围内，这个滑动窗口根据情况变化</li></ul></li></ul><h4 id="TCP与UDP区别"><a href="#TCP与UDP区别" class="headerlink" title="TCP与UDP区别"></a>TCP与UDP区别</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200705171843.png" alt=""></p><p>tcp对应的协议有：FTP、HTTP</p><p>udp对应的协议有：DNS</p><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><h4 id="http请求报文和响应报文"><a href="#http请求报文和响应报文" class="headerlink" title="http请求报文和响应报文"></a>http请求报文和响应报文</h4><h5 id="http请求报文"><a href="#http请求报文" class="headerlink" title="http请求报文"></a>http请求报文</h5><p>由请求行（get/post方法，url的path路径，http版本）、请求头（键值对）、请求体（body）</p><h6 id="get-post区别"><a href="#get-post区别" class="headerlink" title="get/post区别"></a>get/post区别</h6><p>1、get请求是通过URL传参，而post请求被放在请求体中，因此决定了get不能代替post发送大量数据</p><p>2、get请求的安全性不如post，是由于get请求在url中会被看到</p><p>3、get请求是幂等的，post不幂等（幂等就是多次操作结果一样，get查询多次肯定一样，post是改肯定不一样）</p><h5 id="http响应报文"><a href="#http响应报文" class="headerlink" title="http响应报文"></a>http响应报文</h5><p>由状态码（Status Code）、HTTP头部（编码格式，过期时间）、响应体（响应的内容）</p><h6 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h6><p>1XX：请求已接受一部分，正等待剩余部分</p><p>2XX：正常接收</p><p>3XX：重定向，进一步操作，301永久重定向，302暂时移动到新地址</p><p>4XX：客户端请求出错，400服务器不理解请求的语法，403服务器拒绝请求，404服务器找不到请求的页面</p><p>5XX：服务端出错，500服务器错误，503服务器维护</p><h5 id="转发和重定向的区别"><a href="#转发和重定向的区别" class="headerlink" title="转发和重定向的区别"></a>转发和重定向的区别</h5><p>转发：是由服务端进行的页面跳转，跳转完后响应到客户端，服务器地址不变</p><p>重定向：是由客户端进行的页面跳转，服务器地址改变，请求了两次</p><p>需要保留请求数据的使用转发，其他使用重定向，即查询使用转发，增删改使用重定向</p><h4 id="http请求过程"><a href="#http请求过程" class="headerlink" title="http请求过程"></a>http请求过程</h4><p>1、DNS域名解析器解析出IP地址</p><p>2、TCP连接（三次握手）</p><p>3、浏览器发送HTTP请求</p><p>4、服务器处理请求并返回HTTP响应</p><p>5、浏览器解析渲染页面</p><p>6、释放连接（四次挥手）</p><h4 id="DNS解析过程"><a href="#DNS解析过程" class="headerlink" title="DNS解析过程"></a>DNS解析过程</h4><p>1、浏览器首先检查自身缓存有没有解析过这个ip地址，如果有则解析结束</p><p>2、如果浏览器中没有，会从操作系统的hosts文件中查找有无缓存</p><p>3、若仍然没有，才会真正的请求本地域名服务器，到这里大约80%的域名解析都可以完成</p><p>4、若此时仍然没有解析成功，那么就需要顶级域名服务器请求解析</p><p>5、顶级域名服务器告诉本地域名服务器该去哪个服务器查询</p><p>6、本地域名服务器去对应的服务器查找</p><p>7、将最终结果告诉给主机-</p><h4 id="http长连接，短连接，无状态，HTTP-1-0，HTTP-1-1，HTTP-2-0"><a href="#http长连接，短连接，无状态，HTTP-1-0，HTTP-1-1，HTTP-2-0" class="headerlink" title="http长连接，短连接，无状态，HTTP/1.0，HTTP/1.1，HTTP/2.0"></a>http长连接，短连接，无状态，HTTP/1.0，HTTP/1.1，HTTP/2.0</h4><h5 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h5><p>无状态：。HTTP 是一个无状态的面向连接的协议，所谓的无状态，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。也就是说，打开一个服务器上的网页和上一次打开这个服务器上的网 页之间没有任何联系，无状态不代表 HTTP 不能保 持 TCP 连接，更不能代表 HTTP 使用的是 UDP 协议（无连接）。</p><h5 id="长短连接"><a href="#长短连接" class="headerlink" title="长短连接"></a>长短连接</h5><p>HTTP/1.0 短连接：客户端和服务器每进行一次 HTTP 操作，就建立一次连接，任务结束就中断连接。适用于而像 WEB 网站的http服务</p><p>HTTP/1.1 默认使用长连接：在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据 的 TCP 连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。适用于于操作频繁，点对点的通讯，而且连接数不能太多情况。</p><h5 id="HTTP-1-1和HTTP-2-0区别"><a href="#HTTP-1-1和HTTP-2-0区别" class="headerlink" title="HTTP/1.1和HTTP/2.0区别"></a>HTTP/1.1和HTTP/2.0区别</h5><h6 id="1-1管道传输与-多路复用"><a href="#1-1管道传输与-多路复用" class="headerlink" title="1.1管道传输与 多路复用"></a>1.1管道传输与 多路复用</h6><p>HTTP/1.1使用管道传输，即客户端与服务器建立连接后不用每次等待服务器响应就可发送新的请求，但是服务器仍然会顺序响应。如果某一请求出现问题，那么后面的请求都无法加载，这就会出现队头阻塞的问题。</p><p>在HTTP/2.0中通过多路复用解决了这个问题，即将一个TCP连接分为若干个流（Stream），每个流中可以传输若干消息（Message），这样即使一个请求被阻塞了，也不会影响其他请求</p><h6 id="头部数据压缩"><a href="#头部数据压缩" class="headerlink" title="头部数据压缩"></a>头部数据压缩</h6><p>在HTTP1.1中，消息主体都会经过gzip压缩，但状态行和头部却没有经过任何压缩，直接以纯文本传输。</p><p>HTTP2.0对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。</p><h6 id="传输格式"><a href="#传输格式" class="headerlink" title="传输格式"></a>传输格式</h6><p>2.0采用二进制格式而非文本格式</p><h4 id="HTTP和HTTPS的区别"><a href="#HTTP和HTTPS的区别" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h4><p>1、HTTP是超文本传输协议，是明文传输，而HTTPS则是具有安全协议SSL的加密传输</p><p>2、http是无状态的，而https是有可以进行加密传输，身份认证的</p><p>4、HTTP默认端口是40，HTTPS是443</p><h4 id="https工作步骤"><a href="#https工作步骤" class="headerlink" title="https工作步骤"></a>https工作步骤</h4><p>客户端向服务端发送https请求，请求建立SSL连接</p><p>服务端收到请求会将网站的证书公钥等发送给客户端</p><p>客户端服务端确认SSL连接的安全等级</p><p>客户端向服务端发送根据公钥加密得来的秘钥</p><p>服务端解析秘钥，建立连接</p><h4 id="HTTPS的优缺点"><a href="#HTTPS的优缺点" class="headerlink" title="HTTPS的优缺点"></a>HTTPS的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>1、最主要体现的就是安全性，大大增加了人工攻击的成本</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>多了一层验证，他们它的效率自然比不上http，价格也是考虑的一个因素</p><h4 id="cookie和session的区别"><a href="#cookie和session的区别" class="headerlink" title="cookie和session的区别"></a>cookie和session的区别</h4><h5 id="1、存储位置不同"><a href="#1、存储位置不同" class="headerlink" title="1、存储位置不同"></a>1、存储位置不同</h5><p>cookie的数据信息存放在客户端浏览器上。</p><p>session的数据信息存放在服务器上。</p><h5 id="2、存储方式不同"><a href="#2、存储方式不同" class="headerlink" title="2、存储方式不同"></a>2、存储方式不同</h5><p>cookie中只能保管ASCII字符串，并需要通过编码方式存储为Unicode字符或者二进制数据。</p><p>session中能够存储任何类型的数据，包括且不限于string，integer，list，map等。</p><h5 id="3、隐私策略不同"><a href="#3、隐私策略不同" class="headerlink" title="3、隐私策略不同"></a>3、隐私策略不同</h5><p>cookie对客户端是可见的，别有用心的人可以分析存放在本地的cookie并进行cookie欺骗，所以它是不安全的。</p><p>session存储在服务器上，对客户端是不可见的，不存在敏感信息泄漏的风险。</p><h5 id="4、有效期不同"><a href="#4、有效期不同" class="headerlink" title="4、有效期不同"></a>4、有效期不同</h5><p>开发可以通过设置cookie的属性，达到使cookie长期有效的效果。</p><p>session依赖于名为JSESSIONID的cookie，而cookie JSESSIONID的过期时间默认为-1，只需关闭窗口该session就会失效，因而session不能达到长期有效的效果。</p><h5 id="5、服务器压力不同"><a href="#5、服务器压力不同" class="headerlink" title="5、服务器压力不同"></a>5、服务器压力不同</h5><p>cookie保管在客户端，不占用服务器资源。对于并发用户十分多的网站，cookie是很好的选择。</p><p>session是保管在服务器端的，每个用户都会产生一个session。假如并发访问的用户十分多，会产生十分多的session，耗费大量的内存。</p><h5 id="6、跨域支持上不同"><a href="#6、跨域支持上不同" class="headerlink" title="6、跨域支持上不同"></a>6、跨域支持上不同</h5><p>cookie支持跨域名访问。</p><p>session不支持跨域名访问。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;秋招基础复习之计网&quot;&gt;&lt;a href=&quot;#秋招基础复习之计网&quot; class=&quot;headerlink&quot; title=&quot;秋招基础复习之计网&quot;&gt;&lt;/a&gt;秋招基础复习之计网&lt;/h1&gt;&lt;h3 id=&quot;7-层模型主要包括：&quot;&gt;&lt;a href=&quot;#7-层模型主要包括：&quot; cla
      
    
    </summary>
    
    
      <category term="秋招复习" scheme="https://xulilei.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="计算机网络" scheme="https://xulilei.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>十次方微服务复习</title>
    <link href="https://xulilei.github.io/2020/07/01/%E5%8D%81%E6%AC%A1%E6%96%B9%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A4%8D%E4%B9%A0/"/>
    <id>https://xulilei.github.io/2020/07/01/%E5%8D%81%E6%AC%A1%E6%96%B9%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-07-01T08:17:02.000Z</published>
    <updated>2020-07-05T10:33:01.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用SpringDataJPA完成问答、文章、招聘、交友、吐槽、用户、管理员的增删改以及模糊分页查询"><a href="#利用SpringDataJPA完成问答、文章、招聘、交友、吐槽、用户、管理员的增删改以及模糊分页查询" class="headerlink" title="利用SpringDataJPA完成问答、文章、招聘、交友、吐槽、用户、管理员的增删改以及模糊分页查询"></a>利用SpringDataJPA完成问答、文章、招聘、交友、吐槽、用户、管理员的增删改以及模糊分页查询</h1><p>1、IdWorker：采用推特开源的雪花算法工具类，每秒能产生26W的id，而不产生id碰撞</p><p>SpringDataJpa用法：Dao层接口继承JpaRepository,JpaSpecifationExecutor（复杂查询使用）接口</p><h2 id="模糊分页查询"><a href="#模糊分页查询" class="headerlink" title="模糊分页查询"></a>模糊分页查询</h2><p> 实现条件查询：</p><p>​      3种方式 ：一种是通过在dao层通过nativeQuery编写模糊查询语句，第二种是在dao层通过findBy**Like</p><p>另一种通过service层new Specification构造动态查询语句</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Label&gt; <span class="title">findSearch</span><span class="params">(Label label)</span> </span>{</span><br><span class="line">   <span class="keyword">return</span> labelDao.findAll(<span class="keyword">new</span> Specification&lt;Label&gt;() {</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Label&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>{</span><br><span class="line">          List&lt;Predicate&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">          <span class="comment">//相当于 ****** where labelname like "%label.getLabelname()%"</span></span><br><span class="line">          <span class="keyword">if</span>(label.getLabelname()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getLabelname())){</span><br><span class="line">             <span class="comment">//通过root拿到字段名</span></span><br><span class="line">             Predicate predicate = cb.like(root.get(<span class="string">"labelname"</span>).as(String<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                                         "%" + label.getLabelname() + "%");</span><br><span class="line">              <span class="comment">//一个条件，添加到cb中 </span></span><br><span class="line">              list.add(predicate);</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">//将条件链表转化为数组</span></span><br><span class="line">       Predicate[] parr=<span class="keyword">new</span> Predicate[list.size()];</span><br><span class="line">       list.toArray(parr);</span><br><span class="line">           <span class="comment">//合并所有条件，一起查询</span></span><br><span class="line">       <span class="keyword">return</span> cb.and(parr);</span><br><span class="line">      });</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>实现分页查询</p><p>dao层构建查询方法时传入pageable对象</p><p>service层调用JPA封装的方法时传入page和size，通过PageRequest生成Pgeable对象，service层返回Page对象</p><p>controller调用service方法，并通过之前定义好的分页类，返回给前端</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//dao层</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Label&gt; <span class="title">findAll</span><span class="params">(Pagealbe pageable)</span></span>{</span><br><span class="line">}</span><br><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Label&gt; <span class="title">findAll</span><span class="params">(<span class="keyword">int</span> page,<span class="keyword">int</span> size)</span></span>{</span><br><span class="line">    Pageable pageable=PageRequest.of(page-<span class="number">1</span>,size);</span><br><span class="line">    <span class="keyword">return</span> labelDao.findAll(pageable);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/{page}/{size}"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findAll</span><span class="params">(@PathVariable <span class="keyword">int</span> page,@PathVariable <span class="keyword">int</span> size)</span></span>{</span><br><span class="line">        Page&lt;Label&gt; all = labelService.findAll(page,size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"查询成功"</span>,<span class="keyword">new</span> PageResult&lt;&gt;(all.getTotalElements(),all.getContent()));</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//pageResult类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; rows;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotal</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(<span class="keyword">long</span> total)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getRows</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRows</span><span class="params">(List&lt;T&gt; rows)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.rows = rows;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(<span class="keyword">long</span> total, List&lt;T&gt; rows)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.rows = rows;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="问答模块主要业务"><a href="#问答模块主要业务" class="headerlink" title="问答模块主要业务"></a>问答模块主要业务</h2><p>主要包含两个个表问题表，回答表</p><p>问题表包含：问题id，问题标题，内容，发布日期，最新回复时间、最新回复人，发布人id，点赞数，是否解决</p><p>回答表包含：回答id，问题id，回答内容，回答日期，回答人id等</p><p>完成的主要业务有</p><p>1、最新回答列表：最新回复的问题显示在上方， 按回复时间降序排序</p><p>2、热门回答列表：按回复数降序排序</p><p>3、等待回答列表： 回复数为0按时间升序排序</p><p>在问题展示，会将每个问题的回复通过分页查询的形式返回给前端</p><h2 id="招聘模块主要业务"><a href="#招聘模块主要业务" class="headerlink" title="招聘模块主要业务"></a>招聘模块主要业务</h2><p>招聘微服务主要有两块：企业信息和招聘信息</p><p>企业表包含：id，name，summary，address，ishot等字段</p><p>招聘信息表包含：jobid，jobname，salary，企业id，发布日期，截止日期，状态（0表关闭，1表开启，2表推荐），关注人数等字段</p><p>完成的主要业务有</p><p>1、展示热门企业列表（通过findByIshot查询）</p><p>2、推荐职业列表（通过findTop4ByStateOrderByCreatetimeDesc：查询状态为2并以创建日期降序排序，查询前4条记录）</p><p>3、最新职位列表（findTop12ByStateNotOrderByCreatetimeDesc：查询状态不为0并以创建日期降序排序，查询前12条记录）</p><h2 id="文章模块主要业务"><a href="#文章模块主要业务" class="headerlink" title="文章模块主要业务"></a>文章模块主要业务</h2><p>文章表包含：文章id，类别，用户id，文章标题，内容，发布日期，审核状态（0，1），点赞数，是否热门等</p><p>完成的主要业务有</p><p>1、管理员审核文章：状态改为1</p><p>2、用户对文章进行评论</p><p>3、通过springdataredis对热门文章缓存,可设置缓存时间</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Article <span class="title">findById</span><span class="params">(String id)</span> </span>{</span><br><span class="line">   <span class="comment">//先从缓存中查询当前对象</span></span><br><span class="line">   Article article= (Article) redisTemplate.opsForValue().get(<span class="string">"article_"</span>+id);</span><br><span class="line">   <span class="comment">//如果没有渠道</span></span><br><span class="line">   <span class="keyword">if</span>(article==<span class="keyword">null</span>){</span><br><span class="line">      article = articleDao.findById(id).get();</span><br><span class="line">      <span class="comment">//如果热门存入缓存</span></span><br><span class="line">       <span class="keyword">if</span>(article.getIshot()==<span class="number">1</span>){</span><br><span class="line">           redisTemplate.opsForValue().set(<span class="string">"article_"</span>+id,article);</span><br><span class="line">       }   </span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">return</span> article;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>4、利用Elasticsearch和ik分词器完成文章的搜索功能，利用logstash同步mysql至elasticsearch</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建新的实体类，这里只需要一些必须的字段</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"articleindex"</span>,type = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//@Field注解作用</span></span><br><span class="line">    <span class="comment">//是否能被搜索到</span></span><br><span class="line">    <span class="comment">//是否分词，整体匹配还是分词匹配</span></span><br><span class="line">    <span class="comment">//是否在页面上显示，即数据库中在该实体类中的字段，就是要显示的</span></span><br><span class="line">    <span class="comment">//analyzer,分词</span></span><br><span class="line">    <span class="comment">//searchAnalyzer，搜索</span></span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>,analyzer=<span class="string">"ik_max_word"</span>,searchAnalyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>,analyzer=<span class="string">"ik_max_word"</span>,searchAnalyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Article</span>,<span class="title">String</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Article&gt; <span class="title">findByTitleOrContentLike</span><span class="params">(String title, String content, Pageable pageable)</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//service层</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Page&lt;Article&gt; <span class="title">findByKey</span><span class="params">(String key, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">        Pageable pageable= PageRequest.of(page-<span class="number">1</span>,size);</span><br><span class="line">        <span class="keyword">return</span>  articleDao.findByTitleOrContentLike(key,key,pageable);</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//controller层</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/{key}/{page}/{size}"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findByKey</span><span class="params">(@PathVariable String key,@PathVariable <span class="keyword">int</span> page,@PathVariable <span class="keyword">int</span> size)</span></span>{</span><br><span class="line">        Page&lt;Article&gt;pageData=articleService.findByKey(key,page,size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"搜索成功"</span>,<span class="keyword">new</span> PageResult&lt;Article&gt;(pageData.getTotalElements(),pageData.getContent()));</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="吐槽模块"><a href="#吐槽模块" class="headerlink" title="吐槽模块"></a>吐槽模块</h2><p>吐槽表：_id，内容content，发布时间，用户id，点赞数，上级吐槽id</p><p>使用springdataMongoDB完成的主要业务有</p><p>1、发布吐槽，如果是在别人下面吐槽需要将上级吐槽回复数加1</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(spit.getParentid()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(spit.getParentid())){<span class="comment">//表示是在别人下面回复</span></span><br><span class="line">    Query query=<span class="keyword">new</span> Query();</span><br><span class="line">    query.addCriteria(Criteria.where(<span class="string">"_id"</span>).is(spit.getParentid()));</span><br><span class="line">    Update update=<span class="keyword">new</span> Update();</span><br><span class="line">    update.inc(<span class="string">"thumbup"</span>,<span class="number">1</span>);</span><br><span class="line">    mongoTemplate.updateFirst(query,update,<span class="string">"spit"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、根据上级id查询吐槽列表</p><p>3、吐槽点赞，并通过redis使其不能重复点赞</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//使用mongoDB原生方式实现自增</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thumbUp</span><span class="params">(String id)</span></span>{</span><br><span class="line">        <span class="comment">//方式一,与数据库多次交互性能较低</span></span><br><span class="line">        <span class="comment">//Spit spit=spitDao.findById(id).get();</span></span><br><span class="line">        <span class="comment">//spit.setThumbup((spit.getThumbup()==null?0:spit.getThumbup())+1);</span></span><br><span class="line">        <span class="comment">//spitDao.save(spit);</span></span><br><span class="line">        <span class="comment">//相当于使用原生mongo命令实现自增：db.spit.update({"_id":"1"},{$inc:{thumbup:NumberInt(1)}})</span></span><br><span class="line">        Query query=<span class="keyword">new</span> Query();</span><br><span class="line">        query.addCriteria(Criteria.where(<span class="string">"_id"</span>).is(<span class="string">"id"</span>));</span><br><span class="line">        Update update=<span class="keyword">new</span> Update();</span><br><span class="line">        update.inc(<span class="string">"thumbup"</span>,<span class="number">1</span>);</span><br><span class="line">       mongoTemplate.updateFirst(query,update,<span class="string">"spit"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/thumbup/{spitId}"</span>,method = RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">thumbUp</span><span class="params">(@PathVariable String spitId)</span></span>{</span><br><span class="line">    <span class="comment">//由于没有做登陆认证，因此暂时写死ID，实现一个用户只能点赞一次</span></span><br><span class="line">    String userid=<span class="string">"111"</span>;</span><br><span class="line">    <span class="keyword">if</span>(redisTemplate.opsForValue().get(<span class="string">"thumbup_"</span>+userid)!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>,StatusCode.REPERROR,<span class="string">"不能重复点赞"</span>);</span><br><span class="line">    };</span><br><span class="line">    spitService.thumbUp(spitId);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">"thumbup_"</span>+userid,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"点赞成功"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="管理员模块"><a href="#管理员模块" class="headerlink" title="管理员模块"></a>管理员模块</h2><p>管理员登陆，JWT鉴权，在完成鉴权后通过feign可以操作其他模块的业务</p><p>1、在招聘模块对关注人数超过一定值的招聘信息可以设置为推荐，删除超过截止日期的招聘信息</p><p>2、手动设置热门企业</p><p>3、对用户进行管理</p><p>4、审核为通过审核文章，删除违规的文章</p><h2 id="用户中心模块"><a href="#用户中心模块" class="headerlink" title="用户中心模块"></a>用户中心模块</h2><p>用户登陆，JWT鉴权，在完成鉴权后通过feign可以操作其他模块的业务</p><p>完成的主要业务有</p><p>1、用户注册：本地生成6位验证码，redis缓存一份，向rabbitmq发送一份，在处理短信的模块中，监听mq的短信队列拿到想换验证码和手机号，通过阿里云的短信API实现发送短信的功能（处理短信的模块是自动完成的，只需向mq发送相关信息即可）</p><p>2、用户登录：通过spring security的BCryptPasswordEncoder实现密码的加密解密，完成用户登录，登录成功通过JWT向用户发送token，以后请求服务需要在头信息中添加token信息</p><h2 id="交友模块"><a href="#交友模块" class="headerlink" title="交友模块"></a>交友模块</h2><p>分为好友表和非好友表</p><p>好友表包含：用户id，朋友id，islike（0表单向喜欢，1表双向喜欢）</p><p>非好友表包含：用户id，朋友id</p><p>完成的业务：</p><p>1、当A点击喜欢B，好友表增加记录，非好友表删除A不喜欢B，当B喜欢A，修改islike为1</p><p>2、当A点击拉黑B，非好友表增加记录，好友表删除A-B的记录，若B喜欢A，则修改为单向喜欢</p><p>3、于此同时，A喜欢B，A的关注数加1，B的粉丝数加1</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addFriend</span><span class="params">(String userid, String friendid)</span> </span>{</span><br><span class="line">    <span class="comment">//先判断userid到friendid是否有数据，有就是重复添加好友，返回0</span></span><br><span class="line">    Friend friend=friendDao.findByUseridAndFriendid(userid,friendid);</span><br><span class="line">    <span class="keyword">if</span>(friend!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//再判断以前是否不喜欢</span></span><br><span class="line">    <span class="keyword">if</span>(noFriendDao.findByUseridAndFriendid(userid, friendid)!=<span class="keyword">null</span>){</span><br><span class="line">        noFriendDao.deleteByUseridAndFriendid(userid,friendid);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//直接添加好友，让好友表中的userid到friendid方向的type为0</span></span><br><span class="line">    friend=<span class="keyword">new</span> Friend();</span><br><span class="line">    friend.setUserid(userid);</span><br><span class="line">    friend.setFriendid(friendid);</span><br><span class="line">    friend.setIslike(<span class="string">"0"</span>);</span><br><span class="line">    friendDao.save(friend);</span><br><span class="line">    <span class="comment">//再判断friendid到userid是否有数据，如果有则把双方的状态都改为1</span></span><br><span class="line">    <span class="keyword">if</span>(friendDao.findByUseridAndFriendid(friendid,userid)!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="comment">//把双方islike都改为1</span></span><br><span class="line">        friendDao.updateIslike(<span class="string">"1"</span>,userid,friendid);</span><br><span class="line">        friendDao.updateIslike(<span class="string">"1"</span>,friendid,userid);</span><br><span class="line"></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addNoFriend</span><span class="params">(String userid,String friendid)</span> </span>{</span><br><span class="line">        <span class="comment">//先判断是否已经是非好友</span></span><br><span class="line">        NoFriend noFriend=noFriendDao.findByUseridAndFriendid(userid, friendid);</span><br><span class="line">        <span class="keyword">if</span>(noFriend!=<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果之前是好友，现在单方面删除</span></span><br><span class="line">        <span class="keyword">if</span>(friendDao.findByUseridAndFriendid(userid,friendid)!=<span class="keyword">null</span>){</span><br><span class="line">            friendDao.deleteByUseridAndFriendid(userid,friendid);</span><br><span class="line">            <span class="keyword">if</span>(friendDao.findByUseridAndFriendid(friendid,userid)!=<span class="keyword">null</span>)</span><br><span class="line">            friendDao.updateIslike(<span class="string">"0"</span>,friendid,userid);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//删完再添加到noFriend表</span></span><br><span class="line">        noFriend=<span class="keyword">new</span> NoFriend();</span><br><span class="line">        noFriend.setUserid(userid);</span><br><span class="line">        noFriend.setFriendid(friendid);</span><br><span class="line">        noFriendDao.save(noFriend);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h1 id="完成项目的微服务化"><a href="#完成项目的微服务化" class="headerlink" title="完成项目的微服务化"></a>完成项目的微服务化</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;利用SpringDataJPA完成问答、文章、招聘、交友、吐槽、用户、管理员的增删改以及模糊分页查询&quot;&gt;&lt;a href=&quot;#利用SpringDataJPA完成问答、文章、招聘、交友、吐槽、用户、管理员的增删改以及模糊分页查询&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用jekins完成项目部署于Docker容器</title>
    <link href="https://xulilei.github.io/2020/06/30/%E4%BD%BF%E7%94%A8jekins%E5%AE%8C%E6%88%90%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>https://xulilei.github.io/2020/06/30/%E4%BD%BF%E7%94%A8jekins%E5%AE%8C%E6%88%90%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</id>
    <published>2020-06-30T07:52:28.000Z</published>
    <updated>2020-06-30T08:41:43.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用jekins完成项目部署于Docker容器"><a href="#使用jekins完成项目部署于Docker容器" class="headerlink" title="使用jekins完成项目部署于Docker容器"></a>使用jekins完成项目部署于Docker容器</h2><h3 id="创建Docker私有仓库"><a href="#创建Docker私有仓库" class="headerlink" title="创建Docker私有仓库"></a>创建Docker私有仓库</h3><h4 id="创建私有仓库容器"><a href="#创建私有仓库容器" class="headerlink" title="创建私有仓库容器"></a>创建私有仓库容器</h4><h5 id="拉去镜像，创建容器"><a href="#拉去镜像，创建容器" class="headerlink" title="拉去镜像，创建容器"></a>拉去镜像，创建容器</h5><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker pull registry</span><br><span class="line">docker run ‐di ‐‐name=registry ‐p 5000:5000 registry</span><br></pre></td></tr></tbody></table></figure><p>打开浏览器 输入地址<a href="http://192.168.xxx.xxx:5000/v2/_catalog" target="_blank" rel="noopener">http://192.168.xxx.xxx:5000/v2/_catalog</a></p><p>看到 {“repositories”:[]} 表示私有仓库搭建成功并且内容为空</p><h5 id="修改daemon-json"><a href="#修改daemon-json" class="headerlink" title="修改daemon.json"></a>修改daemon.json</h5><p>让docker信任私有仓库</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">{"insecure‐registries":["192.168.xxx.xxx:5000"]}</span><br></pre></td></tr></tbody></table></figure><h3 id="maven插件自动部署"><a href="#maven插件自动部署" class="headerlink" title="maven插件自动部署"></a>maven插件自动部署</h3><h4 id="修改宿主机docker配置使其可以远程访问"><a href="#修改宿主机docker配置使其可以远程访问" class="headerlink" title="修改宿主机docker配置使其可以远程访问"></a>修改宿主机docker配置使其可以远程访问</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br><span class="line">其中ExecStart=后添加配置 ‐H tcp://0.0.0.0:2375 ‐H unix:///var/run/docker.sock</span><br></pre></td></tr></tbody></table></figure><h4 id="发布的项目pom文件引入插件"><a href="#发布的项目pom文件引入插件" class="headerlink" title="发布的项目pom文件引入插件"></a>发布的项目pom文件引入插件</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>tensquare_config<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--docker的maven插件，官网：</span></span><br><span class="line"><span class="comment">        https://github.com/spotify/docker‐maven‐plugin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!--上传私有仓库--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>192.168.152.xx:5000/${project.artifactId}:${project.version}<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--基础镜像，意味着docker容器中已经存在jdk8的镜像--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>jdk8<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--打包命令--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>["java", "-jar", "/${project.build.finalName}.jar"]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>${project.build.directory}</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>${project.build.finalName}.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://192.168.152.xx:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="进入该工程所在目录执行命令"><a href="#进入该工程所在目录执行命令" class="headerlink" title="进入该工程所在目录执行命令"></a>进入该工程所在目录执行命令</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mvn clean package docker:build -DpushImage</span><br></pre></td></tr></tbody></table></figure><h3 id="代码管理服务gogs"><a href="#代码管理服务gogs" class="headerlink" title="代码管理服务gogs"></a>代码管理服务gogs</h3><h4 id="安装gogs"><a href="#安装gogs" class="headerlink" title="安装gogs"></a>安装gogs</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker pull gogs/gogs</span><br><span class="line">docker run -d --name=gogs -p 10022:22 -p 3000:3000 -v /var/gogsdata:/data gogs/gogs</span><br></pre></td></tr></tbody></table></figure><h4 id="配置gogs"><a href="#配置gogs" class="headerlink" title="配置gogs"></a>配置gogs</h4><p>在地址栏输入<a href="http://192.168.xxx.xxx:3000" target="_blank" rel="noopener">http://192.168.xxx.xxx:3000</a> 会进入首次运行安装程序页面，我们可以选择一种数据库作为gogs数据的存储，最简单的是选择SQLite3。如果对于规模较大的公司，可以选择MySQL</p><h4 id="页面展示"><a href="#页面展示" class="headerlink" title="页面展示"></a>页面展示</h4><p>idea上传至gogs仓库</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200630161514.png" alt=""></p><h3 id="jekins持续继承"><a href="#jekins持续继承" class="headerlink" title="jekins持续继承"></a>jekins持续继承</h3><h4 id="配置jekins"><a href="#配置jekins" class="headerlink" title="配置jekins"></a>配置jekins</h4><h5 id="下载安装完后需要配置用户和端口号"><a href="#下载安装完后需要配置用户和端口号" class="headerlink" title="下载安装完后需要配置用户和端口号"></a>下载安装完后需要配置用户和端口号</h5><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">JENKINS_USER="root"</span><br><span class="line">JENKINS_PORT="8888"</span><br></pre></td></tr></tbody></table></figure><h5 id="首次进入，安装插件"><a href="#首次进入，安装插件" class="headerlink" title="首次进入，安装插件"></a>首次进入，安装插件</h5><h6 id="主要的插件有两个一个是maven一个是git"><a href="#主要的插件有两个一个是maven一个是git" class="headerlink" title="主要的插件有两个一个是maven一个是git"></a>主要的插件有两个一个是maven一个是git</h6><p><img src="https://gitee.com/xulilei/pic/raw/master/20200630161906.png" alt=""></p><h5 id="全局工具配置"><a href="#全局工具配置" class="headerlink" title="全局工具配置"></a>全局工具配置</h5><p>服务器安装maven，JDK</p><h6 id="JDK配置"><a href="#JDK配置" class="headerlink" title="JDK配置"></a>JDK配置</h6><h6 id="git配置（一般服务器都已经安装）"><a href="#git配置（一般服务器都已经安装）" class="headerlink" title="git配置（一般服务器都已经安装）"></a>git配置（一般服务器都已经安装）</h6><h6 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h6><h4 id="持续继承"><a href="#持续继承" class="headerlink" title="持续继承"></a>持续继承</h4><h5 id="创建一个maven项目"><a href="#创建一个maven项目" class="headerlink" title="创建一个maven项目"></a>创建一个maven项目</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200630163344.png" alt=""></p><h5 id="源码管理选git"><a href="#源码管理选git" class="headerlink" title="源码管理选git"></a>源码管理选git</h5><p>URL填写gogs仓库的地址</p><h5 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h5><p>pom要填写生成容器的子项目</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200630163455.png" alt=""></p><h5 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200630163610.png" alt=""></p><h4 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h4><p>docker镜像</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200630163702.png" alt=""></p><p>私有仓库</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200630163818.png" alt=""></p><p>运行后可以成功展示！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用jekins完成项目部署于Docker容器&quot;&gt;&lt;a href=&quot;#使用jekins完成项目部署于Docker容器&quot; class=&quot;headerlink&quot; title=&quot;使用jekins完成项目部署于Docker容器&quot;&gt;&lt;/a&gt;使用jekins完成项目部署于Do
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="jekins" scheme="https://xulilei.github.io/tags/jekins/"/>
    
      <category term="gogs" scheme="https://xulilei.github.io/tags/gogs/"/>
    
  </entry>
  
  <entry>
    <title>集中配置组件SpringCloudConfig</title>
    <link href="https://xulilei.github.io/2020/06/26/%E9%9B%86%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%BB%84%E4%BB%B6SpringCloudConfig/"/>
    <id>https://xulilei.github.io/2020/06/26/%E9%9B%86%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%BB%84%E4%BB%B6SpringCloudConfig/</id>
    <published>2020-06-26T07:58:27.000Z</published>
    <updated>2020-06-30T07:42:03.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集中配置组件SpringCloudConfig"><a href="#集中配置组件SpringCloudConfig" class="headerlink" title="集中配置组件SpringCloudConfig"></a>集中配置组件SpringCloudConfig</h1><h2 id="Spring-Cloud-Config简介"><a href="#Spring-Cloud-Config简介" class="headerlink" title="Spring Cloud Config简介"></a>Spring Cloud Config简介</h2><p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所 以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库 中。在spring cloud config 组件中，分两个角色，一是config server，二是config client。</p><h3 id="config-server"><a href="#config-server" class="headerlink" title="config server"></a>config server</h3><p>它用于集中管理应用程序各个 环境下的配置，默认使用Git存储配置文件内容</p><h4 id="导入config-server依赖"><a href="#导入config-server依赖" class="headerlink" title="导入config-server依赖"></a>导入config-server依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="启动类添加-EnableConfigServer"><a href="#启动类添加-EnableConfigServer" class="headerlink" title="启动类添加@EnableConfigServer"></a>启动类添加@EnableConfigServer</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(ConfigApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>这里如果uri使用的是http，则会出现不能clone仓库内容的错误，因此要换成ssh，并添加private-key，该配置文件不需要上传至云端</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">12000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tensquare-config</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.152</span><span class="string">.**</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">git@gitee.com:***/tensquare.git</span></span><br><span class="line">          <span class="attr">ignore-local-ssh-settings:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">private-key:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">-----BEGIN</span> <span class="string">RSA</span> <span class="string">PRIVATE</span> <span class="string">KEY-----</span></span><br><span class="line">            <span class="string">MIIEowIBAAKCAQEAxawgOKaig29oj/OqSVY9njJMnIYmedq4A7wvKEpg3Q/wYRl0</span></span><br><span class="line">            <span class="string">DO1QOl13ilyj20MyXUEUKON4dKWoBl+2/zhTtyI5cCDhcnISYAp9JSkYSzm8DTDp</span></span><br><span class="line">            <span class="string">E+1Zwmq2yYE68mr5/UaRbhOHBPGr1GwrTNuraqnOtNDjUXm25E4HiCmHoc395RpA</span></span><br><span class="line">            <span class="string">-----END</span> <span class="string">RSA</span> <span class="string">PRIVATE</span> <span class="string">KEY-----</span></span><br></pre></td></tr></tbody></table></figure><h3 id="config-client"><a href="#config-client" class="headerlink" title="config client"></a>config client</h3><p>Config Client是Config Server的客户端，用于操作存储在Config Server中的配置内容。 微服务在启动时会请求Config Server获取配置文件的内容，请求到后再启动容器。</p><h4 id="导入config-client依赖"><a href="#导入config-client依赖" class="headerlink" title="导入config client依赖"></a>导入config client依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="上传配置文件application-yml至gitee"><a href="#上传配置文件application-yml至gitee" class="headerlink" title="上传配置文件application.yml至gitee"></a>上传配置文件application.yml至gitee</h4><p>文件命名规则： {application}-{profile}.yml或{application}-{profile}.properties</p><p>其中application为应用名称，profile指的开发环境（用于区分开发环境，测试环境、生产环境等）</p><h4 id="更换配置文件为bootstrap-yml"><a href="#更换配置文件为bootstrap-yml" class="headerlink" title="更换配置文件为bootstrap.yml"></a>更换配置文件为bootstrap.yml</h4><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">     <span class="comment">#这个对应gitee配置文件的命名规则</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">base</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://127.0.0.1:12000</span></span><br></pre></td></tr></tbody></table></figure><h2 id="消息总线组件SpringCloudBus"><a href="#消息总线组件SpringCloudBus" class="headerlink" title="消息总线组件SpringCloudBus"></a>消息总线组件SpringCloudBus</h2><h3 id="SpringCloudBus简介"><a href="#SpringCloudBus简介" class="headerlink" title="SpringCloudBus简介"></a>SpringCloudBus简介</h3><p>当云端修改配置文件后，本地不用修改和再次编译，只需向消息中间件发送一条修改提醒即可使得配置文件即时生效</p><h3 id="配置服务端"><a href="#配置服务端" class="headerlink" title="配置服务端"></a>配置服务端</h3><h4 id="config-server导入SpringCloudBus和rabbitmq依赖"><a href="#config-server导入SpringCloudBus和rabbitmq依赖" class="headerlink" title="config-server导入SpringCloudBus和rabbitmq依赖"></a>config-server导入SpringCloudBus和rabbitmq依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-bus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">     <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.152</span><span class="number">.128</span></span><br><span class="line"><span class="comment">#暴露触发消息总线的地址，</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">bus-refresh</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h3><h4 id="功能子模块导入依赖"><a href="#功能子模块导入依赖" class="headerlink" title="功能子模块导入依赖"></a>功能子模块导入依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-bus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="云端配置文件添加rabbitmq地址"><a href="#云端配置文件添加rabbitmq地址" class="headerlink" title="云端配置文件添加rabbitmq地址"></a>云端配置文件添加rabbitmq地址</h4><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.184</span><span class="string">.</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集中配置组件SpringCloudConfig&quot;&gt;&lt;a href=&quot;#集中配置组件SpringCloudConfig&quot; class=&quot;headerlink&quot; title=&quot;集中配置组件SpringCloudConfig&quot;&gt;&lt;/a&gt;集中配置组件SpringCloud
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringCloudConfig" scheme="https://xulilei.github.io/tags/SpringCloudConfig/"/>
    
  </entry>
  
  <entry>
    <title>微服务网关Zuul</title>
    <link href="https://xulilei.github.io/2020/06/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3Zuul/"/>
    <id>https://xulilei.github.io/2020/06/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3Zuul/</id>
    <published>2020-06-26T07:40:35.000Z</published>
    <updated>2020-06-30T07:37:35.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微服务网关Zuul"><a href="#微服务网关Zuul" class="headerlink" title="微服务网关Zuul"></a>微服务网关Zuul</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><h4 id="为什么使用网关"><a href="#为什么使用网关" class="headerlink" title="为什么使用网关"></a>为什么使用网关</h4><p>不同的微服务一般有不同的网络地址，而外部的客户端可能需要调用多个服务的接口才 能完成一个业务需求。</p><p>如果客户端直接和微服务进行通信，会存在一下问题： </p><p>1、客户端会多次请求不同微服务，增加客户端的复杂性 </p><p>2、存在跨域请求，在一定场景下处理相对复杂 </p><p>3、认证复杂，每一个服务都需要独立认证</p><p>上述问题，都可以借助微服务网关解决。微服务网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过微服务网关。</p><h4 id="什么是zuul"><a href="#什么是zuul" class="headerlink" title="什么是zuul"></a>什么是zuul</h4><p>Zuul是Netflix开源的微服务网关，他可以和Eureka,Ribbon,Hystrix等组件配合使用。</p><p>Zuul组件的核心是一系列的过滤器，这些过滤器可以完成以下功能：  </p><p>1、身份认证和安全: 识别每一个资源的验证要求，并拒绝那些不符的请求</p><p>2、动态路由：动态将请求路由到不同后端集群</p><h3 id="Zuul使用"><a href="#Zuul使用" class="headerlink" title="Zuul使用"></a>Zuul使用</h3><h4 id="网关模块导入相关依赖"><a href="#网关模块导入相关依赖" class="headerlink" title="网关模块导入相关依赖"></a>网关模块导入相关依赖</h4><p>zuul是依赖eureka实现的，通过微服务的name在eureka的服务器上寻找到对应的路径</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application,yml"></a>配置application,yml</h4><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9011</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tensquare-manager</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:6868/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="string">prefer‐ip‐address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">tensquare-base:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/base/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">tensquare-base</span></span><br><span class="line">    <span class="attr">tensquare-user:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/user/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">tensquare-user</span></span><br><span class="line">    <span class="attr">tensquare-qa:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/qa/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">tensquare-qa</span></span><br></pre></td></tr></tbody></table></figure><h4 id="修改启动类"><a href="#修改启动类" class="headerlink" title="修改启动类"></a>修改启动类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagerApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(ManagerApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtUtil <span class="title">jwtUtil</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtUtil();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="实例：通过ZuulFilter实现身份验证功能"><a href="#实例：通过ZuulFilter实现身份验证功能" class="headerlink" title="实例：通过ZuulFilter实现身份验证功能"></a>实例：通过ZuulFilter实现身份验证功能</h3><p>创建Filter类继承ZuulFilter，并实现其中的方法，具体细节请看注释</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagerFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line">    <span class="comment">//过滤器类型</span></span><br><span class="line">    <span class="comment">//“pre”执行之前，“post”执行时</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//排序，0表示优先执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//表示当前过滤器是否开启，true为开启</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//过滤器内执行的操作，return任何object表示继续执行，</span></span><br><span class="line">    <span class="comment">//setSendZullResponse(false)表示不再继续执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>{</span><br><span class="line">        <span class="comment">//通过com.netflix.zuul得到request上下文</span></span><br><span class="line">        RequestContext currentContext =RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">//得到request域</span></span><br><span class="line">        HttpServletRequest request = currentContext.getRequest();</span><br><span class="line">        <span class="comment">// 第一次转发始终放行，因为是根据配置文件中的路径去找其他服务</span></span><br><span class="line">         <span class="keyword">if</span>(request.getMethod().equals(<span class="string">"OPTIONS"</span>)){</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">         }</span><br><span class="line">         <span class="comment">//登陆放行</span></span><br><span class="line">        <span class="keyword">if</span>(request.getRequestURI().indexOf(<span class="string">"login"</span>)&gt;<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到头信息</span></span><br><span class="line">        String header = request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line">        <span class="keyword">if</span>(header!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(header)){</span><br><span class="line">            <span class="keyword">if</span>(header.startsWith(<span class="string">"Bearer "</span>)){</span><br><span class="line">                String token=header.substring(<span class="number">7</span>);</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Claims claims = jwtUtil.parseJWT(token);</span><br><span class="line">                    String role= (String) claims.get(<span class="string">"roles"</span>);</span><br><span class="line">                    <span class="keyword">if</span>(role.equals(<span class="string">"admin"</span>)){</span><br><span class="line">                        <span class="comment">//把头信息继续往下传</span></span><br><span class="line">                        currentContext.addZuulRequestHeader(<span class="string">"Authorization"</span>,header);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    }</span><br><span class="line">                }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">                    <span class="comment">//终止运行</span></span><br><span class="line">                    currentContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//header为空返回错误信息</span></span><br><span class="line">        currentContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">        currentContext.setResponseStatusCode(<span class="number">403</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;微服务网关Zuul&quot;&gt;&lt;a href=&quot;#微服务网关Zuul&quot; class=&quot;headerlink&quot; title=&quot;微服务网关Zuul&quot;&gt;&lt;/a&gt;微服务网关Zuul&lt;/h2&gt;&lt;h3 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="zuul" scheme="https://xulilei.github.io/tags/zuul/"/>
    
  </entry>
  
  <entry>
    <title>Hystrix入门</title>
    <link href="https://xulilei.github.io/2020/06/25/Hystrix%E2%80%9C%E5%85%A5%E9%97%A8/"/>
    <id>https://xulilei.github.io/2020/06/25/Hystrix%E2%80%9C%E5%85%A5%E9%97%A8/</id>
    <published>2020-06-25T13:58:25.000Z</published>
    <updated>2020-06-30T07:20:00.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hystrix熔断器"><a href="#Hystrix熔断器" class="headerlink" title="Hystrix熔断器"></a>Hystrix熔断器</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><h4 id="为什么要使用熔断器"><a href="#为什么要使用熔断器" class="headerlink" title="为什么要使用熔断器"></a>为什么要使用熔断器</h4><p>在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障， 进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。而熔断器的产生，则有效规避了雪崩效应</p><h4 id="熔断器工作机制"><a href="#熔断器工作机制" class="headerlink" title="熔断器工作机制"></a>熔断器工作机制</h4><p>当服务的某个API接口的失败次数在一定时间内小于设定的阈值时，熔断器处于关闭状态，该API接口正常提供服务。当该API接口处理请求的失败次数大于设定的阈值时，Hystrix判定该API接口出现了故障，打开熔断器，这时该API接口会执行快速失败的逻辑，不执行业务逻辑，请求的线程不会处于阻塞状态。处于打开状态的熔断器在一定时间后会处于半打开状态，并将一定数量的请求执行正常逻辑，剩余的请求会执行快速失败。若执行正常逻辑的请求失败了，则熔断器继续打开，若成功了，则熔断器关闭。这样熔断器就具有了自我修复的功能。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="配置文件开启hystrix支持"><a href="#配置文件开启hystrix支持" class="headerlink" title="配置文件开启hystrix支持"></a>配置文件开启hystrix支持</h4><p>Feign本身支持Hystrix，因此不需要导入额外依赖</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"> <span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h4 id="创建实现feign接口的实现类"><a href="#创建实现feign接口的实现类" class="headerlink" title="创建实现feign接口的实现类"></a>创建实现feign接口的实现类</h4><p>在声明式接口中的@FeignClient注解上添加fallback属性来配置快速失败的处理类。该处理类作为Feign熔断器的逻辑处理类，必须实现被@FeignClient修饰的接口</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"tensquare-base"</span>,fallback = BaseClientImpl<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">BaseClient</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/label/{labelId}"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"labelId"</span>)</span> String labelId)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseClientImpl</span> <span class="keyword">implements</span> <span class="title">BaseClient</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findById</span><span class="params">(String labelId)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, StatusCode.ERROR,<span class="string">"失败"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hystrix熔断器&quot;&gt;&lt;a href=&quot;#Hystrix熔断器&quot; class=&quot;headerlink&quot; title=&quot;Hystrix熔断器&quot;&gt;&lt;/a&gt;Hystrix熔断器&lt;/h2&gt;&lt;h3 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Hystrix" scheme="https://xulilei.github.io/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud架构模型</title>
    <link href="https://xulilei.github.io/2020/06/25/cloud%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9D%97/"/>
    <id>https://xulilei.github.io/2020/06/25/cloud%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9D%97/</id>
    <published>2020-06-25T13:54:19.000Z</published>
    <updated>2020-06-30T07:51:46.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cloud架构模型"><a href="#Spring-Cloud架构模型" class="headerlink" title="Spring Cloud架构模型"></a>Spring Cloud架构模型</h2><p><img src="https://gitee.com/xulilei/pic/raw/master/20190706180949381.png" alt=""></p><h3 id="服务发现组件Eureka"><a href="#服务发现组件Eureka" class="headerlink" title="服务发现组件Eureka"></a>服务发现组件Eureka</h3><p>Eureka是Netflix开发的服务发现框架，SpringCloud将它集成在自己的子项目spring-cloud-netflix中，实现SpringCloud的服务发现功能。Eureka包含两个组件：Eureka Server和Eureka Client。</p><p>Eureka Server提供服务注册服务，各个节点启动后，会在Eureka Server中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。</p><p>详见：<a href="https://xulilei.github.io/2020/06/21/eureka入门/">https://xulilei.github.io/2020/06/21/eureka%E5%85%A5%E9%97%A8/</a></p><h3 id="服务间调用Feign"><a href="#服务间调用Feign" class="headerlink" title="服务间调用Feign"></a>服务间调用Feign</h3><p>feign是声明式的web service客户端，它让微服务之间的调用变得更简单了，类似controller调用service。Spring Cloud集成了Ribbon和Eureka，可在使用Feign时提供负载均衡的http客户端</p><p>详见：<a href="https://xulilei.github.io/2020/06/21/eureka入门/">https://xulilei.github.io/2020/06/21/eureka%E5%85%A5%E9%97%A8/</a></p><h3 id="熔断器Hystrix"><a href="#熔断器Hystrix" class="headerlink" title="熔断器Hystrix"></a>熔断器Hystrix</h3><p>在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障， 进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。而熔断器的产生，则有效规避了雪崩效应</p><p>当服务的某个API接口的失败次数在一定时间内小于设定的阈值时，熔断器处于关闭状态，该API接口正常提供服务。当该API接口处理请求的失败次数大于设定的阈值时，Hystrix判定该API接口出现了故障，打开熔断器，这时该API接口会执行快速失败的逻辑，不执行业务逻辑，请求的线程不会处于阻塞状态。处于打开状态的熔断器在一定时间后会处于半打开状态，并将一定数量的请求执行正常逻辑，剩余的请求会执行快速失败。若执行正常逻辑的请求失败了，则熔断器继续打开，若成功了，则熔断器关闭。这样熔断器就具有了自我修复的功能。</p><p>详见：<a href="https://xulilei.github.io/2020/06/25/Hystrix" 入门="" "="">https://xulilei.github.io/2020/06/25/Hystrix%E2%80%9C%E5%85%A5%E9%97%A8/</a></p><h3 id="路由网关Zuul"><a href="#路由网关Zuul" class="headerlink" title="路由网关Zuul"></a>路由网关Zuul</h3><p>Zuul是Netflix开源的微服务网关，Zuul组件的核心是一系列的过滤器，这些过滤器可以完成以下功能：  </p><p>1、身份认证和安全: 识别每一个资源的验证要求，并拒绝那些不符的请求</p><p>2、动态路由：动态将请求路由到不同后端集群</p><p>详见：<a href="https://xulilei.github.io/2020/06/26/微服务网关Zuul/">https://xulilei.github.io/2020/06/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3Zuul/</a></p><h3 id="分布式配置中心SpringCloud-Config"><a href="#分布式配置中心SpringCloud-Config" class="headerlink" title="分布式配置中心SpringCloud Config"></a>分布式配置中心SpringCloud Config</h3><p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所 以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库 中。在spring cloud config 组件中，分两个角色，一是config server，二是config client。</p><p>详见：<a href="https://xulilei.github.io/2020/06/26/集中配置组件SpringCloudConfig/">https://xulilei.github.io/2020/06/26/%E9%9B%86%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%BB%84%E4%BB%B6SpringCloudConfig/</a></p><h3 id="消息总线组件SpringCloud-Bus"><a href="#消息总线组件SpringCloud-Bus" class="headerlink" title="消息总线组件SpringCloud Bus"></a>消息总线组件SpringCloud Bus</h3><p>当云端修改配置文件后，本地不用修改和再次编译，只需向消息中间件发送一条修改提醒即可使得配置文件即时生效</p><p>详见：<a href="https://xulilei.github.io/2020/06/26/集中配置组件SpringCloudConfig/">https://xulilei.github.io/2020/06/26/%E9%9B%86%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%BB%84%E4%BB%B6SpringCloudConfig/</a></p><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>十次方项目首先启动tensquare_config模块，且只有该模块的配置文件存于本地</p><p>当项目启动后，启动注册中心tensquare_eureka模块，通过tensquare_config向远程仓库读取配置文件</p><p>接着启动网关服务tensquare_manager，作为项目管理员的入口，并在其中作鉴权等操作</p><p>接着启动其他业务模块，实现所有功能的启用，各业务模块间通过feign调用服务，通过Hystrix防止雪崩。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Cloud架构模型&quot;&gt;&lt;a href=&quot;#Spring-Cloud架构模型&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud架构模型&quot;&gt;&lt;/a&gt;Spring Cloud架构模型&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringCloud" scheme="https://xulilei.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>daySeven-eureka</title>
    <link href="https://xulilei.github.io/2020/06/21/%E5%8D%81%E6%AC%A1%E6%96%B9daySeven/"/>
    <id>https://xulilei.github.io/2020/06/21/%E5%8D%81%E6%AC%A1%E6%96%B9daySeven/</id>
    <published>2020-06-21T15:04:08.000Z</published>
    <updated>2020-06-22T03:17:06.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="交友服务搭建"><a href="#交友服务搭建" class="headerlink" title="交友服务搭建"></a>交友服务搭建</h2><h3 id="主要业务"><a href="#主要业务" class="headerlink" title="主要业务"></a>主要业务</h3><h4 id="添加喜欢"><a href="#添加喜欢" class="headerlink" title="添加喜欢"></a>添加喜欢</h4><h5 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h5><p>有两张表分别为tb_friend和tb_nofriend，当A添加喜欢B，先在tb_friend表中查询有无数据，如果有则代表已经添加喜欢了，回复不可重复添加，然后在tb_nofriend中查询是否之前A不喜欢B，如果有记录，则删除该记录。并在tb_friend中添加一条从A-B的记录，且状态为0，代表单向喜欢。如果在添加记录时，恰哈发现B-A已经有数据了，那么则将二者的状态都改为1，代表双向喜欢</p><h5 id="业务实现，service层"><a href="#业务实现，service层" class="headerlink" title="业务实现，service层"></a>业务实现，service层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addFriend</span><span class="params">(String userid, String friendid)</span> </span>{</span><br><span class="line">    <span class="comment">//先判断userid到friendid是否有数据，有就是重复添加好友，返回0</span></span><br><span class="line">    Friend friend=friendDao.findByUseridAndFriendid(userid,friendid);</span><br><span class="line">    <span class="keyword">if</span>(friend!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//再判断以前是否不喜欢</span></span><br><span class="line">    <span class="keyword">if</span>(noFriendDao.findByUseridAndFriendid(userid, friendid)!=<span class="keyword">null</span>){</span><br><span class="line">        noFriendDao.deleteByUseridAndFriendid(userid,friendid);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//直接添加好友，让好友表中的userid到friendid方向的type为0</span></span><br><span class="line">    friend=<span class="keyword">new</span> Friend();</span><br><span class="line">    friend.setUserid(userid);</span><br><span class="line">    friend.setFriendid(friendid);</span><br><span class="line">    friend.setIslike(<span class="string">"0"</span>);</span><br><span class="line">    friendDao.save(friend);</span><br><span class="line">    <span class="comment">//再判断friendid到userid是否有数据，如果有则把双方的状态都改为1</span></span><br><span class="line">    <span class="keyword">if</span>(friendDao.findByUseridAndFriendid(friendid,userid)!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="comment">//把双方islike都改为1</span></span><br><span class="line">        friendDao.updateIslike(<span class="string">"1"</span>,userid,friendid);</span><br><span class="line">        friendDao.updateIslike(<span class="string">"1"</span>,friendid,userid);</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="添加不喜欢"><a href="#添加不喜欢" class="headerlink" title="添加不喜欢"></a>添加不喜欢</h4><h5 id="业务逻辑-1"><a href="#业务逻辑-1" class="headerlink" title="业务逻辑"></a>业务逻辑</h5><p>当A添加B为不喜欢，首先查询tb_nofriend中是否已经有数据，如果有则提示不可重复拉黑。然后再去tb_friend中查询是否有A-B的喜欢，如果有则删除该记录，同时查询B-A是否也有记录，有则代表之前是双向喜欢，此时应将B-A的状态改为0，最后在tb_nofriend中添加一行A-B数据。</p><h5 id="业务实现，service层-1"><a href="#业务实现，service层-1" class="headerlink" title="业务实现，service层"></a>业务实现，service层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addNoFriend</span><span class="params">(String userid,String friendid)</span> </span>{</span><br><span class="line">    <span class="comment">//先判断是否已经是非好友</span></span><br><span class="line">    NoFriend noFriend=noFriendDao.findByUseridAndFriendid(userid, friendid);</span><br><span class="line">    <span class="keyword">if</span>(noFriend!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//如果之前是好友，现在单方面删除</span></span><br><span class="line">    <span class="keyword">if</span>(friendDao.findByUseridAndFriendid(userid,friendid)!=<span class="keyword">null</span>){</span><br><span class="line">        friendDao.deleteByUseridAndFriendid(userid,friendid);</span><br><span class="line">       <span class="comment">//如果之前双向喜欢，则改为单向喜欢</span></span><br><span class="line">        <span class="keyword">if</span>(friendDao.findByUseridAndFriendid(friendid,userid)!=<span class="keyword">null</span>)</span><br><span class="line">        friendDao.updateIslike(<span class="string">"0"</span>,friendid,userid);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//删完再添加到noFriend表</span></span><br><span class="line">    noFriend=<span class="keyword">new</span> NoFriend();</span><br><span class="line">    noFriend.setUserid(userid);</span><br><span class="line">    noFriend.setFriendid(friendid);</span><br><span class="line">    noFriendDao.save(noFriend);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="上述功能用到的Dao层"><a href="#上述功能用到的Dao层" class="headerlink" title="上述功能用到的Dao层"></a>上述功能用到的Dao层</h4><h5 id="FriendDao"><a href="#FriendDao" class="headerlink" title="FriendDao"></a>FriendDao</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FriendDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Friend</span>,<span class="title">String</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Friend <span class="title">findByUseridAndFriendid</span><span class="params">(String userid,String friendid)</span></span>;</span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query</span>(value =<span class="string">"update tb_friend SET islike=? where userid=? and friendid=?"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIslike</span><span class="params">(String islike,String userid,String friendid)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByUseridAndFriendid</span><span class="params">(String userid,String friendid)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="NoFriendDao"><a href="#NoFriendDao" class="headerlink" title="NoFriendDao"></a>NoFriendDao</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NoFriendDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">NoFriend</span>,<span class="title">String</span>&gt; </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> NoFriend <span class="title">findByUseridAndFriendid</span><span class="params">(String userid, String friendid)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByUseridAndFriendid</span><span class="params">(String userid,String friendid)</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="feign调用user模块业务"><a href="#feign调用user模块业务" class="headerlink" title="feign调用user模块业务"></a>feign调用user模块业务</h4><h5 id="业务逻辑-2"><a href="#业务逻辑-2" class="headerlink" title="业务逻辑"></a>业务逻辑</h5><p>当A添加B为喜欢时，在tb_user表中，userA的关注数+1，B的粉丝数+1。当A添加B为不喜欢时，userA的关注数-1，B的粉丝数-1。</p><h5 id="User模块中粉丝关注业务实现"><a href="#User模块中粉丝关注业务实现" class="headerlink" title="User模块中粉丝关注业务实现"></a>User模块中粉丝关注业务实现</h5><h6 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">String</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">User</span>&gt;</span>{</span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query</span>(value =<span class="string">"update tb_user set fanscout=fanscount+? where  id=?"</span> ,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFans</span><span class="params">(<span class="keyword">int</span> x, String friendid)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query</span>(value =<span class="string">"update tb_user set followcount=followcount+? where  id=?"</span> ,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFollows</span><span class="params">(<span class="keyword">int</span> x, String userid)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFansAndFollowCounts</span><span class="params">(<span class="keyword">int</span> x, String userid, String friendid)</span> </span>{</span><br><span class="line">     <span class="comment">//friendB粉丝数+1，userA的关注数+1</span></span><br><span class="line">     userDao.updateFans(x,friendid);</span><br><span class="line">     userDao.updateFollows(x,userid);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//不返回result是因为这个业务是服务之间的调用，不涉及前台</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/{userid}/{friendid}/x"</span>,method = RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFansAndFollowCounts</span><span class="params">(@PathVariable <span class="keyword">int</span> x,@PathVariable String userid,@PathVariable String friendid)</span></span>{</span><br><span class="line">   userService.updateFansAndFollowCounts(x,userid,friendid);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="交友模块中调用上述业务"><a href="#交友模块中调用上述业务" class="headerlink" title="交友模块中调用上述业务"></a>交友模块中调用上述业务</h5><h6 id="启动类添加相应注解"><a href="#启动类添加相应注解" class="headerlink" title="启动类添加相应注解"></a>启动类添加相应注解</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FriendApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(FriendApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="创建client"><a href="#创建client" class="headerlink" title="创建client"></a>创建client</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"tensquare-user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/{userid}/{friendid}/x"</span>,method = RequestMethod.PUT)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> updateFansAndFollowCounts</span><br><span class="line">        (<span class="meta">@PathVariable</span>(<span class="string">"x"</span>) <span class="keyword">int</span> x, <span class="meta">@PathVariable</span>(<span class="string">"userid"</span>) String userid, <span class="meta">@PathVariable</span>(<span class="string">"friendid"</span>) String friendid);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="controller层调用"><a href="#controller层调用" class="headerlink" title="controller层调用"></a>controller层调用</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//添加喜欢</span></span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>){</span><br><span class="line">    userClient.updateFansAndFollowCounts(<span class="number">1</span>,userid,friendid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"添加成功"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//添加不喜欢</span></span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>){</span><br><span class="line">    userClient.updateFansAndFollowCounts(-<span class="number">1</span>,userid,friendid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"添加成功"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="交友服务controller层整合"><a href="#交友服务controller层整合" class="headerlink" title="交友服务controller层整合"></a>交友服务controller层整合</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/like/{friendid}/{type}"</span>,method = RequestMethod.PUT )</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">addFriend</span><span class="params">(@PathVariable String friendid,@PathVariable String type)</span></span>{</span><br><span class="line">    <span class="comment">//验证是否登陆，并拿到ID</span></span><br><span class="line">    Claims claims = (Claims) request.getAttribute(<span class="string">"user_claims"</span>);</span><br><span class="line">    <span class="keyword">if</span>(claims==<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, StatusCode.LOGINERROR,<span class="string">"权限不足"</span>);</span><br><span class="line">    }</span><br><span class="line">    String userid = claims.getId();</span><br><span class="line">    System.out.println(userid);</span><br><span class="line">    <span class="comment">//判断是添加好友还是非好友，直接传进来一个类型type，当type为1时，表示添加，2时表示拉黑</span></span><br><span class="line">    <span class="keyword">if</span>(type!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">"1"</span>)){</span><br><span class="line">            <span class="keyword">int</span> flag=friendService.addFriend(userid,friendid);</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">0</span>){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, StatusCode.ERROR,<span class="string">"不能重复添加好友"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">1</span>){</span><br><span class="line">                <span class="comment">//后文介绍的添加粉丝与关注</span></span><br><span class="line">                userClient.updateFansAndFollowCounts(<span class="number">1</span>,userid,friendid);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"添加成功"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//添加好友</span></span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"2"</span>)) {</span><br><span class="line">            <span class="comment">//添加黑名单</span></span><br><span class="line">            <span class="keyword">int</span> flag= friendService.addNoFriend(userid,friendid);</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">0</span>){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, StatusCode.ERROR,<span class="string">"不能重复拉黑好友"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">1</span>){</span><br><span class="line">                <span class="comment">//后文介绍的减少粉丝与关注</span></span><br><span class="line">                userClient.updateFansAndFollowCounts(-<span class="number">1</span>,userid,friendid);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"添加成功"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, StatusCode.ERROR,<span class="string">"参数异常"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;交友服务搭建&quot;&gt;&lt;a href=&quot;#交友服务搭建&quot; class=&quot;headerlink&quot; title=&quot;交友服务搭建&quot;&gt;&lt;/a&gt;交友服务搭建&lt;/h2&gt;&lt;h3 id=&quot;主要业务&quot;&gt;&lt;a href=&quot;#主要业务&quot; class=&quot;headerlink&quot; title=&quot;主
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Eureka" scheme="https://xulilei.github.io/tags/Eureka/"/>
    
      <category term="交友业务" scheme="https://xulilei.github.io/tags/%E4%BA%A4%E5%8F%8B%E4%B8%9A%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>eureka入门</title>
    <link href="https://xulilei.github.io/2020/06/21/eureka%E5%85%A5%E9%97%A8/"/>
    <id>https://xulilei.github.io/2020/06/21/eureka%E5%85%A5%E9%97%A8/</id>
    <published>2020-06-21T07:50:02.000Z</published>
    <updated>2020-06-30T06:48:21.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务发现组件Eureka"><a href="#服务发现组件Eureka" class="headerlink" title="服务发现组件Eureka"></a>服务发现组件Eureka</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><h4 id="Eureka简介"><a href="#Eureka简介" class="headerlink" title="Eureka简介"></a>Eureka简介</h4><p>Eureka是Netflix开发的服务发现框架，SpringCloud将它集成在自己的子项目spring-cloud-netflix中，实现SpringCloud的服务发现功能。Eureka包含两个组件：Eureka Server和Eureka Client。</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200622110425.png" alt=""></p><h5 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h5><p>Eureka Server提供服务注册服务，各个节点启动后，会在Eureka Server中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。</p><h6 id="服务端开发"><a href="#服务端开发" class="headerlink" title="服务端开发"></a>服务端开发</h6><p>第一步，在父工程中锁定版本，每一个版本的springboot都对应一个版本的springcloud</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.M9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>第二步，Eureka子模块添加eureka-server</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>第三步，添加application.yml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6868</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否将自己注册到Eureka服务中，本身就是所有无需注册</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> </span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#Eureka客户端与Eureka服务端进行交互的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:${server.port}/eureka/</span></span><br></pre></td></tr></tbody></table></figure><p>第四步，启动类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(EurekaServer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h5><p>Eureka Client是一个java客户端，用于简化与Eureka Server的交互，客户端同时也 就别一个内置的、使用轮询(round-robin)负载算法的负载均衡器。</p><h6 id="客户端开发"><a href="#客户端开发" class="headerlink" title="客户端开发"></a>客户端开发</h6><p>第一步，客户端模块添加eureka-client</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>第二步，修改每个微服务的application.yml，添加注册eureka服务的配置</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:6868/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="string">prefer‐ip‐address:</span> <span class="literal">true</span>  <span class="comment">#跨域</span></span><br></pre></td></tr></tbody></table></figure><p>第三步，启动类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>{</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">      SpringApplication.run(UserApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Feign实现服务间的调用"><a href="#Feign实现服务间的调用" class="headerlink" title="Feign实现服务间的调用"></a>Feign实现服务间的调用</h4><h5 id="谁调用别人就在谁的模块中搭建环境"><a href="#谁调用别人就在谁的模块中搭建环境" class="headerlink" title="谁调用别人就在谁的模块中搭建环境"></a>谁调用别人就在谁的模块中搭建环境</h5><h6 id="第一步，添加openfeign依赖"><a href="#第一步，添加openfeign依赖" class="headerlink" title="第一步，添加openfeign依赖"></a>第一步，添加openfeign依赖</h6><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h6 id="第二步，启动类"><a href="#第二步，启动类" class="headerlink" title="第二步，启动类"></a>第二步，启动类</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span><span class="comment">//Eureka客户端</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span><span class="comment">//可以发现服务</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span><span class="comment">//通过feign调用其他服务的业务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QaApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">      SpringApplication.run(QaApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="第三步，创建client包，创建要调用目标的接口"><a href="#第三步，创建client包，创建要调用目标的接口" class="headerlink" title="第三步，创建client包，创建要调用目标的接口"></a>第三步，创建client包，创建要调用目标的接口</h6><p>默认采用的是ribbon的轮询负载均衡算法</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//调用目标的名字，注意这里不能使用下划线，这也是其他模块的application.yml中名字不加下划线的原因</span></span><br><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"tensquare-base"</span>)</span><br><span class="line"><span class="comment">//调用目标controller层的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseClient</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/label/{labelId}"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="comment">//这里的 @PathVariable 后面要加上具体的参数名称("labelId")不然会找不到</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"labelId"</span>)</span> String labelId)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="相关实践"><a href="#相关实践" class="headerlink" title="相关实践"></a>相关实践</h3><p>详见：<a href="https://xulilei.github.io/2020/06/21/十次方daySeven/">https://xulilei.github.io/2020/06/21/%E5%8D%81%E6%AC%A1%E6%96%B9daySeven/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;服务发现组件Eureka&quot;&gt;&lt;a href=&quot;#服务发现组件Eureka&quot; class=&quot;headerlink&quot; title=&quot;服务发现组件Eureka&quot;&gt;&lt;/a&gt;服务发现组件Eureka&lt;/h2&gt;&lt;h3 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; cla
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="eureka" scheme="https://xulilei.github.io/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>daySix-JWT-BCryptPasswordEncoder</title>
    <link href="https://xulilei.github.io/2020/06/18/%E5%8D%81%E6%AC%A1%E6%96%B9daySix/"/>
    <id>https://xulilei.github.io/2020/06/18/%E5%8D%81%E6%AC%A1%E6%96%B9daySix/</id>
    <published>2020-06-18T02:27:02.000Z</published>
    <updated>2020-06-18T07:53:03.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="管理员登陆验证与删除鉴权"><a href="#管理员登陆验证与删除鉴权" class="headerlink" title="管理员登陆验证与删除鉴权"></a>管理员登陆验证与删除鉴权</h2><blockquote><p>利用Spring Security的BCryptPasswordEncoder与JWT实现</p></blockquote><h3 id="登陆验证签发token"><a href="#登陆验证签发token" class="headerlink" title="登陆验证签发token"></a>登陆验证签发token</h3><h4 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Admin <span class="title">login</span><span class="params">(Admin admin)</span> </span>{</span><br><span class="line">       <span class="comment">//想根据用户名查询对象</span></span><br><span class="line">       Admin adminLogin=adminDao.findByLoginname(admin.getLoginname());</span><br><span class="line">       <span class="comment">//然后拿数据库中的密码和用户输入的密码匹配是否相同</span></span><br><span class="line">       <span class="keyword">if</span>(adminLogin!=<span class="keyword">null</span>&amp;&amp;encoder.matches(admin.getPassword(),adminLogin.getPassword())){</span><br><span class="line">           <span class="keyword">return</span> adminLogin;</span><br><span class="line">   }</span><br><span class="line">       <span class="comment">//登陆失败</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(@RequestBody Admin admin)</span></span>{</span><br><span class="line">   Admin adminLoginResult=adminService.login(admin);</span><br><span class="line">   <span class="keyword">if</span>(adminLoginResult==<span class="keyword">null</span>){</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>,StatusCode.LOGINERROR,<span class="string">"登陆失败"</span>);</span><br><span class="line">   }</span><br><span class="line">   <span class="comment">//做一系列前后端通话的工作，用JWT来实现</span></span><br><span class="line">   <span class="comment">//生成token并返回给客户端</span></span><br><span class="line">   String token=jwtUtil.createJWT(adminLoginResult.getId(),adminLoginResult.getLoginname(),<span class="string">"admin"</span>);</span><br><span class="line">   Map&lt;String,Object&gt;map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   map.put(<span class="string">"token"</span>,token);</span><br><span class="line">   map.put(<span class="string">"role"</span>,<span class="string">"admin"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"登陆成功"</span>,map);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="返回给前端的token"><a href="#返回给前端的token" class="headerlink" title="返回给前端的token"></a>返回给前端的token</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200617161241.png" alt=""></p><h3 id="利用拦截器解析token"><a href="#利用拦截器解析token" class="headerlink" title="利用拦截器解析token"></a>利用拦截器解析token</h3><h4 id="拦截器只是为了将请求头中的token解析成user和admin"><a href="#拦截器只是为了将请求头中的token解析成user和admin" class="headerlink" title="拦截器只是为了将请求头中的token解析成user和admin"></a>拦截器只是为了将请求头中的token解析成user和admin</h4><p>解析后将气保存在域对象中，等需要鉴权时，直接通过获取这个域对象的值来分别是user还是admin</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//无论如何都放行，具体能不能操作要在具体的操作中去判断</span></span><br><span class="line">        <span class="comment">//拦截器只是负责把请求头中包含的token令牌解析成user和admin</span></span><br><span class="line">        String header=request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(header!=<span class="keyword">null</span>&amp;&amp;header.startsWith(<span class="string">"Bearer "</span>)){</span><br><span class="line">            String token=header.substring(<span class="number">7</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Claims claims = jwtUtil.parseJWT(token);</span><br><span class="line">                <span class="keyword">if</span>(claims!=<span class="keyword">null</span>){</span><br><span class="line">                    <span class="keyword">if</span>(<span class="string">"admin"</span>.equals(claims.get(<span class="string">"roles"</span>))){</span><br><span class="line">                       request.setAttribute(<span class="string">"admin_claims"</span>,token);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span>(<span class="string">"user"</span>.equals(claims.get(<span class="string">"roles"</span>))){</span><br><span class="line">                        request.setAttribute(<span class="string">"user_claims"</span>,token);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">                <span class="comment">//过期</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"token错误"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h4><p>当然不用拦截登陆请求了</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtInterceptor jwtInterceptor;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册拦截器要声明的拦截器对象和要拦截的请求</span></span><br><span class="line">        registry.addInterceptor(jwtInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">"/**/login"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="管理员删除用户"><a href="#管理员删除用户" class="headerlink" title="管理员删除用户"></a>管理员删除用户</h3><h5 id="直接从域对象中获取admin-claims，如果有则说明该登陆用户为管理员，则可以删除用户，否则提示权限不足"><a href="#直接从域对象中获取admin-claims，如果有则说明该登陆用户为管理员，则可以删除用户，否则提示权限不足" class="headerlink" title="直接从域对象中获取admin_claims，如果有则说明该登陆用户为管理员，则可以删除用户，否则提示权限不足"></a>直接从域对象中获取admin_claims，如果有则说明该登陆用户为管理员，则可以删除用户，否则提示权限不足</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(String id)</span> </span>{</span><br><span class="line">   String token = (String) request.getAttribute(<span class="string">"admin_claims"</span>);</span><br><span class="line">   <span class="keyword">if</span>(token==<span class="keyword">null</span>||<span class="string">""</span>.equals(token)){</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"权限不足"</span>);</span><br><span class="line">   }</span><br><span class="line">   userDao.deleteById(id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="当header中的token无法解析时"><a href="#当header中的token无法解析时" class="headerlink" title="当header中的token无法解析时"></a>当header中的token无法解析时</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200617164250.png" alt=""></p><h5 id="当header中的token正确时"><a href="#当header中的token正确时" class="headerlink" title="当header中的token正确时"></a>当header中的token正确时</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200617164223.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;管理员登陆验证与删除鉴权&quot;&gt;&lt;a href=&quot;#管理员登陆验证与删除鉴权&quot; class=&quot;headerlink&quot; title=&quot;管理员登陆验证与删除鉴权&quot;&gt;&lt;/a&gt;管理员登陆验证与删除鉴权&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;利用Spring Security
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Spring Security" scheme="https://xulilei.github.io/tags/Spring-Security/"/>
    
      <category term="BCryptPasswordEncoder" scheme="https://xulilei.github.io/tags/BCryptPasswordEncoder/"/>
    
      <category term="JWT" scheme="https://xulilei.github.io/tags/JWT/"/>
    
      <category term="鉴权" scheme="https://xulilei.github.io/tags/%E9%89%B4%E6%9D%83/"/>
    
      <category term="密码加密" scheme="https://xulilei.github.io/tags/%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security加密与JWT鉴权</title>
    <link href="https://xulilei.github.io/2020/06/18/SpringSecurity%E5%8A%A0%E5%AF%86%C2%80%E4%B8%8EJWT%E9%89%B4%E6%9D%83/"/>
    <id>https://xulilei.github.io/2020/06/18/SpringSecurity%E5%8A%A0%E5%AF%86%C2%80%E4%B8%8EJWT%E9%89%B4%E6%9D%83/</id>
    <published>2020-06-18T02:26:39.000Z</published>
    <updated>2020-06-22T03:24:47.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringSecurity加密与JWT鉴权"><a href="#SpringSecurity加密与JWT鉴权" class="headerlink" title="SpringSecurity加密与JWT鉴权"></a>SpringSecurity加密与JWT鉴权</h2><h3 id="Spring-Security的BCryptPasswordEncoder"><a href="#Spring-Security的BCryptPasswordEncoder" class="headerlink" title="Spring Security的BCryptPasswordEncoder"></a>Spring Security的BCryptPasswordEncoder</h3><h4 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h4><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="添加配置类"><a href="#添加配置类" class="headerlink" title="添加配置类"></a>添加配置类</h5><p>如果只是使用BCryptPasswordEncoder，这个配置可以直接拿来用</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//authorizeRequests是所有security全注解配置实现的开端</span></span><br><span class="line">        <span class="comment">//需要的权限分两部分，第一部分是拦截的路径，第二部分是访问该路径需要的权限</span></span><br><span class="line">        <span class="comment">//antMatchers，表示拦截的路径，permitAll表示任何权限都可以访问，直接放行所有</span></span><br><span class="line">        <span class="comment">//这里主要是用security的加密功能，拦截功能用的是jwt</span></span><br><span class="line">        <span class="comment">//anyRequest()任何的请求，authenticated()认证后访问</span></span><br><span class="line">        <span class="comment">//and().csrf().disable()表示使csrf攻击失效</span></span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/**"</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="配置BCryptPasswordEncoder交给容器"><a href="#配置BCryptPasswordEncoder交给容器" class="headerlink" title="配置BCryptPasswordEncoder交给容器"></a>配置BCryptPasswordEncoder交给容器</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">bCryptPasswordEncoder</span><span class="params">()</span></span>{</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h5><p>service层</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> </span>{</span><br><span class="line">   user.setId( idWorker.nextId()+<span class="string">""</span> );</span><br><span class="line">   <span class="comment">//密码加密</span></span><br><span class="line">   user.setPassword(encoder.encode(user.getPassword()));</span><br><span class="line"></span><br><span class="line">   userDao.save(user);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="密码验证"><a href="#密码验证" class="headerlink" title="密码验证"></a>密码验证</h5><p>service层</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String mobile,String password)</span> </span>{</span><br><span class="line">    <span class="comment">//先通过前台传过来的电话查询出user</span></span><br><span class="line">   User user=userDao.findByMobile(mobile);</span><br><span class="line">    <span class="comment">//再比对user的密码，用encoder.match(原密码,加密后的密码)</span></span><br><span class="line">   <span class="keyword">if</span>(user!=<span class="keyword">null</span>&amp;&amp;encoder.matches(password,user.getPassword())){</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">   }</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="JWT鉴权"><a href="#JWT鉴权" class="headerlink" title="JWT鉴权"></a>JWT鉴权</h3><h4 id="常见的鉴权方式"><a href="#常见的鉴权方式" class="headerlink" title="常见的鉴权方式"></a>常见的鉴权方式</h4><h5 id="Cookie认证"><a href="#Cookie认证" class="headerlink" title="Cookie认证"></a>Cookie认证</h5><p>Cookie认证机制就是为一次请求认证在服务端创建一个Session对象，同时在客户端 的浏览器端创建了一个Cookie对象；通过客户端带上来Cookie对象来与服务器端的 session对象匹配来实现状态管理的。</p><h5 id="Token认证"><a href="#Token认证" class="headerlink" title="Token认证"></a>Token认证</h5><p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是 这样的： </p><ol><li>客户端使用用户名跟密码请求登录 </li><li>服务端收到请求，去验证用户名与密码 </li><li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端 </li><li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里 </li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token </li><li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向 客户端返回请求的数据</li></ol><h5 id="两者对比Token的优势"><a href="#两者对比Token的优势" class="headerlink" title="两者对比Token的优势"></a>两者对比Token的优势</h5><ol><li>支持跨域访问: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提 是传输的用户认证信息通过HTTP头传输.</li><li>无状态:Token机制在服务端不需要存储session信息，因为 Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.</li><li>去耦: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在 你的API被调用的时候，你可以进行Token生成调用即可.</li><li>一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算的Token验证和解析要费时得多.</li><li>基于标准化:你的API可以采用标准化的 JSON Web Token (JWT)</li></ol><h4 id="JWT介绍"><a href="#JWT介绍" class="headerlink" title="JWT介绍"></a>JWT介绍</h4><p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名，且生成后都会采用base64进行编码。</p><h5 id="头部（Header）"><a href="#头部（Header）" class="headerlink" title="头部（Header）"></a>头部（Header）</h5><p>头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以 被表示成一个JSON对象，如下指明了采用了JWT的算法为HS256</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{<span class="attr">"typ"</span>:<span class="string">"JWT"</span>,<span class="attr">"alg"</span>:<span class="string">"HS256"</span>}</span><br></pre></td></tr></tbody></table></figure><p>base64编码后：eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</p><h5 id="载荷（playload）"><a href="#载荷（playload）" class="headerlink" title="载荷（playload）"></a>载荷（playload）</h5><p>一般包含ID，用户SUB，身份roles，比如</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{<span class="attr">"id"</span>:<span class="string">"1234567890"</span>,<span class="attr">"sub"</span>:<span class="string">"John Doe"</span>,<span class="attr">"roles"</span>:<span class="string">"admin"</span>}</span><br></pre></td></tr></tbody></table></figure><p>会再次进行base64编码</p><h5 id="签证（signature）"><a href="#签证（signature）" class="headerlink" title="签证（signature）"></a>签证（signature）</h5><p>包含头部，载荷，以及定义的salt，同样进行base编码</p><h5 id="最终JWT"><a href="#最终JWT" class="headerlink" title="最终JWT"></a>最终JWT</h5><p>会将三部分连接成一个字符串，以.连接</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6I kpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></tbody></table></figure><h4 id="JJWT：Java-JWT"><a href="#JJWT：Java-JWT" class="headerlink" title="JJWT：Java JWT"></a>JJWT：Java JWT</h4><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="在common包下的util包中创建JWT工具类"><a href="#在common包下的util包中创建JWT工具类" class="headerlink" title="在common包下的util包中创建JWT工具类"></a>在common包下的util包中创建JWT工具类</h5><p>这个工具类，需要提供ID,SUB,ROLE作为claims</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"jwt.config"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> ttl ;<span class="comment">//一个小时</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTtl</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> ttl;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTtl</span><span class="params">(<span class="keyword">long</span> ttl)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.ttl = ttl;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成JWT</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createJWT</span><span class="params">(String id, String subject, String roles)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> nowMillis = System.currentTimeMillis();</span><br><span class="line">        Date now = <span class="keyword">new</span> Date(nowMillis);</span><br><span class="line">        JwtBuilder builder = Jwts.builder().setId(id)</span><br><span class="line">                .setSubject(subject)</span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, key).claim(<span class="string">"roles"</span>, roles);</span><br><span class="line">        <span class="keyword">if</span> (ttl &gt; <span class="number">0</span>) {</span><br><span class="line">            builder.setExpiration( <span class="keyword">new</span> Date( nowMillis + ttl));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析JWT</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Claims <span class="title">parseJWT</span><span class="params">(String jwtStr)</span></span>{</span><br><span class="line">        <span class="keyword">return</span>  Jwts.parser()</span><br><span class="line">                .setSigningKey(key)</span><br><span class="line">                .parseClaimsJws(jwtStr)</span><br><span class="line">                .getBody();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>jwt.config哪里用到了这个工具类，哪里的application.yml添加jwt定义，哪里传入jwtUtil</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> JwtUtil <span class="title">jwtUtil</span><span class="params">()</span></span>{ </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> util.JwtUtil(); </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">jwt:</span> </span><br><span class="line">  <span class="attr">config:</span> </span><br><span class="line">    <span class="attr">key:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="attr">ttl:</span> <span class="number">360000</span></span><br></pre></td></tr></tbody></table></figure><h4 id="以admin的登陆与删除鉴权为例"><a href="#以admin的登陆与删除鉴权为例" class="headerlink" title="以admin的登陆与删除鉴权为例"></a>以admin的登陆与删除鉴权为例</h4><p>详见：<a href="https://xulilei.github.io/2020/06/18/十次方daySix/">https://xulilei.github.io/2020/06/18/%E5%8D%81%E6%AC%A1%E6%96%B9daySix/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringSecurity加密与JWT鉴权&quot;&gt;&lt;a href=&quot;#SpringSecurity加密与JWT鉴权&quot; class=&quot;headerlink&quot; title=&quot;SpringSecurity加密与JWT鉴权&quot;&gt;&lt;/a&gt;SpringSecurity加密与JWT
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring Security" scheme="https://xulilei.github.io/tags/Spring-Security/"/>
    
      <category term="BCryptPasswordEncoder" scheme="https://xulilei.github.io/tags/BCryptPasswordEncoder/"/>
    
      <category term="JWT" scheme="https://xulilei.github.io/tags/JWT/"/>
    
      <category term="鉴权" scheme="https://xulilei.github.io/tags/%E9%89%B4%E6%9D%83/"/>
    
      <category term="密码加密" scheme="https://xulilei.github.io/tags/%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>dayFive-rabbitmq</title>
    <link href="https://xulilei.github.io/2020/06/15/%E5%8D%81%E6%AC%A1%E6%96%B9dayFive/"/>
    <id>https://xulilei.github.io/2020/06/15/%E5%8D%81%E6%AC%A1%E6%96%B9dayFive/</id>
    <published>2020-06-15T10:53:31.000Z</published>
    <updated>2020-06-18T07:50:33.673Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用户注册模块搭建"><a href="#用户注册模块搭建" class="headerlink" title="用户注册模块搭建"></a>用户注册模块搭建</h3><h4 id="在user模块添加发送短信业务"><a href="#在user模块添加发送短信业务" class="headerlink" title="在user模块添加发送短信业务"></a>在user模块添加发送短信业务</h4><h5 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String mobile)</span> </span>{</span><br><span class="line">   <span class="comment">//生成六位随机数</span></span><br><span class="line">   String checkCode = RandomStringUtils.randomNumeric(<span class="number">6</span>);</span><br><span class="line">   <span class="comment">//向缓存中放一份</span></span><br><span class="line">       redisTemplate.opsForValue().set(<span class="string">"checkCode"</span>+mobile,checkCode,<span class="number">6</span>, TimeUnit.HOURS);</span><br><span class="line">   <span class="comment">//给用户发一份，先存放至rabbitmq中</span></span><br><span class="line">   Map&lt;String,String&gt;map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   map.put(<span class="string">"mobile"</span>,mobile);</span><br><span class="line">   map.put(<span class="string">"checkCode"</span>,checkCode);</span><br><span class="line">   rabbitTemplate.convertAndSend(<span class="string">"sms"</span>,map);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value =<span class="string">"/sendsms/{mobile}"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">sendMsg</span><span class="params">(@PathVariable String mobile)</span></span>{</span><br><span class="line">   userService.sendMsg(mobile);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"发送成功"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="在rabbitmq短信监听模块通过阿里云实施发送短信"><a href="#在rabbitmq短信监听模块通过阿里云实施发送短信" class="headerlink" title="在rabbitmq短信监听模块通过阿里云实施发送短信"></a>在rabbitmq短信监听模块通过阿里云实施发送短信</h4><h5 id="导入阿里云依赖"><a href="#导入阿里云依赖" class="headerlink" title="导入阿里云依赖"></a>导入阿里云依赖</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="根据阿里云官网API创建工具类"><a href="#根据阿里云官网API创建工具类" class="headerlink" title="根据阿里云官网API创建工具类"></a>根据阿里云官网API创建工具类</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsUtil</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String accessKeyId=<span class="string">"LTAI4GCjWSbTHQzGTaavF**"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String accessKeySecret=<span class="string">"sDiW0PSXaAKXfNfwCI8vaG4spE4**"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String signName=<span class="string">"******"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String templateCode=<span class="string">"SMS_1932477**"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">(String mobile,String checkCode)</span> </span>{</span><br><span class="line">        DefaultProfile profile = DefaultProfile.getProfile(<span class="string">"default"</span>, accessKeyId, accessKeySecret);</span><br><span class="line">        IAcsClient client = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line"></span><br><span class="line">        CommonRequest request = <span class="keyword">new</span> CommonRequest();</span><br><span class="line">        request.setSysMethod(MethodType.POST);</span><br><span class="line">        request.setSysDomain(<span class="string">"dysmsapi.aliyuncs.com"</span>);</span><br><span class="line">        request.setSysVersion(<span class="string">"2017-05-25"</span>);</span><br><span class="line">        request.setSysAction(<span class="string">"SendSms"</span>);</span><br><span class="line">        request.putQueryParameter(<span class="string">"PhoneNumbers"</span>, mobile);</span><br><span class="line">        request.putQueryParameter(<span class="string">"SignName"</span>, signName);</span><br><span class="line">        request.putQueryParameter(<span class="string">"TemplateCode"</span>, templateCode);</span><br><span class="line">        <span class="comment">//这里使用通配符，code要与在阿里云注册的模版相同</span></span><br><span class="line">        request.putQueryParameter(<span class="string">"TemplateParam"</span>, <span class="string">"{\"code\":"</span>+checkCode+<span class="string">"}"</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            CommonResponse response = client.getCommonResponse(request);</span><br><span class="line">            System.out.println(response.getData());</span><br><span class="line">        } <span class="keyword">catch</span> (ServerException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (ClientException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="创建rabbitmq监听器类"><a href="#创建rabbitmq监听器类" class="headerlink" title="创建rabbitmq监听器类"></a>创建rabbitmq监听器类</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"sms"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsListener</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsUtil smsUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeSms</span><span class="params">(Map&lt;String,String&gt; map)</span></span>{</span><br><span class="line">        String mobile = map.get(<span class="string">"mobile"</span>);</span><br><span class="line">        String checkCode = map.get(<span class="string">"checkCode"</span>);</span><br><span class="line">        smsUtil.sendSms(mobile,checkCode);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自此短信功能部署成功</p><h4 id="用户注册业务"><a href="#用户注册业务" class="headerlink" title="用户注册业务"></a>用户注册业务</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value =<span class="string">"/register/{code}"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">register</span><span class="params">(@PathVariable String code,@RequestBody User user)</span></span>{</span><br><span class="line">    <span class="comment">//先从缓存中拿到先前发送短信时存放的数据</span></span><br><span class="line">   String checkCodeRedis= (String) redisTemplate.opsForValue().get(<span class="string">"checkCode"</span>+user.getMobile());</span><br><span class="line">    <span class="comment">//比对数据</span></span><br><span class="line">   <span class="keyword">if</span>(checkCodeRedis.isEmpty()){</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>,StatusCode.ERROR,<span class="string">"未发送验证码"</span>);</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">if</span>(!checkCodeRedis.equals(code)){</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>,StatusCode.ERROR,<span class="string">"验证码错误"</span>);</span><br><span class="line">   }</span><br><span class="line">    <span class="comment">//比对成功，注册用户</span></span><br><span class="line">   userService.add(user);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"注册成功"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;用户注册模块搭建&quot;&gt;&lt;a href=&quot;#用户注册模块搭建&quot; class=&quot;headerlink&quot; title=&quot;用户注册模块搭建&quot;&gt;&lt;/a&gt;用户注册模块搭建&lt;/h3&gt;&lt;h4 id=&quot;在user模块添加发送短信业务&quot;&gt;&lt;a href=&quot;#在user模块添加发送短信业
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="rabbitmq" scheme="https://xulilei.github.io/tags/rabbitmq/"/>
    
      <category term="短信验证" scheme="https://xulilei.github.io/tags/%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81/"/>
    
      <category term="用户注册" scheme="https://xulilei.github.io/tags/%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ入门</title>
    <link href="https://xulilei.github.io/2020/06/15/RabbitMQ/"/>
    <id>https://xulilei.github.io/2020/06/15/RabbitMQ/</id>
    <published>2020-06-15T10:53:09.000Z</published>
    <updated>2020-06-17T02:33:31.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="消息中间件RabbitMQ"><a href="#消息中间件RabbitMQ" class="headerlink" title="消息中间件RabbitMQ"></a>消息中间件RabbitMQ</h3><h4 id="RabbitMQ简介"><a href="#RabbitMQ简介" class="headerlink" title="RabbitMQ简介"></a>RabbitMQ简介</h4><p>消息队列中间件是分布式系统中重要的组件，主要解决应用耦合，异步消息，流量削锋和消息通讯等问题，实现高性能，高可用，可伸缩和最终一致性的架构</p><h5 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h5><p>通过交换机再进入到队列中</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200616105202.png" alt=""></p><h5 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h5><h6 id="RabbitMQ-Server"><a href="#RabbitMQ-Server" class="headerlink" title="RabbitMQ Server"></a>RabbitMQ Server</h6><p>也叫broker server，它是一种传输服务。 他的角色就是维护一条 从Producer到Consumer的路线，保证数据能够按照指定的方式进行传输。</p><h6 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h6><p>消息生产者，如图A、B、C，数据的发送方。消息生产者连接RabbitMQ服 务器然后将消息投递到Exchange。 </p><h6 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h6><p>消息消费者，如图1、2、3，数据的接收方。消息消费者订阅队列， RabbitMQ将Queue中的消息发送到消息消费者。 </p><h6 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h6><p>生产者将消息发送到Exchange（交换器），由Exchange将消息路由到一个 或多个Queue中（或者丢弃）。Exchange并不存储消息。RabbitMQ中的Exchange有 direct、fanout、topic、headers四种类型，每种类型对应不同的路由规则。 </p><h6 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h6><p>队列是RabbitMQ的内部对象，用于存储消息。消息消费者就是通过订阅 队列来获取消息的，RabbitMQ中的消息都只能存储在Queue中，生产者生产消息并最终 投递到Queue中，消费者可以从Queue中获取消息并消费。多个消费者可以订阅同一个 Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者 都收到所有的消息并处理。 </p><h6 id="RoutingKey"><a href="#RoutingKey" class="headerlink" title="RoutingKey"></a>RoutingKey</h6><p>生产者在将消息发送给Exchange的时候，一般会指定一个routing key， 来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联 合使用才能最终生效。在Exchange Type与binding key固定的情况下（在正常使用时一 般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过 指定routing key来决定消息流向哪里。</p><h5 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h5><p>需要注意的是要配置多个接口</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run ‐di ‐‐name=tensquare_rabbitmq ‐p 5671:5617 ‐p 5672:5672 ‐p 4369:4369 ‐p 15671:15671 ‐p 15672:15672 ‐p 25672:25672 rabbitmq:management</span><br></pre></td></tr></tbody></table></figure><h4 id="主要知识点"><a href="#主要知识点" class="headerlink" title="主要知识点"></a>主要知识点</h4><h5 id="Exchange类型"><a href="#Exchange类型" class="headerlink" title="Exchange类型"></a>Exchange类型</h5><h6 id="direct模式"><a href="#direct模式" class="headerlink" title="direct模式"></a>direct模式</h6><p><img src="https://gitee.com/xulilei/pic/raw/master/20200616111243.png" alt=""></p><p>1、将消息发给唯一一个节点时使用这种模式，这是最简单的一种形式</p><p>2、这种模式下不需要将Exchange进行任何绑定(binding)操作 </p><p>3、消息传递时需要一个“RouteKey”，可以简单的理解为要发送到的队列名字</p><p>首先创建一个test队列</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200616104252.png" alt=""></p><p>以direct模式发送</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= RabApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ProductTest</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//这里的test就是queue的名字</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"test"</span>,<span class="string">"测试直接模式"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建消费者接受</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMsg</span><span class="params">(String msg)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"直接模式消费消息"</span>+msg);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200616104614.png" alt=""></p><p>该模式下，默认采用了负载均衡，即消费者从队列获取消息是均衡的</p><h6 id="分列模式"><a href="#分列模式" class="headerlink" title="分列模式"></a>分列模式</h6><p><img src="https://gitee.com/xulilei/pic/raw/master/20200616111559.png" alt=""></p><p>任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有 Queue上。 </p><p>1、这种模式不需要RouteKey </p><p>2、这种模式需要提前将Exchange与Queue进行绑定，一个Exchange可以绑定多个 Queue，一个Queue可以同多个Exchange进行绑定。 </p><p>3、如果接受到消息的Exchange没有与任何Queue绑定，则消息会被抛弃。+</p><h6 id="主题模式"><a href="#主题模式" class="headerlink" title="主题模式"></a>主题模式</h6><p><img src="https://gitee.com/xulilei/pic/raw/master/20200616152738.png" alt=""></p><p>任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的 Queue上</p><p>1、这种模式较为复杂，简单来说，就是每个队列都有其关心的主题，所有的消息都带有一 个“标题”(RouteKey)，Exchange会将消息转发到所有关注主题能与RouteKey模糊匹配的 队列。 </p><p>2、这种模式需要RouteKey，也许要提前绑定Exchange与Queue。</p><p>3、在进行绑定时，要提供一个该队列关心的主题，如“#.log.#”表示该队列关心所有涉及 log的消息(一个RouteKey为”MQ.log.error”的消息会被转发到该队列)。</p><p>4、“#”表示0个或若干个关键字，“”表示一个关键字。如“log.”能与“log.warn”匹配，无法 与“log.warn.timeout”匹配；但是“log.#”能与上述两者匹配。 </p><p>5、同样，如果Exchange没有发现能够与RouteKey匹配的Queue，则会抛弃此消息</p><h4 id="配合阿里云实现发送短信功能"><a href="#配合阿里云实现发送短信功能" class="headerlink" title="配合阿里云实现发送短信功能"></a>配合阿里云实现发送短信功能</h4><p>详见</p><p><a href="https://xulilei.github.io/2020/06/15/十次方dayFive/">https://xulilei.github.io/2020/06/15/%E5%8D%81%E6%AC%A1%E6%96%B9dayFive/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;消息中间件RabbitMQ&quot;&gt;&lt;a href=&quot;#消息中间件RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;消息中间件RabbitMQ&quot;&gt;&lt;/a&gt;消息中间件RabbitMQ&lt;/h3&gt;&lt;h4 id=&quot;RabbitMQ简介&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="rabbitmq" scheme="https://xulilei.github.io/tags/rabbitmq/"/>
    
      <category term="短信验证" scheme="https://xulilei.github.io/tags/%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>DayFour-elasticsearch</title>
    <link href="https://xulilei.github.io/2020/06/14/%E5%8D%81%E6%AC%A1%E6%96%B9DayFour/"/>
    <id>https://xulilei.github.io/2020/06/14/%E5%8D%81%E6%AC%A1%E6%96%B9DayFour/</id>
    <published>2020-06-14T10:34:44.000Z</published>
    <updated>2020-06-22T03:48:25.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="搜索微服务搭建"><a href="#搜索微服务搭建" class="headerlink" title="搜索微服务搭建"></a>搜索微服务搭建</h3><h4 id="使用spring-data-elasticsearch操作"><a href="#使用spring-data-elasticsearch操作" class="headerlink" title="使用spring-data-elasticsearch操作"></a>使用spring-data-elasticsearch操作</h4><h5 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="Pojo实体类"><a href="#Pojo实体类" class="headerlink" title="Pojo实体类"></a>Pojo实体类</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"articleindex"</span>,type = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//是否能被搜索到</span></span><br><span class="line">    <span class="comment">//是否分词，整体匹配还是分词匹配</span></span><br><span class="line">    <span class="comment">//是否在页面上显示，即数据库中在该实体类中的字段，就是要显示的,比如该例中的id title content state</span></span><br><span class="line">    <span class="comment">//analyzer,分词</span></span><br><span class="line">    <span class="comment">//searchAnalyzer，搜索</span></span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>,analyzer=<span class="string">"ik_max_word"</span>,searchAnalyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>,analyzer=<span class="string">"ik_max_word"</span>,searchAnalyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Article</span>,<span class="title">String</span>&gt; </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Article&gt; <span class="title">findByTitleOrContentLike</span><span class="params">(String title, String content, Pageable pageable)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IdWorker idWorker;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Article article)</span></span>{</span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//springdata系列分页的写法都是这个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Article&gt; <span class="title">findByKey</span><span class="params">(String key, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">        Pageable pageable= PageRequest.of(page-<span class="number">1</span>,size);</span><br><span class="line">        <span class="keyword">return</span>  articleDao.findByTitleOrContentLike(key,key,pageable);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/article"</span>)</span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">save</span><span class="params">(@RequestBody Article article)</span></span>{</span><br><span class="line">        articleService.save(article);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"存储成功"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/{key}/{page}/{size}"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findByKey</span><span class="params">(@PathVariable String key,@PathVariable <span class="keyword">int</span> page,@PathVariable <span class="keyword">int</span> size)</span></span>{</span><br><span class="line">        Page&lt;Article&gt;pageData=articleService.findByKey(key,page,size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"搜索成功"</span>,<span class="keyword">new</span> PageResult&lt;Article&gt;(pageData.getTotalElements(),pageData.getContent()));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="docker部署elasticsearch"><a href="#docker部署elasticsearch" class="headerlink" title="docker部署elasticsearch"></a>docker部署elasticsearch</h4><p><a href="https://xulilei.github.io/2020/06/12/elasticSearch入门/">https://xulilei.github.io/2020/06/12/elasticSearch%E5%85%A5%E9%97%A8/</a></p><h4 id="连接服务器，并测试存储到服务器的索引库"><a href="#连接服务器，并测试存储到服务器的索引库" class="headerlink" title="连接服务器，并测试存储到服务器的索引库"></a>连接服务器，并测试存储到服务器的索引库</h4><h5 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h5><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9007</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tensquare-search</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">192.168</span><span class="number">.152</span><span class="number">.128</span><span class="string">:9300</span></span><br></pre></td></tr></tbody></table></figure><p>postMan测试成功</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200615165805.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;搜索微服务搭建&quot;&gt;&lt;a href=&quot;#搜索微服务搭建&quot; class=&quot;headerlink&quot; title=&quot;搜索微服务搭建&quot;&gt;&lt;/a&gt;搜索微服务搭建&lt;/h3&gt;&lt;h4 id=&quot;使用spring-data-elasticsearch操作&quot;&gt;&lt;a href=&quot;#使用sp
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="elasticsearch" scheme="https://xulilei.github.io/tags/elasticsearch/"/>
    
      <category term="搜索功能" scheme="https://xulilei.github.io/tags/%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch从认识到发布</title>
    <link href="https://xulilei.github.io/2020/06/12/elasticSearch%E5%85%A5%E9%97%A8/"/>
    <id>https://xulilei.github.io/2020/06/12/elasticSearch%E5%85%A5%E9%97%A8/</id>
    <published>2020-06-12T07:54:05.000Z</published>
    <updated>2020-06-15T08:52:37.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分布式搜索引擎ElasticSearch"><a href="#分布式搜索引擎ElasticSearch" class="headerlink" title="分布式搜索引擎ElasticSearch"></a>分布式搜索引擎ElasticSearch</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><h5 id="与mysql数据库对比"><a href="#与mysql数据库对比" class="headerlink" title="与mysql数据库对比"></a>与mysql数据库对比</h5><table><thead><tr><th align="center">Elasticsearch</th><th align="center">关系型数据库Mysql</th></tr></thead><tbody><tr><td align="center">索引(index)</td><td align="center">数据库(databases)</td></tr><tr><td align="center">类型(type)</td><td align="center">表(table)</td></tr><tr><td align="center">文档(document)</td><td align="center">行(row)</td></tr></tbody></table><h4 id="restful风格操作ElasticSearch"><a href="#restful风格操作ElasticSearch" class="headerlink" title="restful风格操作ElasticSearch"></a>restful风格操作ElasticSearch</h4><h5 id="新建索引"><a href="#新建索引" class="headerlink" title="新建索引"></a>新建索引</h5><p>如果需要创建一个叫articleindex的索引 ,就以put方式提交 </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/</span><br></pre></td></tr></tbody></table></figure><h5 id="新建文档"><a href="#新建文档" class="headerlink" title="新建文档"></a>新建文档</h5><p>新建类型，在索引后追加类型： 以post方式提交 </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article</span><br></pre></td></tr></tbody></table></figure><h5 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h5><h6 id="查询全部"><a href="#查询全部" class="headerlink" title="查询全部"></a>查询全部</h6><p>_search，以get方式请求</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article/_search</span><br></pre></td></tr></tbody></table></figure><h6 id="按ID查询"><a href="#按ID查询" class="headerlink" title="按ID查询"></a>按ID查询</h6><p>以GET方式请求 </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article/1</span><br></pre></td></tr></tbody></table></figure><h6 id="匹配查询"><a href="#匹配查询" class="headerlink" title="匹配查询"></a>匹配查询</h6><p>根据title=aa进行查询，get方式提交下列地址：</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article/_search?q=title:aa</span><br></pre></td></tr></tbody></table></figure><h6 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h6><p>以*用代表任意字符： </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://192.168.184.134:9200/articleindex/article/_search?q=title:*s*</span><br></pre></td></tr></tbody></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><p>以put形式提交以下地址,如果ID存在则修改，否则添加</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article/1</span><br></pre></td></tr></tbody></table></figure><h5 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h5><p>根据ID删除文档,删除ID为1的文档 DELETE方式提交 </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://192.168.184.134:9200/articleindex/article/1</span><br></pre></td></tr></tbody></table></figure><h4 id="head插件操作ElasticSearch"><a href="#head插件操作ElasticSearch" class="headerlink" title="head插件操作ElasticSearch"></a>head插件操作ElasticSearch</h4><h5 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h5><h6 id="步骤1：-下载head插件："><a href="#步骤1：-下载head插件：" class="headerlink" title="步骤1： 下载head插件："></a>步骤1： 下载head插件：</h6><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://github.com/mobz/elasticsearch-head</span><br></pre></td></tr></tbody></table></figure><h6 id="步骤2：-将grunt安装为全局命令"><a href="#步骤2：-将grunt安装为全局命令" class="headerlink" title="步骤2： 将grunt安装为全局命令"></a>步骤2： 将grunt安装为全局命令</h6><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install ‐g grunt‐cli</span><br></pre></td></tr></tbody></table></figure><h6 id="步骤3：解决跨域问题"><a href="#步骤3：解决跨域问题" class="headerlink" title="步骤3：解决跨域问题"></a>步骤3：解决跨域问题</h6><p>修改elasticsearch配置文件：elasticsearch.yml，增加以下两句命令：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span> </span><br><span class="line"><span class="string">http.cors.allow‐origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></tbody></table></figure><h6 id="步骤4：-安装依赖并启动"><a href="#步骤4：-安装依赖并启动" class="headerlink" title="步骤4： 安装依赖并启动"></a>步骤4： 安装依赖并启动</h6><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cnpm install</span><br><span class="line">grunt server</span><br></pre></td></tr></tbody></table></figure><h5 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200614170620.png" alt=""></p><h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>Logstash是一款轻量级的日志搜集处理框架，可以方便的把分散的、多样化的日志搜集 起来，并进行自定义的处理，然后传输到指定的位置，比如某个服务器或者文件。</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>命令行参数: </p><p>-e ：执行（很少用）</p><p> -f：路径，后跟参数类型可以是一个字符串的配置或全路径文件名或全路径</p><p> 如：/etc/logstash.d/，logstash会自动读取/etc/logstash.d/目录下所有*.conf 的文 本文件，然后在自己内存里拼接成一个完整的大配置文件再去执行</p><h4 id="使用Logstash将数据库的内容同步到索引库"><a href="#使用Logstash将数据库的内容同步到索引库" class="headerlink" title="使用Logstash将数据库的内容同步到索引库"></a>使用Logstash将数据库的内容同步到索引库</h4><h5 id="模版，用到时直接填写"><a href="#模版，用到时直接填写" class="headerlink" title="模版，用到时直接填写"></a>模版，用到时直接填写</h5><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">{</span></span><br><span class="line">  <span class="string">jdbc</span> <span class="string">{</span></span><br><span class="line">  <span class="comment"># mysql jdbc connection string to our backup databse</span></span><br><span class="line">  <span class="string">jdbc_connection_string</span> <span class="string">=&gt;</span> <span class="string">"jdbc:mysql://192.168.xx.xx:3306/aaaaa?characterEncoding=UTF8"</span></span><br><span class="line">  <span class="comment"># the user we wish to excute our statement as</span></span><br><span class="line">  <span class="string">jdbc_user</span> <span class="string">=&gt;</span> <span class="string">"root"</span></span><br><span class="line">  <span class="string">jdbc_password</span> <span class="string">=&gt;</span> <span class="string">"root"</span></span><br><span class="line">  <span class="comment"># the path to our downloaded jdbc driver  </span></span><br><span class="line">  <span class="string">jdbc_driver_library</span> <span class="string">=&gt;</span> <span class="string">"C:\Users\xu\Desktop\tensquare\logstash-5.6.8\mysqletc\mysql-connector-java-5.1.46.jar"</span></span><br><span class="line">  <span class="comment"># the name of the driver class for mysql</span></span><br><span class="line">  <span class="string">jdbc_driver_class</span> <span class="string">=&gt;</span> <span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">  <span class="string">jdbc_paging_enabled</span> <span class="string">=&gt;</span> <span class="string">"true"</span></span><br><span class="line">  <span class="string">jdbc_page_size</span> <span class="string">=&gt;</span> <span class="string">"50"</span></span><br><span class="line">  <span class="comment">#以下对应着要执行的sql的绝对路径。</span></span><br><span class="line">  <span class="comment">#statement_filepath =&gt; ""</span></span><br><span class="line">  <span class="comment">#这个是要直接执行的sql语句</span></span><br><span class="line">  <span class="string">statement</span> <span class="string">=&gt;</span> <span class="string">""</span><span class="string">select</span> <span class="string">id,title,content,state</span> <span class="string">from</span> <span class="string">tb_article"</span></span><br><span class="line">  <span class="comment">#定时字段 各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新（测试结果，不同的话请留言指出）</span></span><br><span class="line">      <span class="string">schedule</span> <span class="string">=&gt;</span> <span class="string">"* * * * *"</span></span><br><span class="line">  <span class="string">}</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"></span><br><span class="line"><span class="string">output</span> <span class="string">{</span></span><br><span class="line">  <span class="string">elasticsearch</span> <span class="string">{</span></span><br><span class="line">  <span class="comment">#ESIP地址与端口</span></span><br><span class="line">  <span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">"127.0.0.1:9200"</span> </span><br><span class="line">  <span class="comment">#ES索引名称（自己定义的）</span></span><br><span class="line">  <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">"articleindex"</span></span><br><span class="line">  <span class="comment">#自增ID编号</span></span><br><span class="line">  <span class="string">document_id</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%{id}</span>"</span></span><br><span class="line">  <span class="string">document_type</span> <span class="string">=&gt;</span> <span class="string">"article"</span></span><br><span class="line">  <span class="string">}</span></span><br><span class="line">  <span class="string">stdout</span> <span class="string">{</span></span><br><span class="line">      <span class="comment">#以JSON格式输出</span></span><br><span class="line">      <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">json_lines</span></span><br><span class="line">  <span class="string">}</span></span><br><span class="line"><span class="string">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="再通过一下命令执行该文件"><a href="#再通过一下命令执行该文件" class="headerlink" title="再通过一下命令执行该文件"></a>再通过一下命令执行该文件</h5><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">logstash ‐f ../mysqletc/mysql.conf</span><br></pre></td></tr></tbody></table></figure><h5 id="结果返回"><a href="#结果返回" class="headerlink" title="结果返回"></a>结果返回</h5><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">{"@version":"1","id":"1","state":"1","@timestamp":"2020-06-15T03:35:00.106Z","title":"xu测试","content":"测试"}</span><br><span class="line">{"@version":"1","id":"1","state":"1","@timestamp":"2020-06-15T03:34:01.671Z","title":"xu测试","content":"测试"}</span><br></pre></td></tr></tbody></table></figure><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>删除数据库中的文件并不会导致索引库中的数据删除，可以约定一个state，当需要删除的时候更改state的值，在索引库中，查询约定state的值即可实现</p><h3 id="docker安装ES"><a href="#docker安装ES" class="headerlink" title="docker安装ES"></a>docker安装ES</h3><h4 id="安装ES容器"><a href="#安装ES容器" class="headerlink" title="安装ES容器"></a>安装ES容器</h4><h5 id="第一步，安装容器"><a href="#第一步，安装容器" class="headerlink" title="第一步，安装容器"></a>第一步，安装容器</h5><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run ‐di ‐‐name=tensquare_elasticsearch ‐p 9200:9200 ‐p 9300:9300 elasticsearch:5.6.8</span><br></pre></td></tr></tbody></table></figure><h5 id="第二步，允许其他ip地址访问"><a href="#第二步，允许其他ip地址访问" class="headerlink" title="第二步，允许其他ip地址访问"></a>第二步，允许其他ip地址访问</h5><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入elasticsearch容器的目录</span></span><br><span class="line">docker exec ‐it tensquare_elasticsearch /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash">拷贝容器中的配置文件到宿主机</span></span><br><span class="line">docker cp tensquare_elasticsearch:/usr/share/elasticsearch/config/elasticsearch.yml /usr/share/elasticsearch.yml</span><br><span class="line"><span class="meta">#</span><span class="bash">停止删除原来的容器</span></span><br><span class="line">docker stop tensquare_elasticsearch  docker rm tensquare_elasticsearch</span><br><span class="line"><span class="meta">#</span><span class="bash">重新安装容器，并挂载配置文件为/usr/share/elasticsearch.yml</span></span><br><span class="line">docker run ‐di ‐‐name=tensquare_elasticsearch ‐p 9200:9200 ‐p 9300:9300 ‐v /usr/share/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch .yml elasticsearch:5.6.8</span><br><span class="line"><span class="meta">#</span><span class="bash">修改/usr/share/elasticsearch.yml 将<span class="comment">#transport.host:0.0.0.0前的#去掉后保存文件退出。其作用是允许任何ip地址访问elasticsearch，并指定可以跨域</span></span></span><br><span class="line">transport.host:0.0.0.0</span><br><span class="line">http.cors.enabled: true </span><br><span class="line">http.cors.allow‐origin: "*"</span><br><span class="line"><span class="meta">#</span><span class="bash">重启容器</span></span><br><span class="line">docker restart tensquare_elasticsearch</span><br></pre></td></tr></tbody></table></figure><h5 id="第三部，如果遇到容器启动自动关闭，则需要优化配置-每个机器不同优化也不同"><a href="#第三部，如果遇到容器启动自动关闭，则需要优化配置-每个机器不同优化也不同" class="headerlink" title="第三部，如果遇到容器启动自动关闭，则需要优化配置(每个机器不同优化也不同)"></a>第三部，如果遇到容器启动自动关闭，则需要优化配置(每个机器不同优化也不同)</h5><p>可以参考</p><p><a href="https://blog.csdn.net/qq_34756221/article/details/105550037" target="_blank" rel="noopener">https://blog.csdn.net/qq_34756221/article/details/105550037</a></p><p><a href="https://www.cnblogs.com/jasonzeng/p/11584754.html" target="_blank" rel="noopener">https://www.cnblogs.com/jasonzeng/p/11584754.html</a></p><h4 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h4><p>先通过xftp将ik分词文件传送至服务器，再拷贝至es容器目录的plugins中</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker cp ik tensquare_elasticsearch:/usr/share/elasticsearch/plugins/</span><br></pre></td></tr></tbody></table></figure><h4 id="安装header"><a href="#安装header" class="headerlink" title="安装header"></a>安装header</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker run ‐di ‐‐name=myhead ‐p 9100:9100 docker pull mobz/elasticsearch‐ head:5</span><br></pre></td></tr></tbody></table></figure><h4 id="成功页面展示"><a href="#成功页面展示" class="headerlink" title="成功页面展示"></a>成功页面展示</h4><h5 id="head插件展示"><a href="#head插件展示" class="headerlink" title="head插件展示"></a>head插件展示</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200615164944.png" alt=""></p><h5 id="ik分词器展示"><a href="#ik分词器展示" class="headerlink" title="ik分词器展示"></a>ik分词器展示</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200615165033.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分布式搜索引擎ElasticSearch&quot;&gt;&lt;a href=&quot;#分布式搜索引擎ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;分布式搜索引擎ElasticSearch&quot;&gt;&lt;/a&gt;分布式搜索引擎ElasticSearch&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="ElasticSearch" scheme="https://xulilei.github.io/tags/ElasticSearch/"/>
    
      <category term="Logstash" scheme="https://xulilei.github.io/tags/Logstash/"/>
    
      <category term="ik分词器" scheme="https://xulilei.github.io/tags/ik%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    
      <category term="docker" scheme="https://xulilei.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>DayThree-mongoDB</title>
    <link href="https://xulilei.github.io/2020/06/09/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <id>https://xulilei.github.io/2020/06/09/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%B8%89%E5%A4%A9/</id>
    <published>2020-06-09T08:25:22.000Z</published>
    <updated>2020-06-22T02:57:13.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day03"><a href="#Day03" class="headerlink" title="Day03"></a>Day03</h2><h4 id="什么是MongoDB"><a href="#什么是MongoDB" class="headerlink" title="什么是MongoDB"></a>什么是MongoDB</h4><p>​    MongoDB 是一个跨平台的，面向文档的数据库，是当前 NoSQL 数据库产品中最热 门 的一种。它介于关系数据库和非关系数据库之间，是非关系数据库当中功能最丰富，最像关系数据库的产品。它支持的数据结构非常松散，是类似 JSON 的 BSON 格式，因此可以存储比较复杂的数据类型。</p><h4 id="MongoDB适用场景"><a href="#MongoDB适用场景" class="headerlink" title="MongoDB适用场景"></a>MongoDB适用场景</h4><p>​    适用于场景数据量大，数据价值相对低的情况</p><h4 id="MongoDB体系结构"><a href="#MongoDB体系结构" class="headerlink" title="MongoDB体系结构"></a>MongoDB体系结构</h4><p>（1）MongoDB 的文档（document），相当于关系数据库中的一行记录。 </p><p>（2）多个文档组成一个集合（collection），相当于关系数据库的表。 </p><p>（3）多个集合（collection），逻辑上组织在一起，就是数据库（database）。</p><h4 id="服务器创建Docker-MongoDB容器"><a href="#服务器创建Docker-MongoDB容器" class="headerlink" title="服务器创建Docker MongoDB容器"></a>服务器创建Docker MongoDB容器</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@pinyoyougou-docker ~]# docker run -di --name=tensquare_mongo -p 27017:27017 mongo</span><br></pre></td></tr></tbody></table></figure><h4 id="MongoDB语法"><a href="#MongoDB语法" class="headerlink" title="MongoDB语法"></a>MongoDB语法</h4><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">use 数据库名称//如果不存在则自动创建</span><br></pre></td></tr></tbody></table></figure><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">db.集合名称.insert(数据);//插入文档的语法格式</span><br><span class="line">比如db.spit.insert({<span class="keyword">content</span>:<span class="string">"听说十次方课程很给力呀"</span>,userid:<span class="string">"1011"</span>,nickname:<span class="string">"小雅"</span>,visits:NumberInt(<span class="number">902</span>)})</span><br></pre></td></tr></tbody></table></figure><h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">db.集合名称.find()//查询所有</span><br><span class="line">db.spit.find().limit(3)//限定返回3条</span><br><span class="line">db.spit.find({userid:'1013'})//查询userid=1013的文档</span><br></pre></td></tr></tbody></table></figure><h5 id="修改与删除数据"><a href="#修改与删除数据" class="headerlink" title="修改与删除数据"></a>修改与删除数据</h5><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">db.集合名称.update(条件,修改后的数据)</span><br><span class="line">//如果我们想修改_id为<span class="number">1</span>的记录，浏览量为<span class="number">1000</span>，输入以下语句：</span><br><span class="line">db.spit.update({_id:<span class="string">"1"</span>},{visits:NumberInt(<span class="number">1000</span>)})</span><br><span class="line">执行后，我们会发现，这条文档除了visits字段其它字段都不见了，为了解决这个问题，我们需要使用修改器$<span class="keyword">set</span>来实现，命令如下：</span><br><span class="line">db.spit.update({_id:<span class="string">"2"</span>},{$<span class="keyword">set</span>:{visits:NumberInt(<span class="number">2000</span>)}})</span><br><span class="line">//删除指定文档</span><br><span class="line">db.集合名称.remove(条件)</span><br></pre></td></tr></tbody></table></figure><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">MongoDB的模糊查询是通过正则表达式的方式实现的</span><br><span class="line">格式为：db.集合名称.find({content:/aaa/})</span><br><span class="line">例如，我要查询吐槽内容包含“流量”的所有文档，代码如下：</span><br><span class="line">db.spit.find({content:/流量/})</span><br><span class="line">如果要查询吐槽内容中以“加班”开头的，代码如下：</span><br><span class="line">db.spit.find({content:/^加班/})</span><br></pre></td></tr></tbody></table></figure><h5 id="大于-小于-不等于"><a href="#大于-小于-不等于" class="headerlink" title="大于 小于 不等于"></a>大于 小于 不等于</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">db.集合名称.find({ "field" : { $gt: value }}) // 大于: field &gt; value</span><br><span class="line">db.集合名称.find({ "field" : { $lt: value }}) // 小于: field &lt; value</span><br><span class="line">db.集合名称.find({ "field" : { $gte: value }}) // 大于等于: field &gt;= value</span><br><span class="line">db.集合名称.find({ "field" : { $lte: value }}) // 小于等于: field &lt;= value</span><br><span class="line">db.集合名称.find({ "field" : { $ne: value }}) // 不等于: field != value</span><br></pre></td></tr></tbody></table></figure><h5 id="包含与不包含"><a href="#包含与不包含" class="headerlink" title="包含与不包含"></a>包含与不包含</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">包含使用$in操作符。</span><br><span class="line">示例：查询吐槽集合中userid字段包含1013和1014的文档</span><br><span class="line">db.spit.find({userid:{$in:["1013","1014"]}})</span><br><span class="line">不包含使用$nin操作符。</span><br><span class="line">示例：查询吐槽集合中userid字段不包含1013和1014的文档</span><br><span class="line">db.spit.find({userid:{$nin:["1013","1014"]}})</span><br></pre></td></tr></tbody></table></figure><h5 id="条件连接"><a href="#条件连接" class="headerlink" title="条件连接"></a>条件连接</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">我们如果需要查询同时满足两个以上条件，需要使用$and操作符将条件进行关联。（相当于SQL的and）</span><br><span class="line">格式为：$and:[{ },{ },{ }]</span><br><span class="line">示例：查询吐槽集合中visits大于等于1000 并且小于2000的文档</span><br><span class="line">db.spit.find({$and:[ {visits:{$gte:1000}} ,{visits:{$lt:2000}}]})</span><br><span class="line"></span><br><span class="line">如果两个以上条件之间是或者的关系，我们使用 操作符进行关联，与前面and的使用方式相同</span><br><span class="line">格式为：$or:[{ },{ },{ }]</span><br><span class="line">示例：查询吐槽集合中userid为1013，或者浏览量小于2000的文档记录</span><br><span class="line">db.spit.find({$or:[ {userid:"1013"} ,{visits:{$lt:2000} }]})</span><br></pre></td></tr></tbody></table></figure><h5 id="列值增长"><a href="#列值增长" class="headerlink" title="列值增长"></a>列值增长</h5><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">如果我们想实现对某列值在原有值的基础上进行增加或减少，可以使用$inc运算符来实现</span><br><span class="line">db.spit.update({_id:<span class="string">"2"</span>},{$inc:{visits:NumberInt(<span class="number">1</span>)}})</span><br></pre></td></tr></tbody></table></figure><h4 id="JAVA操作MongoDB"><a href="#JAVA操作MongoDB" class="headerlink" title="JAVA操作MongoDB"></a>JAVA操作MongoDB</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDemo</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    MongoClient client=<span class="keyword">new</span> MongoClient(<span class="string">"192.168.184.134"</span>);<span class="comment">//创建连接</span></span><br><span class="line">    MongoDatabase spitdb = client.getDatabase(<span class="string">"spitdb"</span>);<span class="comment">//打开数据库</span></span><br><span class="line">    MongoCollection&lt;Document&gt; spit = spitdb.getCollection(<span class="string">"spit"</span>);<span class="comment">//获取集合</span></span><br><span class="line">     <span class="comment">//条件查询</span></span><br><span class="line">     <span class="comment">//BasicDBObject bson=new BasicDBObject("userid","1013");// 构建查询条件</span></span><br><span class="line">     <span class="comment">//BasicDBObject bson=new BasicDBObject("visits",newBasicDBObject("$gt",1000) );</span></span><br><span class="line">     <span class="comment">//FindIterable&lt;Document&gt; documents = spit.find(bson);//查询记录获取结果集合</span></span><br><span class="line">    FindIterable&lt;Document&gt; documents = spit.find();<span class="comment">//查询记录获取文档集合</span></span><br><span class="line">    <span class="keyword">for</span>(Document document:documents){ <span class="comment">//</span></span><br><span class="line">      System.out.println(<span class="string">"内容："</span>+ document.getString(<span class="string">"content"</span>));</span><br><span class="line">      System.out.println(<span class="string">"用户ID:"</span>+document.getString(<span class="string">"userid"</span>));</span><br><span class="line">      System.out.println(<span class="string">"浏览量："</span>+document.getInteger(<span class="string">"visits"</span>));</span><br><span class="line">    }</span><br><span class="line">     <span class="comment">//插入数据</span></span><br><span class="line">     Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap();</span><br><span class="line">     map.put(<span class="string">"content"</span>,<span class="string">"我要吐槽"</span>);</span><br><span class="line">     map.put(<span class="string">"userid"</span>,<span class="string">"9999"</span>);</span><br><span class="line">     map.put(<span class="string">"visits"</span>,<span class="number">123</span>);</span><br><span class="line">     map.put(<span class="string">"publishtime"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">     Document document=<span class="keyword">new</span> Document(map);</span><br><span class="line">     spit.insertOne(document);</span><br><span class="line">     client.close();<span class="comment">//关闭连接</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="SpringDataMongoDB"><a href="#SpringDataMongoDB" class="headerlink" title="SpringDataMongoDB"></a>SpringDataMongoDB</h4><p>增删改查与SpringDataJPA几乎一样，详细用法参考<a href="https://xulilei.github.io/2020/06/08/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AEDay2/">https://xulilei.github.io/2020/06/08/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AEDay2/</a></p><h5 id="通过MongoTemplate原生方式实现数据自增"><a href="#通过MongoTemplate原生方式实现数据自增" class="headerlink" title="通过MongoTemplate原生方式实现数据自增"></a>通过MongoTemplate原生方式实现数据自增</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thumbUp</span><span class="params">(String id)</span></span>{</span><br><span class="line">        <span class="comment">//方式一,与数据库多次交互性能较低</span></span><br><span class="line">        Spit spit=spitDao.findById(id).get();</span><br><span class="line">        spit.setThumbup((spit.getThumbup()==<span class="keyword">null</span>?<span class="number">0</span>:spit.getThumbup())+<span class="number">1</span>);</span><br><span class="line">        spitDao.save(spit);</span><br><span class="line">        <span class="comment">//相当于使用原生mongo命令实现自增：db.spit.update({"_id":"1"},{$inc:{thumbup:NumberInt(1)}})</span></span><br><span class="line">        Query query=<span class="keyword">new</span> Query();</span><br><span class="line">        query.addCriteria(Criteria.where(<span class="string">"_id"</span>).is(<span class="string">"id"</span>));</span><br><span class="line">        Update update=<span class="keyword">new</span> Update();</span><br><span class="line">        update.inc(<span class="string">"thumbup"</span>,<span class="number">1</span>);</span><br><span class="line">        mongoTemplate.updateFirst(query,update,<span class="string">"spit"</span>);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Day03&quot;&gt;&lt;a href=&quot;#Day03&quot; class=&quot;headerlink&quot; title=&quot;Day03&quot;&gt;&lt;/a&gt;Day03&lt;/h2&gt;&lt;h4 id=&quot;什么是MongoDB&quot;&gt;&lt;a href=&quot;#什么是MongoDB&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="MongoDB" scheme="https://xulilei.github.io/tags/MongoDB/"/>
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>DayTwo-SpringDataJpa</title>
    <link href="https://xulilei.github.io/2020/06/08/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AEDay2/"/>
    <id>https://xulilei.github.io/2020/06/08/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AEDay2/</id>
    <published>2020-06-08T07:23:13.000Z</published>
    <updated>2020-06-18T07:50:05.929Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringDataJpa"><a href="#SpringDataJpa" class="headerlink" title="SpringDataJpa"></a>SpringDataJpa</h3><h4 id="通过new-Specification实现条件查询"><a href="#通过new-Specification实现条件查询" class="headerlink" title="通过new Specification实现条件查询"></a>通过new Specification实现条件查询</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Label&gt; <span class="title">findSearch</span><span class="params">(Label label)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> labelDao.findAll(<span class="keyword">new</span> Specification&lt;Label&gt;() {</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 采用内部类，方式实现</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root 根对象，也就是说要把条件封装到哪个对象中去</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> query 查询关键字，比如groupBy，orderBy等</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cb 用来封装条件对象的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> 如果返回null，则代表不需要任何条件</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Label&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>{</span><br><span class="line">                List&lt;Predicate&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="comment">//相当于 where labelname like "%小明%"</span></span><br><span class="line">                <span class="keyword">if</span>(label.getLabelname()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getLabelname())){</span><br><span class="line">                    Predicate predicate = cb.like(root.get("labelname").as(String.class), "%" +           label.getLabelname() + "%");</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                }</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(label.getState()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getState())){</span><br><span class="line">                    Predicate predicate = cb.equal(root.get(<span class="string">"state"</span>).as(String<span class="class">.<span class="keyword">class</span>),  <span class="title">label</span>.<span class="title">getState</span>())</span>;</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                }</span><br><span class="line">                Predicate[] parr=<span class="keyword">new</span> Predicate[list.size()];</span><br><span class="line">                list.toArray(parr);</span><br><span class="line">                <span class="comment">//相当于查询where condition A and condition B</span></span><br><span class="line">                <span class="keyword">return</span> cb.and(parr);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"><span class="comment">//controller层</span></span><br><span class="line"> <span class="meta">@RequestMapping</span>(value = <span class="string">"/search"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findSearch</span><span class="params">(@RequestBody Label label)</span></span>{</span><br><span class="line">        List&lt;Label&gt;list=labelService.findSearch(label);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"查询成功"</span>,list);</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h4 id="分页与条件查询"><a href="#分页与条件查询" class="headerlink" title="分页与条件查询"></a>分页与条件查询</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Label&gt; <span class="title">findSearchAndPageQuery</span><span class="params">(Label label, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">        <span class="comment">//封装一个分页对象</span></span><br><span class="line">        Pageable pageable=PageRequest.of(page-<span class="number">1</span>,size);</span><br><span class="line">        <span class="keyword">return</span> labelDao.findAll(<span class="keyword">new</span> Specification&lt;Label&gt;() {</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root 根对象，也就是说要把条件封装到哪个对象中去</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> query 查询关键字，比如groupBy，orderBy等</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cb 用来封装条件对象的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> 如果返回null，则代表不需要任何条件</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Label&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>{</span><br><span class="line">                List&lt;Predicate&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="comment">//相当于 where labelname like "%小明%"</span></span><br><span class="line">                <span class="keyword">if</span>(label.getLabelname()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getLabelname())){</span><br><span class="line">                    Predicate predicate = cb.like(root.get("labelname").as(String.class), "%" + label.getLabelname() + "%");</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(label.getState()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getState())){</span><br><span class="line">                    Predicate predicate = cb.equal(root.get(<span class="string">"state"</span>).as(String<span class="class">.<span class="keyword">class</span>),  <span class="title">label</span>.<span class="title">getState</span>())</span>;</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                }</span><br><span class="line">                Predicate[] parr=<span class="keyword">new</span> Predicate[list.size()];</span><br><span class="line">                list.toArray(parr);</span><br><span class="line">                <span class="keyword">return</span> cb.and(parr);</span><br><span class="line">            }</span><br><span class="line">        },pageable);</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//controller层</span></span><br><span class="line"> <span class="meta">@RequestMapping</span>(value = <span class="string">"/search/{page}/{size}"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findSearchAndPageQuery</span><span class="params">(@RequestBody Label label,@PathVariable <span class="keyword">int</span> page,@PathVariable <span class="keyword">int</span> size)</span></span>{</span><br><span class="line">        Page&lt;Label&gt; pageData=labelService.findSearchAndPageQuery(label,page,size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"查询成功"</span>,<span class="keyword">new</span> PageResult&lt;Label&gt;(pageData.getTotalElements(),pageData.getContent()));</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//用来封装pageResult的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; rows;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotal</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(<span class="keyword">long</span> total)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getRows</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRows</span><span class="params">(List&lt;T&gt; rows)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.rows = rows;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(<span class="keyword">long</span> total, List&lt;T&gt; rows)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.rows = rows;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="在Dao层通过方法命名方式生成sql语句"><a href="#在Dao层通过方法命名方式生成sql语句" class="headerlink" title="在Dao层通过方法命名方式生成sql语句"></a>在Dao层通过方法命名方式生成sql语句</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EnterpriseDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Enterprise</span>,<span class="title">String</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Enterprise</span>&gt;</span>{</span><br><span class="line">      <span class="comment">//相当于where ishot=? </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Enterprise&gt; <span class="title">findByIshot</span><span class="params">(String ishot)</span></span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RecruitDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Recruit</span>,<span class="title">String</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Recruit</span>&gt;</span>{</span><br><span class="line"><span class="comment">//相当于where state=？ order by Createtime，并且取前6个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Recruit&gt; <span class="title">findTop6ByStateOrderByCreatetimeDesc</span><span class="params">(String state)</span></span>;</span><br><span class="line">    <span class="comment">//相当于where state！=？order by createtime。并且取前6个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Recruit&gt; <span class="title">findTop6ByStateNotOrderByCreatetimeDesc</span><span class="params">(String state)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>具体命名规则参考<a href="https://www.cnblogs.com/oxygenG/p/10057525.html。" target="_blank" rel="noopener">https://www.cnblogs.com/oxygenG/p/10057525.html。</a></p><h4 id="处理多对多关系"><a href="#处理多对多关系" class="headerlink" title="处理多对多关系"></a>处理多对多关系</h4><p>在数据库端处理多对多的关系，必须需要借助中间表。而在java端，只需要在一个对象中放入另一个对象的list集合即可。如果不创建实体类，则需要通过原生的sql语句执行</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//通过这个查询语句，才能够实现pageable的分页功能</span></span><br><span class="line"><span class="meta">@Query</span>(value=<span class="string">"SELECT *  FROM tb_problem,tb_pl WHERE id=problemid AND labelid=:labelid ORDER BY ?#{#pageable}"</span>,</span><br><span class="line">       countQuery = <span class="string">"select count(*) from tb_problem ,tb_pl where id=problemid AND labelid=:labelid"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Problem&gt; <span class="title">newList</span><span class="params">(@Param(<span class="string">"labelid"</span>)</span> String labelid, Pageable pageable)</span>;</span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="https://blog.csdn.net/tt____tt/article/details/81027269?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">https://blog.csdn.net/tt____tt/article/details/81027269?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></p><h4 id="事务支持"><a href="#事务支持" class="headerlink" title="事务支持"></a>事务支持</h4><p>1、Dao层，在可能产生线程问题的语句上添加@Modifying</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"update tb_article set state='1' where id=?1"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateState</span><span class="params">(String id)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>2、Service层开启注解支持@Transactional</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="缓存的应用"><a href="#缓存的应用" class="headerlink" title="缓存的应用"></a>缓存的应用</h4><h5 id="Redis–有过期时间限制"><a href="#Redis–有过期时间限制" class="headerlink" title="Redis–有过期时间限制"></a>Redis–有过期时间限制</h5><p>1、添加SpringDataRedis依赖</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、服务端Docker开启Redis镜像，生成redis容器</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@pinyoyougou-docker ~]# docker run -di --name=tensquare_redis -p 6379:6379 redis</span><br></pre></td></tr></tbody></table></figure><p>3、application.ymal配置host</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="string">.*.*</span></span><br></pre></td></tr></tbody></table></figure><p>4、业务逻辑调用</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">findById</span><span class="params">(String id)</span> </span>{</span><br><span class="line"><span class="comment">//先从缓存中查询当前对象</span></span><br><span class="line">Article article= (Article) redisTemplate.opsForValue().get(<span class="string">"article_"</span>+id);</span><br><span class="line"><span class="comment">//如果没有渠道</span></span><br><span class="line"><span class="keyword">if</span>(article==<span class="keyword">null</span>){</span><br><span class="line">article = articleDao.findById(id).get();</span><br><span class="line"><span class="comment">//存入缓存</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"article_"</span>+id,article);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> article;</span><br><span class="line">}</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        <span class="comment">//删除缓存</span></span><br><span class="line">redisTemplate.delete(<span class="string">"article_"</span>+id);</span><br><span class="line">articleDao.deleteById(id);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>redisTemplate用法</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">stringRedisTemplate.opsForValue().set(<span class="string">"test"</span>, <span class="string">"100"</span>,<span class="number">60</span>*<span class="number">10</span>,TimeUnit.SECONDS);<span class="comment">//向redis里存入数据和设置缓存时间</span></span><br><span class="line">stringRedisTemplate.opsForValue().get(<span class="string">"test"</span>)<span class="comment">//根据key获取缓存中的val</span></span><br><span class="line">stringRedisTemplate.delete(<span class="string">"test"</span>);<span class="comment">//根据key删除缓存</span></span><br><span class="line">stringRedisTemplate.hasKey(<span class="string">"546545"</span>);<span class="comment">//检查key是否存在，返回boolean值</span></span><br></pre></td></tr></tbody></table></figure><h5 id="SpringCache–无过期时间限制"><a href="#SpringCache–无过期时间限制" class="headerlink" title="SpringCache–无过期时间限制"></a>SpringCache–无过期时间限制</h5><p>1、SpringApplication开启SpringCache</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatApplication</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、业务层调用，@Cacheable为存，@CacheEvict为删</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="meta">@Cacheable</span>(value = <span class="string">"gathering"</span>,key = <span class="string">"#id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Gathering <span class="title">findById</span><span class="params">(String id)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> gatheringDao.findById(id).get();</span><br><span class="line">}</span><br><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"gathering"</span>,key = <span class="string">"#gathering.id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Gathering gathering)</span> </span>{</span><br><span class="line">gatheringDao.save(gathering);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="第二天总结"><a href="#第二天总结" class="headerlink" title="第二天总结"></a>第二天总结</h3><p>掌握了条件与分页查询，Dao层方法命名规则，事务支持，缓存</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SpringDataJpa&quot;&gt;&lt;a href=&quot;#SpringDataJpa&quot; class=&quot;headerlink&quot; title=&quot;SpringDataJpa&quot;&gt;&lt;/a&gt;SpringDataJpa&lt;/h3&gt;&lt;h4 id=&quot;通过new-Specification实现
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="SpringDataJPA" scheme="https://xulilei.github.io/tags/SpringDataJPA/"/>
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门篇</title>
    <link href="https://xulilei.github.io/2020/06/05/Docker%E5%85%A5%E9%97%A8/"/>
    <id>https://xulilei.github.io/2020/06/05/Docker%E5%85%A5%E9%97%A8/</id>
    <published>2020-06-05T07:57:43.000Z</published>
    <updated>2020-06-15T09:09:13.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker入门"><a href="#Docker入门" class="headerlink" title="Docker入门"></a>Docker入门</h1><h4 id="Dokcer为什么会出现？"><a href="#Dokcer为什么会出现？" class="headerlink" title="Dokcer为什么会出现？"></a>Dokcer为什么会出现？</h4><p>一款产品从开发到上线，一般都需要两套环境。而环境的配置十分麻烦，Docker给出了解决方案</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><p>java–jar（环境）–打包项目带上环境（即Docker镜像）–Docker仓库–下载我们发布的镜像–直接运行即可。</p><h4 id="虚拟机技术特点"><a href="#虚拟机技术特点" class="headerlink" title="虚拟机技术特点"></a>虚拟机技术特点</h4><p>1、资源占用十分多</p><p>2、冗余步骤多</p><p>3、启动很慢</p><p>如下图所示，多个APP共享一个lib环境，可能会造成端口冲突等环境冲突的问题</p><p><img src="https://gitee.com/xulilei/pic/raw/master/TIM%E5%9B%BE%E7%89%8720200603160240.png" alt=""></p><h4 id="容器化技术"><a href="#容器化技术" class="headerlink" title="容器化技术"></a>容器化技术</h4><p>如下图所示，每个模块拥有独属于自己运行的环境，各个模块之间相互隔离</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200603160535.png" alt=""></p><h4 id="Docker的相关概念"><a href="#Docker的相关概念" class="headerlink" title="Docker的相关概念"></a>Docker的相关概念</h4><h5 id="Docker架构图"><a href="#Docker架构图" class="headerlink" title="Docker架构图"></a>Docker架构图</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200603161527.png" alt=""></p><h5 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h5><h6 id="镜像：images"><a href="#镜像：images" class="headerlink" title="镜像：images"></a>镜像：images</h6><p>​    通过这个模版来创建容器服务，比如Mysql镜像–通过Docker运行后，便成为了一个提供服务的容器,一个镜像可以创建多个容器</p><h5 id="容器：container"><a href="#容器：container" class="headerlink" title="容器：container"></a>容器：container</h5><p>​    提供服务，可以启动、停止、删除等，可类比为一个简单的linux系统</p><h5 id="仓库：repository"><a href="#仓库：repository" class="headerlink" title="仓库：repository"></a>仓库：repository</h5><p>​    存放镜像的地方，分为共有仓库和私有仓库</p><h4 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h4><p>1、search：可在命令行和dockerHub上搜索对应版本</p><p>2、pull：拉去下载该镜像</p><p>3、docker images：查看本机上的镜像</p><p>3、运行该镜像 </p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --name nginx01 -p 3344:80 nginx </span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个名字为nginx01的nginx镜像，公网访问地址为3344，内部地址为80，并运行该镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d 后台运行、--name 命名、-p 端口号</span></span><br></pre></td></tr></tbody></table></figure><p>4、内部测试</p><p>​    curl localhost:3344</p><h4 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h4><h5 id="结构示意图如下"><a href="#结构示意图如下" class="headerlink" title="结构示意图如下"></a>结构示意图如下</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200605154253.png" alt=""></p><p>防止容器删除后数据丢失，通过实现容器间数据共享，并将产生的数据备份到linux的文件系统上</p><p>总结一句话就是：容器的持久化和容器间的同步操作。</p><h5 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h5><p>​    -v 主机目录:容器内目录  —&gt;映射容器内的目录到主机上</p><p>​    参考<a href="https://xulilei.github.io/2020/06/12/elasticSearch入门/">https://xulilei.github.io/2020/06/12/elasticSearch%E5%85%A5%E9%97%A8/</a> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker入门&quot;&gt;&lt;a href=&quot;#Docker入门&quot; class=&quot;headerlink&quot; title=&quot;Docker入门&quot;&gt;&lt;/a&gt;Docker入门&lt;/h1&gt;&lt;h4 id=&quot;Dokcer为什么会出现？&quot;&gt;&lt;a href=&quot;#Dokcer为什么会出现？&quot; c
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Docker" scheme="https://xulilei.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>DayOne-架构</title>
    <link href="https://xulilei.github.io/2020/06/02/%E5%8D%81%E6%AC%A1%E6%96%B9%E7%A4%BE%E4%BA%A4%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE/"/>
    <id>https://xulilei.github.io/2020/06/02/%E5%8D%81%E6%AC%A1%E6%96%B9%E7%A4%BE%E4%BA%A4%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-06-02T11:02:13.000Z</published>
    <updated>2020-06-22T03:48:48.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DayOne"><a href="#DayOne" class="headerlink" title="DayOne"></a>DayOne</h2><h3 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h3><p>SpringBoot+SpringCloud+SpringMVC+SpringData，也称这种架构模式为spring全家桶</p><h3 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h3><p>不再采取按dao，service层划分模块，而是基于每个微服务，再将每个模块封装成一个镜像，再通过springCloud连接起来。因此在每个微服务中便不需要再写接口，因为每个微服务就是最小模块 </p><p><img src="https://gitee.com/xulilei/pic/raw/master/image-20200602161001068.png" alt=""></p><h3 id="开发API"><a href="#开发API" class="headerlink" title="开发API"></a>开发API</h3><p>通过swagger封装，Nginx代理，形成的API开发文档</p><p><img src="https://gitee.com/xulilei/pic/raw/master/image-20200602154755423.png" alt=""></p><h3 id="Restful开发风格"><a href="#Restful开发风格" class="headerlink" title="Restful开发风格"></a>Restful开发风格</h3><p>我们在项目中经常用到增删改查：get/post/put/delete四种方法，安全：操作不会出现脏读、幻读等操作。幂等：查询成功后不会对数据库造成影响</p><ul><li>Get查询是安全且幂等的</li><li>Post是不安全且不幂等的</li><li>Put改是不安全且幂等的</li><li>Delete删是不安全且幂等的</li></ul><h3 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h3><h4 id="Mysql环境搭建"><a href="#Mysql环境搭建" class="headerlink" title="Mysql环境搭建"></a>Mysql环境搭建</h4><p>创建虚拟机，安装docker，下载Mysql镜像，在服务器(192.168.152.128)运行并从本地连接完成建表</p><h4 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h4><p>主要是一些子模块都需要的依赖配置在这里</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud全家桶父工程推荐默认配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="模块搭建"><a href="#模块搭建" class="headerlink" title="模块搭建"></a>模块搭建</h4><h5 id="公共模块搭建，根据swagger约定，封装数据传输到前端。其中utils包下的idWoker根据雪花算法，可以生成不同的ID，吞吐量为20W-。"><a href="#公共模块搭建，根据swagger约定，封装数据传输到前端。其中utils包下的idWoker根据雪花算法，可以生成不同的ID，吞吐量为20W-。" class="headerlink" title="公共模块搭建，根据swagger约定，封装数据传输到前端。其中utils包下的idWoker根据雪花算法，可以生成不同的ID，吞吐量为20W+。"></a>公共模块搭建，根据swagger约定，封装数据传输到前端。其中utils包下的idWoker根据雪花算法，可以生成不同的ID，吞吐量为20W+。</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608145934.png" alt=""></p><h5 id="基础模块搭建，数据的CRUD操作"><a href="#基础模块搭建，数据的CRUD操作" class="headerlink" title="基础模块搭建，数据的CRUD操作"></a>基础模块搭建，数据的CRUD操作</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608150627.png" alt=""></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tensquare.base.pojo.Label;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span><br><span class="line"><span class="comment">//SpringDataJpa封装了CRUD操作，以及一些复杂的条件查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LabelDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Label</span>,<span class="title">String</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Label</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Day01总结"><a href="#Day01总结" class="headerlink" title="Day01总结"></a>Day01总结</h3><h4 id="在服务器端，通过Docker创建了Mysql镜像"><a href="#在服务器端，通过Docker创建了Mysql镜像" class="headerlink" title="在服务器端，通过Docker创建了Mysql镜像"></a>在服务器端，通过Docker创建了Mysql镜像</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608151611.png" alt=""></p><h4 id="通过本地IDEA的DataSource连接上去。"><a href="#通过本地IDEA的DataSource连接上去。" class="headerlink" title="通过本地IDEA的DataSource连接上去。"></a>通过本地IDEA的DataSource连接上去。</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608151109.png" alt=""></p><h4 id="通过PostMan检查当天的CRUD操作"><a href="#通过PostMan检查当天的CRUD操作" class="headerlink" title="通过PostMan检查当天的CRUD操作"></a>通过PostMan检查当天的CRUD操作</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608151349.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DayOne&quot;&gt;&lt;a href=&quot;#DayOne&quot; class=&quot;headerlink&quot; title=&quot;DayOne&quot;&gt;&lt;/a&gt;DayOne&lt;/h2&gt;&lt;h3 id=&quot;系统架构&quot;&gt;&lt;a href=&quot;#系统架构&quot; class=&quot;headerlink&quot; title=&quot;系
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
</feed>
