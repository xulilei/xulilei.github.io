<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Humble</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xulilei.github.io/"/>
  <updated>2020-06-22T03:14:12.866Z</updated>
  <id>https://xulilei.github.io/</id>
  
  <author>
    <name>Mr.Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>十次方daySeven</title>
    <link href="https://xulilei.github.io/2020/06/21/%E5%8D%81%E6%AC%A1%E6%96%B9daySeven/"/>
    <id>https://xulilei.github.io/2020/06/21/%E5%8D%81%E6%AC%A1%E6%96%B9daySeven/</id>
    <published>2020-06-21T15:04:08.000Z</published>
    <updated>2020-06-22T03:14:12.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="交友服务搭建"><a href="#交友服务搭建" class="headerlink" title="交友服务搭建"></a>交友服务搭建</h2><h3 id="主要业务"><a href="#主要业务" class="headerlink" title="主要业务"></a>主要业务</h3><h4 id="添加喜欢"><a href="#添加喜欢" class="headerlink" title="添加喜欢"></a>添加喜欢</h4><h5 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h5><p>有两张表分别为tb_friend和tb_nofriend，当A添加喜欢B，先在tb_friend表中查询有无数据，如果有则代表已经添加喜欢了，回复不可重复添加，然后在tb_nofriend中查询是否之前A不喜欢B，如果有记录，则删除该记录。并在tb_friend中添加一条从A-B的记录，且状态为0，代表单向喜欢。如果在添加记录时，恰哈发现B-A已经有数据了，那么则将二者的状态都改为1，代表双向喜欢</p><h5 id="业务实现，service层"><a href="#业务实现，service层" class="headerlink" title="业务实现，service层"></a>业务实现，service层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addFriend</span><span class="params">(String userid, String friendid)</span> </span>{</span><br><span class="line">    <span class="comment">//先判断userid到friendid是否有数据，有就是重复添加好友，返回0</span></span><br><span class="line">    Friend friend=friendDao.findByUseridAndFriendid(userid,friendid);</span><br><span class="line">    <span class="keyword">if</span>(friend!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//再判断以前是否不喜欢</span></span><br><span class="line">    <span class="keyword">if</span>(noFriendDao.findByUseridAndFriendid(userid, friendid)!=<span class="keyword">null</span>){</span><br><span class="line">        noFriendDao.deleteByUseridAndFriendid(userid,friendid);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//直接添加好友，让好友表中的userid到friendid方向的type为0</span></span><br><span class="line">    friend=<span class="keyword">new</span> Friend();</span><br><span class="line">    friend.setUserid(userid);</span><br><span class="line">    friend.setFriendid(friendid);</span><br><span class="line">    friend.setIslike(<span class="string">"0"</span>);</span><br><span class="line">    friendDao.save(friend);</span><br><span class="line">    <span class="comment">//再判断friendid到userid是否有数据，如果有则把双方的状态都改为1</span></span><br><span class="line">    <span class="keyword">if</span>(friendDao.findByUseridAndFriendid(friendid,userid)!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="comment">//把双方islike都改为1</span></span><br><span class="line">        friendDao.updateIslike(<span class="string">"1"</span>,userid,friendid);</span><br><span class="line">        friendDao.updateIslike(<span class="string">"1"</span>,friendid,userid);</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="添加不喜欢"><a href="#添加不喜欢" class="headerlink" title="添加不喜欢"></a>添加不喜欢</h4><h5 id="业务逻辑-1"><a href="#业务逻辑-1" class="headerlink" title="业务逻辑"></a>业务逻辑</h5><p>当A添加B为不喜欢，首先查询tb_nofriend中是否已经有数据，如果有则提示不可重复拉黑。然后再去tb_friend中查询是否有A-B的喜欢，如果有则删除该记录，同时查询B-A是否也有记录，有则代表之前是双向喜欢，此时应将B-A的状态改为0，最后在tb_nofriend中添加一行A-B数据。</p><h5 id="业务实现，service层-1"><a href="#业务实现，service层-1" class="headerlink" title="业务实现，service层"></a>业务实现，service层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addNoFriend</span><span class="params">(String userid,String friendid)</span> </span>{</span><br><span class="line">    <span class="comment">//先判断是否已经是非好友</span></span><br><span class="line">    NoFriend noFriend=noFriendDao.findByUseridAndFriendid(userid, friendid);</span><br><span class="line">    <span class="keyword">if</span>(noFriend!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//如果之前是好友，现在单方面删除</span></span><br><span class="line">    <span class="keyword">if</span>(friendDao.findByUseridAndFriendid(userid,friendid)!=<span class="keyword">null</span>){</span><br><span class="line">        friendDao.deleteByUseridAndFriendid(userid,friendid);</span><br><span class="line">       <span class="comment">//如果之前双向喜欢，则改为单向喜欢</span></span><br><span class="line">        <span class="keyword">if</span>(friendDao.findByUseridAndFriendid(friendid,userid)!=<span class="keyword">null</span>)</span><br><span class="line">        friendDao.updateIslike(<span class="string">"0"</span>,friendid,userid);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//删完再添加到noFriend表</span></span><br><span class="line">    noFriend=<span class="keyword">new</span> NoFriend();</span><br><span class="line">    noFriend.setUserid(userid);</span><br><span class="line">    noFriend.setFriendid(friendid);</span><br><span class="line">    noFriendDao.save(noFriend);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="上述功能用到的Dao层"><a href="#上述功能用到的Dao层" class="headerlink" title="上述功能用到的Dao层"></a>上述功能用到的Dao层</h4><h5 id="FriendDao"><a href="#FriendDao" class="headerlink" title="FriendDao"></a>FriendDao</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FriendDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Friend</span>,<span class="title">String</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Friend <span class="title">findByUseridAndFriendid</span><span class="params">(String userid,String friendid)</span></span>;</span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query</span>(value =<span class="string">"update tb_friend SET islike=? where userid=? and friendid=?"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIslike</span><span class="params">(String islike,String userid,String friendid)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByUseridAndFriendid</span><span class="params">(String userid,String friendid)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="NoFriendDao"><a href="#NoFriendDao" class="headerlink" title="NoFriendDao"></a>NoFriendDao</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NoFriendDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">NoFriend</span>,<span class="title">String</span>&gt; </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> NoFriend <span class="title">findByUseridAndFriendid</span><span class="params">(String userid, String friendid)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByUseridAndFriendid</span><span class="params">(String userid,String friendid)</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="feign调用user模块业务"><a href="#feign调用user模块业务" class="headerlink" title="feign调用user模块业务"></a>feign调用user模块业务</h4><h5 id="业务逻辑-2"><a href="#业务逻辑-2" class="headerlink" title="业务逻辑"></a>业务逻辑</h5><p>当A添加B为喜欢时，在tb_user表中，userA的关注数+1，B的粉丝数+1。当A添加B为不喜欢时，userA的关注数-1，B的粉丝数-1。</p><h5 id="User模块中粉丝关注业务实现"><a href="#User模块中粉丝关注业务实现" class="headerlink" title="User模块中粉丝关注业务实现"></a>User模块中粉丝关注业务实现</h5><h6 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">String</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">User</span>&gt;</span>{</span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query</span>(value =<span class="string">"update tb_user set fanscout=fanscount+? where  id=?"</span> ,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFans</span><span class="params">(<span class="keyword">int</span> x, String friendid)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query</span>(value =<span class="string">"update tb_user set followcount=followcount+? where  id=?"</span> ,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFollows</span><span class="params">(<span class="keyword">int</span> x, String userid)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFansAndFollowCounts</span><span class="params">(<span class="keyword">int</span> x, String userid, String friendid)</span> </span>{</span><br><span class="line">     <span class="comment">//friendB粉丝数+1，userA的关注数+1</span></span><br><span class="line">     userDao.updateFans(x,friendid);</span><br><span class="line">     userDao.updateFollows(x,userid);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//不返回result是因为这个业务是服务之间的调用，不涉及前台</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/{userid}/{friendid}/x"</span>,method = RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFansAndFollowCounts</span><span class="params">(@PathVariable <span class="keyword">int</span> x,@PathVariable String userid,@PathVariable String friendid)</span></span>{</span><br><span class="line">   userService.updateFansAndFollowCounts(x,userid,friendid);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="交友模块中调用上述业务"><a href="#交友模块中调用上述业务" class="headerlink" title="交友模块中调用上述业务"></a>交友模块中调用上述业务</h5><h6 id="启动类添加相应注解"><a href="#启动类添加相应注解" class="headerlink" title="启动类添加相应注解"></a>启动类添加相应注解</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FriendApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(FriendApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="创建client"><a href="#创建client" class="headerlink" title="创建client"></a>创建client</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"tensquare-user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/{userid}/{friendid}/x"</span>,method = RequestMethod.PUT)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> updateFansAndFollowCounts</span><br><span class="line">        (<span class="meta">@PathVariable</span>(<span class="string">"x"</span>) <span class="keyword">int</span> x, <span class="meta">@PathVariable</span>(<span class="string">"userid"</span>) String userid, <span class="meta">@PathVariable</span>(<span class="string">"friendid"</span>) String friendid);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="controller层调用"><a href="#controller层调用" class="headerlink" title="controller层调用"></a>controller层调用</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//添加喜欢</span></span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>){</span><br><span class="line">    userClient.updateFansAndFollowCounts(<span class="number">1</span>,userid,friendid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"添加成功"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//添加不喜欢</span></span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>){</span><br><span class="line">    userClient.updateFansAndFollowCounts(-<span class="number">1</span>,userid,friendid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"添加成功"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="交友服务controller层整合"><a href="#交友服务controller层整合" class="headerlink" title="交友服务controller层整合"></a>交友服务controller层整合</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/like/{friendid}/{type}"</span>,method = RequestMethod.PUT )</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">addFriend</span><span class="params">(@PathVariable String friendid,@PathVariable String type)</span></span>{</span><br><span class="line">    <span class="comment">//验证是否登陆，并拿到ID</span></span><br><span class="line">    Claims claims = (Claims) request.getAttribute(<span class="string">"user_claims"</span>);</span><br><span class="line">    <span class="keyword">if</span>(claims==<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, StatusCode.LOGINERROR,<span class="string">"权限不足"</span>);</span><br><span class="line">    }</span><br><span class="line">    String userid = claims.getId();</span><br><span class="line">    System.out.println(userid);</span><br><span class="line">    <span class="comment">//判断是添加好友还是非好友，直接传进来一个类型type，当type为1时，表示添加，2时表示拉黑</span></span><br><span class="line">    <span class="keyword">if</span>(type!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">"1"</span>)){</span><br><span class="line">            <span class="keyword">int</span> flag=friendService.addFriend(userid,friendid);</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">0</span>){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, StatusCode.ERROR,<span class="string">"不能重复添加好友"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">1</span>){</span><br><span class="line">                <span class="comment">//后文介绍的添加粉丝与关注</span></span><br><span class="line">                userClient.updateFansAndFollowCounts(<span class="number">1</span>,userid,friendid);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"添加成功"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//添加好友</span></span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"2"</span>)) {</span><br><span class="line">            <span class="comment">//添加黑名单</span></span><br><span class="line">            <span class="keyword">int</span> flag= friendService.addNoFriend(userid,friendid);</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">0</span>){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, StatusCode.ERROR,<span class="string">"不能重复拉黑好友"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">1</span>){</span><br><span class="line">                <span class="comment">//后文介绍的减少粉丝与关注</span></span><br><span class="line">                userClient.updateFansAndFollowCounts(-<span class="number">1</span>,userid,friendid);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"添加成功"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, StatusCode.ERROR,<span class="string">"参数异常"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;交友服务搭建&quot;&gt;&lt;a href=&quot;#交友服务搭建&quot; class=&quot;headerlink&quot; title=&quot;交友服务搭建&quot;&gt;&lt;/a&gt;交友服务搭建&lt;/h2&gt;&lt;h3 id=&quot;主要业务&quot;&gt;&lt;a href=&quot;#主要业务&quot; class=&quot;headerlink&quot; title=&quot;主
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Eureka" scheme="https://xulilei.github.io/tags/Eureka/"/>
    
      <category term="交友业务" scheme="https://xulilei.github.io/tags/%E4%BA%A4%E5%8F%8B%E4%B8%9A%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>eureka入门</title>
    <link href="https://xulilei.github.io/2020/06/21/eureka%E5%85%A5%E9%97%A8/"/>
    <id>https://xulilei.github.io/2020/06/21/eureka%E5%85%A5%E9%97%A8/</id>
    <published>2020-06-21T07:50:02.000Z</published>
    <updated>2020-06-22T03:09:50.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务发现组件Eureka"><a href="#服务发现组件Eureka" class="headerlink" title="服务发现组件Eureka"></a>服务发现组件Eureka</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><h4 id="Eureka简介"><a href="#Eureka简介" class="headerlink" title="Eureka简介"></a>Eureka简介</h4><p>Eureka是Netflix开发的服务发现框架，SpringCloud将它集成在自己的子项目spring-cloud-netflix中，实现SpringCloud的服务发现功能。Eureka包含两个组件：Eureka Server和Eureka Client。</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200622110425.png" alt=""></p><h5 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h5><p>Eureka Server提供服务注册服务，各个节点启动后，会在Eureka Server中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。</p><h6 id="服务端开发"><a href="#服务端开发" class="headerlink" title="服务端开发"></a>服务端开发</h6><p>第一步，在父工程中锁定版本，每一个版本的springboot都对应一个版本的springcloud</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.M9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>第二步，Eureka子模块添加eureka-server</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>第三步，添加application.yml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6868</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否将自己注册到Eureka服务中，本身就是所有无需注册</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> </span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#Eureka客户端与Eureka服务端进行交互的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:${server.port}/eureka/</span></span><br></pre></td></tr></tbody></table></figure><p>第四步，启动类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(EurekaServer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h5><p>Eureka Client是一个java客户端，用于简化与Eureka Server的交互，客户端同时也 就别一个内置的、使用轮询(round-robin)负载算法的负载均衡器。</p><h6 id="客户端开发"><a href="#客户端开发" class="headerlink" title="客户端开发"></a>客户端开发</h6><p>第一步，客户端模块添加eureka-client</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>第二步，修改每个微服务的application.yml，添加注册eureka服务的配置</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:6868/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="string">prefer‐ip‐address:</span> <span class="literal">true</span>  <span class="comment">#跨域</span></span><br></pre></td></tr></tbody></table></figure><p>第三步，启动类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>{</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">      SpringApplication.run(UserApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Feign实现服务间的调用"><a href="#Feign实现服务间的调用" class="headerlink" title="Feign实现服务间的调用"></a>Feign实现服务间的调用</h4><h5 id="谁调用别人就在谁的模块中搭建环境"><a href="#谁调用别人就在谁的模块中搭建环境" class="headerlink" title="谁调用别人就在谁的模块中搭建环境"></a>谁调用别人就在谁的模块中搭建环境</h5><h6 id="第一步，添加openfeign依赖"><a href="#第一步，添加openfeign依赖" class="headerlink" title="第一步，添加openfeign依赖"></a>第一步，添加openfeign依赖</h6><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h6 id="第二步，启动类"><a href="#第二步，启动类" class="headerlink" title="第二步，启动类"></a>第二步，启动类</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span><span class="comment">//Eureka客户端</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span><span class="comment">//可以发现服务</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span><span class="comment">//通过feign调用其他服务的业务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QaApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">      SpringApplication.run(QaApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="第三步，创建client包，创建要调用目标的接口"><a href="#第三步，创建client包，创建要调用目标的接口" class="headerlink" title="第三步，创建client包，创建要调用目标的接口"></a>第三步，创建client包，创建要调用目标的接口</h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//调用目标的名字，注意这里不能使用下划线，这也是其他模块的application.yml中名字不加下划线的原因</span></span><br><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"tensquare-base"</span>)</span><br><span class="line"><span class="comment">//调用目标controller层的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseClient</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/label/{labelId}"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="comment">//这里的 @PathVariable 后面要加上具体的参数名称("labelId")不然会找不到</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"labelId"</span>)</span> String labelId)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="相关实践"><a href="#相关实践" class="headerlink" title="相关实践"></a>相关实践</h3><p>详见：</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;服务发现组件Eureka&quot;&gt;&lt;a href=&quot;#服务发现组件Eureka&quot; class=&quot;headerlink&quot; title=&quot;服务发现组件Eureka&quot;&gt;&lt;/a&gt;服务发现组件Eureka&lt;/h2&gt;&lt;h3 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; cla
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="eureka" scheme="https://xulilei.github.io/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>daySix-JWT-BCryptPasswordEncoder</title>
    <link href="https://xulilei.github.io/2020/06/18/%E5%8D%81%E6%AC%A1%E6%96%B9daySix/"/>
    <id>https://xulilei.github.io/2020/06/18/%E5%8D%81%E6%AC%A1%E6%96%B9daySix/</id>
    <published>2020-06-18T02:27:02.000Z</published>
    <updated>2020-06-18T07:53:03.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="管理员登陆验证与删除鉴权"><a href="#管理员登陆验证与删除鉴权" class="headerlink" title="管理员登陆验证与删除鉴权"></a>管理员登陆验证与删除鉴权</h2><blockquote><p>利用Spring Security的BCryptPasswordEncoder与JWT实现</p></blockquote><h3 id="登陆验证签发token"><a href="#登陆验证签发token" class="headerlink" title="登陆验证签发token"></a>登陆验证签发token</h3><h4 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Admin <span class="title">login</span><span class="params">(Admin admin)</span> </span>{</span><br><span class="line">       <span class="comment">//想根据用户名查询对象</span></span><br><span class="line">       Admin adminLogin=adminDao.findByLoginname(admin.getLoginname());</span><br><span class="line">       <span class="comment">//然后拿数据库中的密码和用户输入的密码匹配是否相同</span></span><br><span class="line">       <span class="keyword">if</span>(adminLogin!=<span class="keyword">null</span>&amp;&amp;encoder.matches(admin.getPassword(),adminLogin.getPassword())){</span><br><span class="line">           <span class="keyword">return</span> adminLogin;</span><br><span class="line">   }</span><br><span class="line">       <span class="comment">//登陆失败</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(@RequestBody Admin admin)</span></span>{</span><br><span class="line">   Admin adminLoginResult=adminService.login(admin);</span><br><span class="line">   <span class="keyword">if</span>(adminLoginResult==<span class="keyword">null</span>){</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>,StatusCode.LOGINERROR,<span class="string">"登陆失败"</span>);</span><br><span class="line">   }</span><br><span class="line">   <span class="comment">//做一系列前后端通话的工作，用JWT来实现</span></span><br><span class="line">   <span class="comment">//生成token并返回给客户端</span></span><br><span class="line">   String token=jwtUtil.createJWT(adminLoginResult.getId(),adminLoginResult.getLoginname(),<span class="string">"admin"</span>);</span><br><span class="line">   Map&lt;String,Object&gt;map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   map.put(<span class="string">"token"</span>,token);</span><br><span class="line">   map.put(<span class="string">"role"</span>,<span class="string">"admin"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"登陆成功"</span>,map);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="返回给前端的token"><a href="#返回给前端的token" class="headerlink" title="返回给前端的token"></a>返回给前端的token</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200617161241.png" alt=""></p><h3 id="利用拦截器解析token"><a href="#利用拦截器解析token" class="headerlink" title="利用拦截器解析token"></a>利用拦截器解析token</h3><h4 id="拦截器只是为了将请求头中的token解析成user和admin"><a href="#拦截器只是为了将请求头中的token解析成user和admin" class="headerlink" title="拦截器只是为了将请求头中的token解析成user和admin"></a>拦截器只是为了将请求头中的token解析成user和admin</h4><p>解析后将气保存在域对象中，等需要鉴权时，直接通过获取这个域对象的值来分别是user还是admin</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//无论如何都放行，具体能不能操作要在具体的操作中去判断</span></span><br><span class="line">        <span class="comment">//拦截器只是负责把请求头中包含的token令牌解析成user和admin</span></span><br><span class="line">        String header=request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(header!=<span class="keyword">null</span>&amp;&amp;header.startsWith(<span class="string">"Bearer "</span>)){</span><br><span class="line">            String token=header.substring(<span class="number">7</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Claims claims = jwtUtil.parseJWT(token);</span><br><span class="line">                <span class="keyword">if</span>(claims!=<span class="keyword">null</span>){</span><br><span class="line">                    <span class="keyword">if</span>(<span class="string">"admin"</span>.equals(claims.get(<span class="string">"roles"</span>))){</span><br><span class="line">                       request.setAttribute(<span class="string">"admin_claims"</span>,token);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span>(<span class="string">"user"</span>.equals(claims.get(<span class="string">"roles"</span>))){</span><br><span class="line">                        request.setAttribute(<span class="string">"user_claims"</span>,token);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">                <span class="comment">//过期</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"token错误"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h4><p>当然不用拦截登陆请求了</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtInterceptor jwtInterceptor;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册拦截器要声明的拦截器对象和要拦截的请求</span></span><br><span class="line">        registry.addInterceptor(jwtInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">"/**/login"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="管理员删除用户"><a href="#管理员删除用户" class="headerlink" title="管理员删除用户"></a>管理员删除用户</h3><h5 id="直接从域对象中获取admin-claims，如果有则说明该登陆用户为管理员，则可以删除用户，否则提示权限不足"><a href="#直接从域对象中获取admin-claims，如果有则说明该登陆用户为管理员，则可以删除用户，否则提示权限不足" class="headerlink" title="直接从域对象中获取admin_claims，如果有则说明该登陆用户为管理员，则可以删除用户，否则提示权限不足"></a>直接从域对象中获取admin_claims，如果有则说明该登陆用户为管理员，则可以删除用户，否则提示权限不足</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(String id)</span> </span>{</span><br><span class="line">   String token = (String) request.getAttribute(<span class="string">"admin_claims"</span>);</span><br><span class="line">   <span class="keyword">if</span>(token==<span class="keyword">null</span>||<span class="string">""</span>.equals(token)){</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"权限不足"</span>);</span><br><span class="line">   }</span><br><span class="line">   userDao.deleteById(id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="当header中的token无法解析时"><a href="#当header中的token无法解析时" class="headerlink" title="当header中的token无法解析时"></a>当header中的token无法解析时</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200617164250.png" alt=""></p><h5 id="当header中的token正确时"><a href="#当header中的token正确时" class="headerlink" title="当header中的token正确时"></a>当header中的token正确时</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200617164223.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;管理员登陆验证与删除鉴权&quot;&gt;&lt;a href=&quot;#管理员登陆验证与删除鉴权&quot; class=&quot;headerlink&quot; title=&quot;管理员登陆验证与删除鉴权&quot;&gt;&lt;/a&gt;管理员登陆验证与删除鉴权&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;利用Spring Security
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Spring Security" scheme="https://xulilei.github.io/tags/Spring-Security/"/>
    
      <category term="BCryptPasswordEncoder" scheme="https://xulilei.github.io/tags/BCryptPasswordEncoder/"/>
    
      <category term="JWT" scheme="https://xulilei.github.io/tags/JWT/"/>
    
      <category term="鉴权" scheme="https://xulilei.github.io/tags/%E9%89%B4%E6%9D%83/"/>
    
      <category term="密码加密" scheme="https://xulilei.github.io/tags/%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security加密与JWT鉴权</title>
    <link href="https://xulilei.github.io/2020/06/18/SpringSecurity%E5%8A%A0%E5%AF%86%C2%80%E4%B8%8EJWT%E9%89%B4%E6%9D%83/"/>
    <id>https://xulilei.github.io/2020/06/18/SpringSecurity%E5%8A%A0%E5%AF%86%C2%80%E4%B8%8EJWT%E9%89%B4%E6%9D%83/</id>
    <published>2020-06-18T02:26:39.000Z</published>
    <updated>2020-06-18T07:53:28.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringSecurity加密与JWT鉴权"><a href="#SpringSecurity加密与JWT鉴权" class="headerlink" title="SpringSecurity加密与JWT鉴权"></a>SpringSecurity加密与JWT鉴权</h2><h3 id="Spring-Security的BCryptPasswordEncoder"><a href="#Spring-Security的BCryptPasswordEncoder" class="headerlink" title="Spring Security的BCryptPasswordEncoder"></a>Spring Security的BCryptPasswordEncoder</h3><h4 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h4><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="添加配置类"><a href="#添加配置类" class="headerlink" title="添加配置类"></a>添加配置类</h5><p>如果只是使用BCryptPasswordEncoder，这个配置可以直接拿来用</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//authorizeRequests是所有security全注解配置实现的开端</span></span><br><span class="line">        <span class="comment">//需要的权限分两部分，第一部分是拦截的路径，第二部分是访问该路径需要的权限</span></span><br><span class="line">        <span class="comment">//antMatchers，表示拦截的路径，permitAll表示任何权限都可以访问，直接放行所有</span></span><br><span class="line">        <span class="comment">//这里主要是用security的加密功能，拦截功能用的是jwt</span></span><br><span class="line">        <span class="comment">//anyRequest()任何的请求，authenticated()认证后访问</span></span><br><span class="line">        <span class="comment">//and().csrf().disable()表示使csrf攻击失效</span></span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/**"</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="配置BCryptPasswordEncoder交给容器"><a href="#配置BCryptPasswordEncoder交给容器" class="headerlink" title="配置BCryptPasswordEncoder交给容器"></a>配置BCryptPasswordEncoder交给容器</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">bCryptPasswordEncoder</span><span class="params">()</span></span>{</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h5><p>service层</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> </span>{</span><br><span class="line">   user.setId( idWorker.nextId()+<span class="string">""</span> );</span><br><span class="line">   <span class="comment">//密码加密</span></span><br><span class="line">   user.setPassword(encoder.encode(user.getPassword()));</span><br><span class="line"></span><br><span class="line">   userDao.save(user);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="密码验证"><a href="#密码验证" class="headerlink" title="密码验证"></a>密码验证</h5><p>service层</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String mobile,String password)</span> </span>{</span><br><span class="line">    <span class="comment">//先通过前台传过来的电话查询出user</span></span><br><span class="line">   User user=userDao.findByMobile(mobile);</span><br><span class="line">    <span class="comment">//再比对user的密码，用encoder.match(原密码,加密后的密码)</span></span><br><span class="line">   <span class="keyword">if</span>(user!=<span class="keyword">null</span>&amp;&amp;encoder.matches(password,user.getPassword())){</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">   }</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="JWT鉴权"><a href="#JWT鉴权" class="headerlink" title="JWT鉴权"></a>JWT鉴权</h3><h4 id="常见的鉴权方式"><a href="#常见的鉴权方式" class="headerlink" title="常见的鉴权方式"></a>常见的鉴权方式</h4><h5 id="Cookie认证"><a href="#Cookie认证" class="headerlink" title="Cookie认证"></a>Cookie认证</h5><p>Cookie认证机制就是为一次请求认证在服务端创建一个Session对象，同时在客户端 的浏览器端创建了一个Cookie对象；通过客户端带上来Cookie对象来与服务器端的 session对象匹配来实现状态管理的。</p><h5 id="Token认证"><a href="#Token认证" class="headerlink" title="Token认证"></a>Token认证</h5><p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是 这样的： </p><ol><li>客户端使用用户名跟密码请求登录 </li><li>服务端收到请求，去验证用户名与密码 </li><li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端 </li><li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里 </li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token </li><li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向 客户端返回请求的数据</li></ol><h5 id="两者对比Token的优势"><a href="#两者对比Token的优势" class="headerlink" title="两者对比Token的优势"></a>两者对比Token的优势</h5><ol><li>支持跨域访问: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提 是传输的用户认证信息通过HTTP头传输.</li><li>无状态:Token机制在服务端不需要存储session信息，因为 Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.</li><li>去耦: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在 你的API被调用的时候，你可以进行Token生成调用即可.</li><li>一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算的Token验证和解析要费时得多.</li><li>基于标准化:你的API可以采用标准化的 JSON Web Token (JWT)</li></ol><h4 id="JWT介绍"><a href="#JWT介绍" class="headerlink" title="JWT介绍"></a>JWT介绍</h4><p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名，且生成后都会采用base64进行编码。</p><h5 id="头部（Header）"><a href="#头部（Header）" class="headerlink" title="头部（Header）"></a>头部（Header）</h5><p>头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以 被表示成一个JSON对象，如下指明了采用了JWT的算法为HS256</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{<span class="attr">"typ"</span>:<span class="string">"JWT"</span>,<span class="attr">"alg"</span>:<span class="string">"HS256"</span>}</span><br></pre></td></tr></tbody></table></figure><p>base64编码后：eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</p><h5 id="载荷（playload）"><a href="#载荷（playload）" class="headerlink" title="载荷（playload）"></a>载荷（playload）</h5><p>一般包含ID，用户SUB，身份roles，比如</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{<span class="attr">"id"</span>:<span class="string">"1234567890"</span>,<span class="attr">"sub"</span>:<span class="string">"John Doe"</span>,<span class="attr">"roles"</span>:<span class="string">"admin"</span>}</span><br></pre></td></tr></tbody></table></figure><p>会再次进行base64编码</p><h5 id="签证（signature）"><a href="#签证（signature）" class="headerlink" title="签证（signature）"></a>签证（signature）</h5><p>包含头部，载荷，以及定义的salt，同样进行base编码</p><h5 id="最终JWT"><a href="#最终JWT" class="headerlink" title="最终JWT"></a>最终JWT</h5><p>会将三部分连接成一个字符串，以.连接</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6I kpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></tbody></table></figure><h4 id="JJWT：Java-JWT"><a href="#JJWT：Java-JWT" class="headerlink" title="JJWT：Java JWT"></a>JJWT：Java JWT</h4><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="在common包下的util包中创建JWT工具类"><a href="#在common包下的util包中创建JWT工具类" class="headerlink" title="在common包下的util包中创建JWT工具类"></a>在common包下的util包中创建JWT工具类</h5><p>这个工具类，需要提供ID,SUB,ROLE作为claims</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"jwt.config"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> ttl ;<span class="comment">//一个小时</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTtl</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> ttl;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTtl</span><span class="params">(<span class="keyword">long</span> ttl)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.ttl = ttl;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成JWT</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createJWT</span><span class="params">(String id, String subject, String roles)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> nowMillis = System.currentTimeMillis();</span><br><span class="line">        Date now = <span class="keyword">new</span> Date(nowMillis);</span><br><span class="line">        JwtBuilder builder = Jwts.builder().setId(id)</span><br><span class="line">                .setSubject(subject)</span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, key).claim(<span class="string">"roles"</span>, roles);</span><br><span class="line">        <span class="keyword">if</span> (ttl &gt; <span class="number">0</span>) {</span><br><span class="line">            builder.setExpiration( <span class="keyword">new</span> Date( nowMillis + ttl));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析JWT</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Claims <span class="title">parseJWT</span><span class="params">(String jwtStr)</span></span>{</span><br><span class="line">        <span class="keyword">return</span>  Jwts.parser()</span><br><span class="line">                .setSigningKey(key)</span><br><span class="line">                .parseClaimsJws(jwtStr)</span><br><span class="line">                .getBody();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>jwt.config哪里用到了这个工具类，哪里的application.yml添加jwt定义，哪里传入jwtUtil</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> JwtUtil <span class="title">jwtUtil</span><span class="params">()</span></span>{ </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> util.JwtUtil(); </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">jwt:</span> </span><br><span class="line">  <span class="attr">config:</span> </span><br><span class="line">    <span class="attr">key:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="attr">ttl:</span> <span class="number">360000</span></span><br></pre></td></tr></tbody></table></figure><h4 id="以admin的登陆与删除鉴权为例"><a href="#以admin的登陆与删除鉴权为例" class="headerlink" title="以admin的登陆与删除鉴权为例"></a>以admin的登陆与删除鉴权为例</h4><p>详见：<a href="https://xulilei.github.io/2020/06/18/十次方daySix/">https://xulilei.github.io/2020/06/18/%E5%8D%81%E6%AC%A1%E6%96%B9daySix/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringSecurity加密与JWT鉴权&quot;&gt;&lt;a href=&quot;#SpringSecurity加密与JWT鉴权&quot; class=&quot;headerlink&quot; title=&quot;SpringSecurity加密与JWT鉴权&quot;&gt;&lt;/a&gt;SpringSecurity加密与JWT
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring Security" scheme="https://xulilei.github.io/tags/Spring-Security/"/>
    
      <category term="BCryptPasswordEncoder" scheme="https://xulilei.github.io/tags/BCryptPasswordEncoder/"/>
    
      <category term="JWT" scheme="https://xulilei.github.io/tags/JWT/"/>
    
      <category term="鉴权" scheme="https://xulilei.github.io/tags/%E9%89%B4%E6%9D%83/"/>
    
      <category term="密码加密" scheme="https://xulilei.github.io/tags/%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>dayFive-rabbitmq</title>
    <link href="https://xulilei.github.io/2020/06/15/%E5%8D%81%E6%AC%A1%E6%96%B9dayFive/"/>
    <id>https://xulilei.github.io/2020/06/15/%E5%8D%81%E6%AC%A1%E6%96%B9dayFive/</id>
    <published>2020-06-15T10:53:31.000Z</published>
    <updated>2020-06-18T07:50:33.673Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用户注册模块搭建"><a href="#用户注册模块搭建" class="headerlink" title="用户注册模块搭建"></a>用户注册模块搭建</h3><h4 id="在user模块添加发送短信业务"><a href="#在user模块添加发送短信业务" class="headerlink" title="在user模块添加发送短信业务"></a>在user模块添加发送短信业务</h4><h5 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String mobile)</span> </span>{</span><br><span class="line">   <span class="comment">//生成六位随机数</span></span><br><span class="line">   String checkCode = RandomStringUtils.randomNumeric(<span class="number">6</span>);</span><br><span class="line">   <span class="comment">//向缓存中放一份</span></span><br><span class="line">       redisTemplate.opsForValue().set(<span class="string">"checkCode"</span>+mobile,checkCode,<span class="number">6</span>, TimeUnit.HOURS);</span><br><span class="line">   <span class="comment">//给用户发一份，先存放至rabbitmq中</span></span><br><span class="line">   Map&lt;String,String&gt;map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   map.put(<span class="string">"mobile"</span>,mobile);</span><br><span class="line">   map.put(<span class="string">"checkCode"</span>,checkCode);</span><br><span class="line">   rabbitTemplate.convertAndSend(<span class="string">"sms"</span>,map);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value =<span class="string">"/sendsms/{mobile}"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">sendMsg</span><span class="params">(@PathVariable String mobile)</span></span>{</span><br><span class="line">   userService.sendMsg(mobile);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"发送成功"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="在rabbitmq短信监听模块通过阿里云实施发送短信"><a href="#在rabbitmq短信监听模块通过阿里云实施发送短信" class="headerlink" title="在rabbitmq短信监听模块通过阿里云实施发送短信"></a>在rabbitmq短信监听模块通过阿里云实施发送短信</h4><h5 id="导入阿里云依赖"><a href="#导入阿里云依赖" class="headerlink" title="导入阿里云依赖"></a>导入阿里云依赖</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="根据阿里云官网API创建工具类"><a href="#根据阿里云官网API创建工具类" class="headerlink" title="根据阿里云官网API创建工具类"></a>根据阿里云官网API创建工具类</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsUtil</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String accessKeyId=<span class="string">"LTAI4GCjWSbTHQzGTaavF**"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String accessKeySecret=<span class="string">"sDiW0PSXaAKXfNfwCI8vaG4spE4**"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String signName=<span class="string">"******"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String templateCode=<span class="string">"SMS_1932477**"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">(String mobile,String checkCode)</span> </span>{</span><br><span class="line">        DefaultProfile profile = DefaultProfile.getProfile(<span class="string">"default"</span>, accessKeyId, accessKeySecret);</span><br><span class="line">        IAcsClient client = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line"></span><br><span class="line">        CommonRequest request = <span class="keyword">new</span> CommonRequest();</span><br><span class="line">        request.setSysMethod(MethodType.POST);</span><br><span class="line">        request.setSysDomain(<span class="string">"dysmsapi.aliyuncs.com"</span>);</span><br><span class="line">        request.setSysVersion(<span class="string">"2017-05-25"</span>);</span><br><span class="line">        request.setSysAction(<span class="string">"SendSms"</span>);</span><br><span class="line">        request.putQueryParameter(<span class="string">"PhoneNumbers"</span>, mobile);</span><br><span class="line">        request.putQueryParameter(<span class="string">"SignName"</span>, signName);</span><br><span class="line">        request.putQueryParameter(<span class="string">"TemplateCode"</span>, templateCode);</span><br><span class="line">        <span class="comment">//这里使用通配符，code要与在阿里云注册的模版相同</span></span><br><span class="line">        request.putQueryParameter(<span class="string">"TemplateParam"</span>, <span class="string">"{\"code\":"</span>+checkCode+<span class="string">"}"</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            CommonResponse response = client.getCommonResponse(request);</span><br><span class="line">            System.out.println(response.getData());</span><br><span class="line">        } <span class="keyword">catch</span> (ServerException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (ClientException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="创建rabbitmq监听器类"><a href="#创建rabbitmq监听器类" class="headerlink" title="创建rabbitmq监听器类"></a>创建rabbitmq监听器类</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"sms"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsListener</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsUtil smsUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeSms</span><span class="params">(Map&lt;String,String&gt; map)</span></span>{</span><br><span class="line">        String mobile = map.get(<span class="string">"mobile"</span>);</span><br><span class="line">        String checkCode = map.get(<span class="string">"checkCode"</span>);</span><br><span class="line">        smsUtil.sendSms(mobile,checkCode);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自此短信功能部署成功</p><h4 id="用户注册业务"><a href="#用户注册业务" class="headerlink" title="用户注册业务"></a>用户注册业务</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value =<span class="string">"/register/{code}"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">register</span><span class="params">(@PathVariable String code,@RequestBody User user)</span></span>{</span><br><span class="line">    <span class="comment">//先从缓存中拿到先前发送短信时存放的数据</span></span><br><span class="line">   String checkCodeRedis= (String) redisTemplate.opsForValue().get(<span class="string">"checkCode"</span>+user.getMobile());</span><br><span class="line">    <span class="comment">//比对数据</span></span><br><span class="line">   <span class="keyword">if</span>(checkCodeRedis.isEmpty()){</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>,StatusCode.ERROR,<span class="string">"未发送验证码"</span>);</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">if</span>(!checkCodeRedis.equals(code)){</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>,StatusCode.ERROR,<span class="string">"验证码错误"</span>);</span><br><span class="line">   }</span><br><span class="line">    <span class="comment">//比对成功，注册用户</span></span><br><span class="line">   userService.add(user);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"注册成功"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;用户注册模块搭建&quot;&gt;&lt;a href=&quot;#用户注册模块搭建&quot; class=&quot;headerlink&quot; title=&quot;用户注册模块搭建&quot;&gt;&lt;/a&gt;用户注册模块搭建&lt;/h3&gt;&lt;h4 id=&quot;在user模块添加发送短信业务&quot;&gt;&lt;a href=&quot;#在user模块添加发送短信业
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="rabbitmq" scheme="https://xulilei.github.io/tags/rabbitmq/"/>
    
      <category term="短信验证" scheme="https://xulilei.github.io/tags/%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81/"/>
    
      <category term="用户注册" scheme="https://xulilei.github.io/tags/%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ入门</title>
    <link href="https://xulilei.github.io/2020/06/15/RabbitMQ/"/>
    <id>https://xulilei.github.io/2020/06/15/RabbitMQ/</id>
    <published>2020-06-15T10:53:09.000Z</published>
    <updated>2020-06-17T02:33:31.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="消息中间件RabbitMQ"><a href="#消息中间件RabbitMQ" class="headerlink" title="消息中间件RabbitMQ"></a>消息中间件RabbitMQ</h3><h4 id="RabbitMQ简介"><a href="#RabbitMQ简介" class="headerlink" title="RabbitMQ简介"></a>RabbitMQ简介</h4><p>消息队列中间件是分布式系统中重要的组件，主要解决应用耦合，异步消息，流量削锋和消息通讯等问题，实现高性能，高可用，可伸缩和最终一致性的架构</p><h5 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h5><p>通过交换机再进入到队列中</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200616105202.png" alt=""></p><h5 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h5><h6 id="RabbitMQ-Server"><a href="#RabbitMQ-Server" class="headerlink" title="RabbitMQ Server"></a>RabbitMQ Server</h6><p>也叫broker server，它是一种传输服务。 他的角色就是维护一条 从Producer到Consumer的路线，保证数据能够按照指定的方式进行传输。</p><h6 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h6><p>消息生产者，如图A、B、C，数据的发送方。消息生产者连接RabbitMQ服 务器然后将消息投递到Exchange。 </p><h6 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h6><p>消息消费者，如图1、2、3，数据的接收方。消息消费者订阅队列， RabbitMQ将Queue中的消息发送到消息消费者。 </p><h6 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h6><p>生产者将消息发送到Exchange（交换器），由Exchange将消息路由到一个 或多个Queue中（或者丢弃）。Exchange并不存储消息。RabbitMQ中的Exchange有 direct、fanout、topic、headers四种类型，每种类型对应不同的路由规则。 </p><h6 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h6><p>队列是RabbitMQ的内部对象，用于存储消息。消息消费者就是通过订阅 队列来获取消息的，RabbitMQ中的消息都只能存储在Queue中，生产者生产消息并最终 投递到Queue中，消费者可以从Queue中获取消息并消费。多个消费者可以订阅同一个 Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者 都收到所有的消息并处理。 </p><h6 id="RoutingKey"><a href="#RoutingKey" class="headerlink" title="RoutingKey"></a>RoutingKey</h6><p>生产者在将消息发送给Exchange的时候，一般会指定一个routing key， 来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联 合使用才能最终生效。在Exchange Type与binding key固定的情况下（在正常使用时一 般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过 指定routing key来决定消息流向哪里。</p><h5 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h5><p>需要注意的是要配置多个接口</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run ‐di ‐‐name=tensquare_rabbitmq ‐p 5671:5617 ‐p 5672:5672 ‐p 4369:4369 ‐p 15671:15671 ‐p 15672:15672 ‐p 25672:25672 rabbitmq:management</span><br></pre></td></tr></tbody></table></figure><h4 id="主要知识点"><a href="#主要知识点" class="headerlink" title="主要知识点"></a>主要知识点</h4><h5 id="Exchange类型"><a href="#Exchange类型" class="headerlink" title="Exchange类型"></a>Exchange类型</h5><h6 id="direct模式"><a href="#direct模式" class="headerlink" title="direct模式"></a>direct模式</h6><p><img src="https://gitee.com/xulilei/pic/raw/master/20200616111243.png" alt=""></p><p>1、将消息发给唯一一个节点时使用这种模式，这是最简单的一种形式</p><p>2、这种模式下不需要将Exchange进行任何绑定(binding)操作 </p><p>3、消息传递时需要一个“RouteKey”，可以简单的理解为要发送到的队列名字</p><p>首先创建一个test队列</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200616104252.png" alt=""></p><p>以direct模式发送</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= RabApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ProductTest</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//这里的test就是queue的名字</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"test"</span>,<span class="string">"测试直接模式"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建消费者接受</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMsg</span><span class="params">(String msg)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"直接模式消费消息"</span>+msg);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200616104614.png" alt=""></p><p>该模式下，默认采用了负载均衡，即消费者从队列获取消息是均衡的</p><h6 id="分列模式"><a href="#分列模式" class="headerlink" title="分列模式"></a>分列模式</h6><p><img src="https://gitee.com/xulilei/pic/raw/master/20200616111559.png" alt=""></p><p>任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有 Queue上。 </p><p>1、这种模式不需要RouteKey </p><p>2、这种模式需要提前将Exchange与Queue进行绑定，一个Exchange可以绑定多个 Queue，一个Queue可以同多个Exchange进行绑定。 </p><p>3、如果接受到消息的Exchange没有与任何Queue绑定，则消息会被抛弃。+</p><h6 id="主题模式"><a href="#主题模式" class="headerlink" title="主题模式"></a>主题模式</h6><p><img src="https://gitee.com/xulilei/pic/raw/master/20200616152738.png" alt=""></p><p>任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的 Queue上</p><p>1、这种模式较为复杂，简单来说，就是每个队列都有其关心的主题，所有的消息都带有一 个“标题”(RouteKey)，Exchange会将消息转发到所有关注主题能与RouteKey模糊匹配的 队列。 </p><p>2、这种模式需要RouteKey，也许要提前绑定Exchange与Queue。</p><p>3、在进行绑定时，要提供一个该队列关心的主题，如“#.log.#”表示该队列关心所有涉及 log的消息(一个RouteKey为”MQ.log.error”的消息会被转发到该队列)。</p><p>4、“#”表示0个或若干个关键字，“”表示一个关键字。如“log.”能与“log.warn”匹配，无法 与“log.warn.timeout”匹配；但是“log.#”能与上述两者匹配。 </p><p>5、同样，如果Exchange没有发现能够与RouteKey匹配的Queue，则会抛弃此消息</p><h4 id="配合阿里云实现发送短信功能"><a href="#配合阿里云实现发送短信功能" class="headerlink" title="配合阿里云实现发送短信功能"></a>配合阿里云实现发送短信功能</h4><p>详见</p><p><a href="https://xulilei.github.io/2020/06/15/十次方dayFive/">https://xulilei.github.io/2020/06/15/%E5%8D%81%E6%AC%A1%E6%96%B9dayFive/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;消息中间件RabbitMQ&quot;&gt;&lt;a href=&quot;#消息中间件RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;消息中间件RabbitMQ&quot;&gt;&lt;/a&gt;消息中间件RabbitMQ&lt;/h3&gt;&lt;h4 id=&quot;RabbitMQ简介&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="rabbitmq" scheme="https://xulilei.github.io/tags/rabbitmq/"/>
    
      <category term="短信验证" scheme="https://xulilei.github.io/tags/%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>DayFour-elasticsearch</title>
    <link href="https://xulilei.github.io/2020/06/14/%E5%8D%81%E6%AC%A1%E6%96%B9DayFour/"/>
    <id>https://xulilei.github.io/2020/06/14/%E5%8D%81%E6%AC%A1%E6%96%B9DayFour/</id>
    <published>2020-06-14T10:34:44.000Z</published>
    <updated>2020-06-18T07:51:10.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="搜索微服务搭建"><a href="#搜索微服务搭建" class="headerlink" title="搜索微服务搭建"></a>搜索微服务搭建</h3><h4 id="使用spring-data-elasticsearch操作"><a href="#使用spring-data-elasticsearch操作" class="headerlink" title="使用spring-data-elasticsearch操作"></a>使用spring-data-elasticsearch操作</h4><h5 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="Pojo实体类"><a href="#Pojo实体类" class="headerlink" title="Pojo实体类"></a>Pojo实体类</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"articleindex"</span>,type = <span class="string">"article"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//是否能被搜索到</span></span><br><span class="line">    <span class="comment">//是否分词，整体匹配还是分词匹配</span></span><br><span class="line">    <span class="comment">//是否在页面上显示，即数据库中在该实体类中的字段，就是要显示的,比如该例中的id title content state</span></span><br><span class="line">    <span class="comment">//analyzer,分词</span></span><br><span class="line">    <span class="comment">//searchAnalyzer，搜索</span></span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>,analyzer=<span class="string">"ik_max_word"</span>,searchAnalyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">true</span>,analyzer=<span class="string">"ik_max_word"</span>,searchAnalyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Article</span>,<span class="title">String</span>&gt; </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Article&gt; <span class="title">findByTitleOrContentLike</span><span class="params">(String title, String content, Pageable pageable)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IdWorker idWorker;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Article article)</span></span>{</span><br><span class="line">        articleDao.save(article);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//springdata系列分页的写法都是这个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Article&gt; <span class="title">findByKey</span><span class="params">(String key, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">        Pageable pageable= PageRequest.of(page-<span class="number">1</span>,size);</span><br><span class="line">        <span class="keyword">return</span>  articleDao.findByTitleOrContentLike(key,key,pageable);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/article"</span>)</span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">save</span><span class="params">(@RequestBody Article article)</span></span>{</span><br><span class="line">        articleService.save(article);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"存储成功"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/{key}/{page}/{size}"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findByKey</span><span class="params">(@PathVariable String key,@PathVariable <span class="keyword">int</span> page,@PathVariable <span class="keyword">int</span> size)</span></span>{</span><br><span class="line">        Page&lt;Article&gt;pageData=articleService.findByKey(key,page,size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"搜索成功"</span>,<span class="keyword">new</span> PageResult&lt;Article&gt;(pageData.getTotalElements(),pageData.getContent()));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="docker部署elasticsearch"><a href="#docker部署elasticsearch" class="headerlink" title="docker部署elasticsearch"></a>docker部署elasticsearch</h4><p><a href="https://xulilei.github.io/2020/06/12/elasticSearch入门/">https://xulilei.github.io/2020/06/12/elasticSearch%E5%85%A5%E9%97%A8/</a></p><h4 id="连接服务器，并测试存储到服务器的索引库"><a href="#连接服务器，并测试存储到服务器的索引库" class="headerlink" title="连接服务器，并测试存储到服务器的索引库"></a>连接服务器，并测试存储到服务器的索引库</h4><h5 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h5><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9007</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tensquare-search</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">192.168</span><span class="number">.152</span><span class="number">.128</span><span class="string">:9300</span></span><br></pre></td></tr></tbody></table></figure><p>postMan测试成功</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200615165805.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;搜索微服务搭建&quot;&gt;&lt;a href=&quot;#搜索微服务搭建&quot; class=&quot;headerlink&quot; title=&quot;搜索微服务搭建&quot;&gt;&lt;/a&gt;搜索微服务搭建&lt;/h3&gt;&lt;h4 id=&quot;使用spring-data-elasticsearch操作&quot;&gt;&lt;a href=&quot;#使用sp
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="elasticsearch" scheme="https://xulilei.github.io/tags/elasticsearch/"/>
    
      <category term="搜索功能" scheme="https://xulilei.github.io/tags/%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch从认识到发布</title>
    <link href="https://xulilei.github.io/2020/06/12/elasticSearch%E5%85%A5%E9%97%A8/"/>
    <id>https://xulilei.github.io/2020/06/12/elasticSearch%E5%85%A5%E9%97%A8/</id>
    <published>2020-06-12T07:54:05.000Z</published>
    <updated>2020-06-15T08:52:37.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分布式搜索引擎ElasticSearch"><a href="#分布式搜索引擎ElasticSearch" class="headerlink" title="分布式搜索引擎ElasticSearch"></a>分布式搜索引擎ElasticSearch</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><h5 id="与mysql数据库对比"><a href="#与mysql数据库对比" class="headerlink" title="与mysql数据库对比"></a>与mysql数据库对比</h5><table><thead><tr><th align="center">Elasticsearch</th><th align="center">关系型数据库Mysql</th></tr></thead><tbody><tr><td align="center">索引(index)</td><td align="center">数据库(databases)</td></tr><tr><td align="center">类型(type)</td><td align="center">表(table)</td></tr><tr><td align="center">文档(document)</td><td align="center">行(row)</td></tr></tbody></table><h4 id="restful风格操作ElasticSearch"><a href="#restful风格操作ElasticSearch" class="headerlink" title="restful风格操作ElasticSearch"></a>restful风格操作ElasticSearch</h4><h5 id="新建索引"><a href="#新建索引" class="headerlink" title="新建索引"></a>新建索引</h5><p>如果需要创建一个叫articleindex的索引 ,就以put方式提交 </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/</span><br></pre></td></tr></tbody></table></figure><h5 id="新建文档"><a href="#新建文档" class="headerlink" title="新建文档"></a>新建文档</h5><p>新建类型，在索引后追加类型： 以post方式提交 </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article</span><br></pre></td></tr></tbody></table></figure><h5 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h5><h6 id="查询全部"><a href="#查询全部" class="headerlink" title="查询全部"></a>查询全部</h6><p>_search，以get方式请求</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article/_search</span><br></pre></td></tr></tbody></table></figure><h6 id="按ID查询"><a href="#按ID查询" class="headerlink" title="按ID查询"></a>按ID查询</h6><p>以GET方式请求 </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article/1</span><br></pre></td></tr></tbody></table></figure><h6 id="匹配查询"><a href="#匹配查询" class="headerlink" title="匹配查询"></a>匹配查询</h6><p>根据title=aa进行查询，get方式提交下列地址：</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article/_search?q=title:aa</span><br></pre></td></tr></tbody></table></figure><h6 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h6><p>以*用代表任意字符： </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://192.168.184.134:9200/articleindex/article/_search?q=title:*s*</span><br></pre></td></tr></tbody></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><p>以put形式提交以下地址,如果ID存在则修改，否则添加</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:9200/articleindex/article/1</span><br></pre></td></tr></tbody></table></figure><h5 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h5><p>根据ID删除文档,删除ID为1的文档 DELETE方式提交 </p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://192.168.184.134:9200/articleindex/article/1</span><br></pre></td></tr></tbody></table></figure><h4 id="head插件操作ElasticSearch"><a href="#head插件操作ElasticSearch" class="headerlink" title="head插件操作ElasticSearch"></a>head插件操作ElasticSearch</h4><h5 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h5><h6 id="步骤1：-下载head插件："><a href="#步骤1：-下载head插件：" class="headerlink" title="步骤1： 下载head插件："></a>步骤1： 下载head插件：</h6><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://github.com/mobz/elasticsearch-head</span><br></pre></td></tr></tbody></table></figure><h6 id="步骤2：-将grunt安装为全局命令"><a href="#步骤2：-将grunt安装为全局命令" class="headerlink" title="步骤2： 将grunt安装为全局命令"></a>步骤2： 将grunt安装为全局命令</h6><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install ‐g grunt‐cli</span><br></pre></td></tr></tbody></table></figure><h6 id="步骤3：解决跨域问题"><a href="#步骤3：解决跨域问题" class="headerlink" title="步骤3：解决跨域问题"></a>步骤3：解决跨域问题</h6><p>修改elasticsearch配置文件：elasticsearch.yml，增加以下两句命令：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span> </span><br><span class="line"><span class="string">http.cors.allow‐origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></tbody></table></figure><h6 id="步骤4：-安装依赖并启动"><a href="#步骤4：-安装依赖并启动" class="headerlink" title="步骤4： 安装依赖并启动"></a>步骤4： 安装依赖并启动</h6><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cnpm install</span><br><span class="line">grunt server</span><br></pre></td></tr></tbody></table></figure><h5 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200614170620.png" alt=""></p><h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>Logstash是一款轻量级的日志搜集处理框架，可以方便的把分散的、多样化的日志搜集 起来，并进行自定义的处理，然后传输到指定的位置，比如某个服务器或者文件。</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>命令行参数: </p><p>-e ：执行（很少用）</p><p> -f：路径，后跟参数类型可以是一个字符串的配置或全路径文件名或全路径</p><p> 如：/etc/logstash.d/，logstash会自动读取/etc/logstash.d/目录下所有*.conf 的文 本文件，然后在自己内存里拼接成一个完整的大配置文件再去执行</p><h4 id="使用Logstash将数据库的内容同步到索引库"><a href="#使用Logstash将数据库的内容同步到索引库" class="headerlink" title="使用Logstash将数据库的内容同步到索引库"></a>使用Logstash将数据库的内容同步到索引库</h4><h5 id="模版，用到时直接填写"><a href="#模版，用到时直接填写" class="headerlink" title="模版，用到时直接填写"></a>模版，用到时直接填写</h5><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">{</span></span><br><span class="line">  <span class="string">jdbc</span> <span class="string">{</span></span><br><span class="line">  <span class="comment"># mysql jdbc connection string to our backup databse</span></span><br><span class="line">  <span class="string">jdbc_connection_string</span> <span class="string">=&gt;</span> <span class="string">"jdbc:mysql://192.168.xx.xx:3306/aaaaa?characterEncoding=UTF8"</span></span><br><span class="line">  <span class="comment"># the user we wish to excute our statement as</span></span><br><span class="line">  <span class="string">jdbc_user</span> <span class="string">=&gt;</span> <span class="string">"root"</span></span><br><span class="line">  <span class="string">jdbc_password</span> <span class="string">=&gt;</span> <span class="string">"root"</span></span><br><span class="line">  <span class="comment"># the path to our downloaded jdbc driver  </span></span><br><span class="line">  <span class="string">jdbc_driver_library</span> <span class="string">=&gt;</span> <span class="string">"C:\Users\xu\Desktop\tensquare\logstash-5.6.8\mysqletc\mysql-connector-java-5.1.46.jar"</span></span><br><span class="line">  <span class="comment"># the name of the driver class for mysql</span></span><br><span class="line">  <span class="string">jdbc_driver_class</span> <span class="string">=&gt;</span> <span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">  <span class="string">jdbc_paging_enabled</span> <span class="string">=&gt;</span> <span class="string">"true"</span></span><br><span class="line">  <span class="string">jdbc_page_size</span> <span class="string">=&gt;</span> <span class="string">"50"</span></span><br><span class="line">  <span class="comment">#以下对应着要执行的sql的绝对路径。</span></span><br><span class="line">  <span class="comment">#statement_filepath =&gt; ""</span></span><br><span class="line">  <span class="comment">#这个是要直接执行的sql语句</span></span><br><span class="line">  <span class="string">statement</span> <span class="string">=&gt;</span> <span class="string">""</span><span class="string">select</span> <span class="string">id,title,content,state</span> <span class="string">from</span> <span class="string">tb_article"</span></span><br><span class="line">  <span class="comment">#定时字段 各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新（测试结果，不同的话请留言指出）</span></span><br><span class="line">      <span class="string">schedule</span> <span class="string">=&gt;</span> <span class="string">"* * * * *"</span></span><br><span class="line">  <span class="string">}</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"></span><br><span class="line"><span class="string">output</span> <span class="string">{</span></span><br><span class="line">  <span class="string">elasticsearch</span> <span class="string">{</span></span><br><span class="line">  <span class="comment">#ESIP地址与端口</span></span><br><span class="line">  <span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">"127.0.0.1:9200"</span> </span><br><span class="line">  <span class="comment">#ES索引名称（自己定义的）</span></span><br><span class="line">  <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">"articleindex"</span></span><br><span class="line">  <span class="comment">#自增ID编号</span></span><br><span class="line">  <span class="string">document_id</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%{id}</span>"</span></span><br><span class="line">  <span class="string">document_type</span> <span class="string">=&gt;</span> <span class="string">"article"</span></span><br><span class="line">  <span class="string">}</span></span><br><span class="line">  <span class="string">stdout</span> <span class="string">{</span></span><br><span class="line">      <span class="comment">#以JSON格式输出</span></span><br><span class="line">      <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">json_lines</span></span><br><span class="line">  <span class="string">}</span></span><br><span class="line"><span class="string">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="再通过一下命令执行该文件"><a href="#再通过一下命令执行该文件" class="headerlink" title="再通过一下命令执行该文件"></a>再通过一下命令执行该文件</h5><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">logstash ‐f ../mysqletc/mysql.conf</span><br></pre></td></tr></tbody></table></figure><h5 id="结果返回"><a href="#结果返回" class="headerlink" title="结果返回"></a>结果返回</h5><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">{"@version":"1","id":"1","state":"1","@timestamp":"2020-06-15T03:35:00.106Z","title":"xu测试","content":"测试"}</span><br><span class="line">{"@version":"1","id":"1","state":"1","@timestamp":"2020-06-15T03:34:01.671Z","title":"xu测试","content":"测试"}</span><br></pre></td></tr></tbody></table></figure><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>删除数据库中的文件并不会导致索引库中的数据删除，可以约定一个state，当需要删除的时候更改state的值，在索引库中，查询约定state的值即可实现</p><h3 id="docker安装ES"><a href="#docker安装ES" class="headerlink" title="docker安装ES"></a>docker安装ES</h3><h4 id="安装ES容器"><a href="#安装ES容器" class="headerlink" title="安装ES容器"></a>安装ES容器</h4><h5 id="第一步，安装容器"><a href="#第一步，安装容器" class="headerlink" title="第一步，安装容器"></a>第一步，安装容器</h5><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run ‐di ‐‐name=tensquare_elasticsearch ‐p 9200:9200 ‐p 9300:9300 elasticsearch:5.6.8</span><br></pre></td></tr></tbody></table></figure><h5 id="第二步，允许其他ip地址访问"><a href="#第二步，允许其他ip地址访问" class="headerlink" title="第二步，允许其他ip地址访问"></a>第二步，允许其他ip地址访问</h5><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入elasticsearch容器的目录</span></span><br><span class="line">docker exec ‐it tensquare_elasticsearch /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash">拷贝容器中的配置文件到宿主机</span></span><br><span class="line">docker cp tensquare_elasticsearch:/usr/share/elasticsearch/config/elasticsearch.yml /usr/share/elasticsearch.yml</span><br><span class="line"><span class="meta">#</span><span class="bash">停止删除原来的容器</span></span><br><span class="line">docker stop tensquare_elasticsearch  docker rm tensquare_elasticsearch</span><br><span class="line"><span class="meta">#</span><span class="bash">重新安装容器，并挂载配置文件为/usr/share/elasticsearch.yml</span></span><br><span class="line">docker run ‐di ‐‐name=tensquare_elasticsearch ‐p 9200:9200 ‐p 9300:9300 ‐v /usr/share/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch .yml elasticsearch:5.6.8</span><br><span class="line"><span class="meta">#</span><span class="bash">修改/usr/share/elasticsearch.yml 将<span class="comment">#transport.host:0.0.0.0前的#去掉后保存文件退出。其作用是允许任何ip地址访问elasticsearch，并指定可以跨域</span></span></span><br><span class="line">transport.host:0.0.0.0</span><br><span class="line">http.cors.enabled: true </span><br><span class="line">http.cors.allow‐origin: "*"</span><br><span class="line"><span class="meta">#</span><span class="bash">重启容器</span></span><br><span class="line">docker restart tensquare_elasticsearch</span><br></pre></td></tr></tbody></table></figure><h5 id="第三部，如果遇到容器启动自动关闭，则需要优化配置-每个机器不同优化也不同"><a href="#第三部，如果遇到容器启动自动关闭，则需要优化配置-每个机器不同优化也不同" class="headerlink" title="第三部，如果遇到容器启动自动关闭，则需要优化配置(每个机器不同优化也不同)"></a>第三部，如果遇到容器启动自动关闭，则需要优化配置(每个机器不同优化也不同)</h5><p>可以参考</p><p><a href="https://blog.csdn.net/qq_34756221/article/details/105550037" target="_blank" rel="noopener">https://blog.csdn.net/qq_34756221/article/details/105550037</a></p><p><a href="https://www.cnblogs.com/jasonzeng/p/11584754.html" target="_blank" rel="noopener">https://www.cnblogs.com/jasonzeng/p/11584754.html</a></p><h4 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h4><p>先通过xftp将ik分词文件传送至服务器，再拷贝至es容器目录的plugins中</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker cp ik tensquare_elasticsearch:/usr/share/elasticsearch/plugins/</span><br></pre></td></tr></tbody></table></figure><h4 id="安装header"><a href="#安装header" class="headerlink" title="安装header"></a>安装header</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker run ‐di ‐‐name=myhead ‐p 9100:9100 docker pull mobz/elasticsearch‐ head:5</span><br></pre></td></tr></tbody></table></figure><h4 id="成功页面展示"><a href="#成功页面展示" class="headerlink" title="成功页面展示"></a>成功页面展示</h4><h5 id="head插件展示"><a href="#head插件展示" class="headerlink" title="head插件展示"></a>head插件展示</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200615164944.png" alt=""></p><h5 id="ik分词器展示"><a href="#ik分词器展示" class="headerlink" title="ik分词器展示"></a>ik分词器展示</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200615165033.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分布式搜索引擎ElasticSearch&quot;&gt;&lt;a href=&quot;#分布式搜索引擎ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;分布式搜索引擎ElasticSearch&quot;&gt;&lt;/a&gt;分布式搜索引擎ElasticSearch&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="ElasticSearch" scheme="https://xulilei.github.io/tags/ElasticSearch/"/>
    
      <category term="Logstash" scheme="https://xulilei.github.io/tags/Logstash/"/>
    
      <category term="ik分词器" scheme="https://xulilei.github.io/tags/ik%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    
      <category term="docker" scheme="https://xulilei.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>DayThree-mongoDB</title>
    <link href="https://xulilei.github.io/2020/06/09/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <id>https://xulilei.github.io/2020/06/09/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%B8%89%E5%A4%A9/</id>
    <published>2020-06-09T08:25:22.000Z</published>
    <updated>2020-06-22T02:57:13.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day03"><a href="#Day03" class="headerlink" title="Day03"></a>Day03</h2><h4 id="什么是MongoDB"><a href="#什么是MongoDB" class="headerlink" title="什么是MongoDB"></a>什么是MongoDB</h4><p>​    MongoDB 是一个跨平台的，面向文档的数据库，是当前 NoSQL 数据库产品中最热 门 的一种。它介于关系数据库和非关系数据库之间，是非关系数据库当中功能最丰富，最像关系数据库的产品。它支持的数据结构非常松散，是类似 JSON 的 BSON 格式，因此可以存储比较复杂的数据类型。</p><h4 id="MongoDB适用场景"><a href="#MongoDB适用场景" class="headerlink" title="MongoDB适用场景"></a>MongoDB适用场景</h4><p>​    适用于场景数据量大，数据价值相对低的情况</p><h4 id="MongoDB体系结构"><a href="#MongoDB体系结构" class="headerlink" title="MongoDB体系结构"></a>MongoDB体系结构</h4><p>（1）MongoDB 的文档（document），相当于关系数据库中的一行记录。 </p><p>（2）多个文档组成一个集合（collection），相当于关系数据库的表。 </p><p>（3）多个集合（collection），逻辑上组织在一起，就是数据库（database）。</p><h4 id="服务器创建Docker-MongoDB容器"><a href="#服务器创建Docker-MongoDB容器" class="headerlink" title="服务器创建Docker MongoDB容器"></a>服务器创建Docker MongoDB容器</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@pinyoyougou-docker ~]# docker run -di --name=tensquare_mongo -p 27017:27017 mongo</span><br></pre></td></tr></tbody></table></figure><h4 id="MongoDB语法"><a href="#MongoDB语法" class="headerlink" title="MongoDB语法"></a>MongoDB语法</h4><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">use 数据库名称//如果不存在则自动创建</span><br></pre></td></tr></tbody></table></figure><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">db.集合名称.insert(数据);//插入文档的语法格式</span><br><span class="line">比如db.spit.insert({<span class="keyword">content</span>:<span class="string">"听说十次方课程很给力呀"</span>,userid:<span class="string">"1011"</span>,nickname:<span class="string">"小雅"</span>,visits:NumberInt(<span class="number">902</span>)})</span><br></pre></td></tr></tbody></table></figure><h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">db.集合名称.find()//查询所有</span><br><span class="line">db.spit.find().limit(3)//限定返回3条</span><br><span class="line">db.spit.find({userid:'1013'})//查询userid=1013的文档</span><br></pre></td></tr></tbody></table></figure><h5 id="修改与删除数据"><a href="#修改与删除数据" class="headerlink" title="修改与删除数据"></a>修改与删除数据</h5><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">db.集合名称.update(条件,修改后的数据)</span><br><span class="line">//如果我们想修改_id为<span class="number">1</span>的记录，浏览量为<span class="number">1000</span>，输入以下语句：</span><br><span class="line">db.spit.update({_id:<span class="string">"1"</span>},{visits:NumberInt(<span class="number">1000</span>)})</span><br><span class="line">执行后，我们会发现，这条文档除了visits字段其它字段都不见了，为了解决这个问题，我们需要使用修改器$<span class="keyword">set</span>来实现，命令如下：</span><br><span class="line">db.spit.update({_id:<span class="string">"2"</span>},{$<span class="keyword">set</span>:{visits:NumberInt(<span class="number">2000</span>)}})</span><br><span class="line">//删除指定文档</span><br><span class="line">db.集合名称.remove(条件)</span><br></pre></td></tr></tbody></table></figure><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">MongoDB的模糊查询是通过正则表达式的方式实现的</span><br><span class="line">格式为：db.集合名称.find({content:/aaa/})</span><br><span class="line">例如，我要查询吐槽内容包含“流量”的所有文档，代码如下：</span><br><span class="line">db.spit.find({content:/流量/})</span><br><span class="line">如果要查询吐槽内容中以“加班”开头的，代码如下：</span><br><span class="line">db.spit.find({content:/^加班/})</span><br></pre></td></tr></tbody></table></figure><h5 id="大于-小于-不等于"><a href="#大于-小于-不等于" class="headerlink" title="大于 小于 不等于"></a>大于 小于 不等于</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">db.集合名称.find({ "field" : { $gt: value }}) // 大于: field &gt; value</span><br><span class="line">db.集合名称.find({ "field" : { $lt: value }}) // 小于: field &lt; value</span><br><span class="line">db.集合名称.find({ "field" : { $gte: value }}) // 大于等于: field &gt;= value</span><br><span class="line">db.集合名称.find({ "field" : { $lte: value }}) // 小于等于: field &lt;= value</span><br><span class="line">db.集合名称.find({ "field" : { $ne: value }}) // 不等于: field != value</span><br></pre></td></tr></tbody></table></figure><h5 id="包含与不包含"><a href="#包含与不包含" class="headerlink" title="包含与不包含"></a>包含与不包含</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">包含使用$in操作符。</span><br><span class="line">示例：查询吐槽集合中userid字段包含1013和1014的文档</span><br><span class="line">db.spit.find({userid:{$in:["1013","1014"]}})</span><br><span class="line">不包含使用$nin操作符。</span><br><span class="line">示例：查询吐槽集合中userid字段不包含1013和1014的文档</span><br><span class="line">db.spit.find({userid:{$nin:["1013","1014"]}})</span><br></pre></td></tr></tbody></table></figure><h5 id="条件连接"><a href="#条件连接" class="headerlink" title="条件连接"></a>条件连接</h5><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">我们如果需要查询同时满足两个以上条件，需要使用$and操作符将条件进行关联。（相当于SQL的and）</span><br><span class="line">格式为：$and:[{ },{ },{ }]</span><br><span class="line">示例：查询吐槽集合中visits大于等于1000 并且小于2000的文档</span><br><span class="line">db.spit.find({$and:[ {visits:{$gte:1000}} ,{visits:{$lt:2000}}]})</span><br><span class="line"></span><br><span class="line">如果两个以上条件之间是或者的关系，我们使用 操作符进行关联，与前面and的使用方式相同</span><br><span class="line">格式为：$or:[{ },{ },{ }]</span><br><span class="line">示例：查询吐槽集合中userid为1013，或者浏览量小于2000的文档记录</span><br><span class="line">db.spit.find({$or:[ {userid:"1013"} ,{visits:{$lt:2000} }]})</span><br></pre></td></tr></tbody></table></figure><h5 id="列值增长"><a href="#列值增长" class="headerlink" title="列值增长"></a>列值增长</h5><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">如果我们想实现对某列值在原有值的基础上进行增加或减少，可以使用$inc运算符来实现</span><br><span class="line">db.spit.update({_id:<span class="string">"2"</span>},{$inc:{visits:NumberInt(<span class="number">1</span>)}})</span><br></pre></td></tr></tbody></table></figure><h4 id="JAVA操作MongoDB"><a href="#JAVA操作MongoDB" class="headerlink" title="JAVA操作MongoDB"></a>JAVA操作MongoDB</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDemo</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    MongoClient client=<span class="keyword">new</span> MongoClient(<span class="string">"192.168.184.134"</span>);<span class="comment">//创建连接</span></span><br><span class="line">    MongoDatabase spitdb = client.getDatabase(<span class="string">"spitdb"</span>);<span class="comment">//打开数据库</span></span><br><span class="line">    MongoCollection&lt;Document&gt; spit = spitdb.getCollection(<span class="string">"spit"</span>);<span class="comment">//获取集合</span></span><br><span class="line">     <span class="comment">//条件查询</span></span><br><span class="line">     <span class="comment">//BasicDBObject bson=new BasicDBObject("userid","1013");// 构建查询条件</span></span><br><span class="line">     <span class="comment">//BasicDBObject bson=new BasicDBObject("visits",newBasicDBObject("$gt",1000) );</span></span><br><span class="line">     <span class="comment">//FindIterable&lt;Document&gt; documents = spit.find(bson);//查询记录获取结果集合</span></span><br><span class="line">    FindIterable&lt;Document&gt; documents = spit.find();<span class="comment">//查询记录获取文档集合</span></span><br><span class="line">    <span class="keyword">for</span>(Document document:documents){ <span class="comment">//</span></span><br><span class="line">      System.out.println(<span class="string">"内容："</span>+ document.getString(<span class="string">"content"</span>));</span><br><span class="line">      System.out.println(<span class="string">"用户ID:"</span>+document.getString(<span class="string">"userid"</span>));</span><br><span class="line">      System.out.println(<span class="string">"浏览量："</span>+document.getInteger(<span class="string">"visits"</span>));</span><br><span class="line">    }</span><br><span class="line">     <span class="comment">//插入数据</span></span><br><span class="line">     Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap();</span><br><span class="line">     map.put(<span class="string">"content"</span>,<span class="string">"我要吐槽"</span>);</span><br><span class="line">     map.put(<span class="string">"userid"</span>,<span class="string">"9999"</span>);</span><br><span class="line">     map.put(<span class="string">"visits"</span>,<span class="number">123</span>);</span><br><span class="line">     map.put(<span class="string">"publishtime"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">     Document document=<span class="keyword">new</span> Document(map);</span><br><span class="line">     spit.insertOne(document);</span><br><span class="line">     client.close();<span class="comment">//关闭连接</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="SpringDataMongoDB"><a href="#SpringDataMongoDB" class="headerlink" title="SpringDataMongoDB"></a>SpringDataMongoDB</h4><p>增删改查与SpringDataJPA几乎一样，详细用法参考<a href="https://xulilei.github.io/2020/06/08/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AEDay2/">https://xulilei.github.io/2020/06/08/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AEDay2/</a></p><h5 id="通过MongoTemplate原生方式实现数据自增"><a href="#通过MongoTemplate原生方式实现数据自增" class="headerlink" title="通过MongoTemplate原生方式实现数据自增"></a>通过MongoTemplate原生方式实现数据自增</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thumbUp</span><span class="params">(String id)</span></span>{</span><br><span class="line">        <span class="comment">//方式一,与数据库多次交互性能较低</span></span><br><span class="line">        Spit spit=spitDao.findById(id).get();</span><br><span class="line">        spit.setThumbup((spit.getThumbup()==<span class="keyword">null</span>?<span class="number">0</span>:spit.getThumbup())+<span class="number">1</span>);</span><br><span class="line">        spitDao.save(spit);</span><br><span class="line">        <span class="comment">//相当于使用原生mongo命令实现自增：db.spit.update({"_id":"1"},{$inc:{thumbup:NumberInt(1)}})</span></span><br><span class="line">        Query query=<span class="keyword">new</span> Query();</span><br><span class="line">        query.addCriteria(Criteria.where(<span class="string">"_id"</span>).is(<span class="string">"id"</span>));</span><br><span class="line">        Update update=<span class="keyword">new</span> Update();</span><br><span class="line">        update.inc(<span class="string">"thumbup"</span>,<span class="number">1</span>);</span><br><span class="line">        mongoTemplate.updateFirst(query,update,<span class="string">"spit"</span>);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Day03&quot;&gt;&lt;a href=&quot;#Day03&quot; class=&quot;headerlink&quot; title=&quot;Day03&quot;&gt;&lt;/a&gt;Day03&lt;/h2&gt;&lt;h4 id=&quot;什么是MongoDB&quot;&gt;&lt;a href=&quot;#什么是MongoDB&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="MongoDB" scheme="https://xulilei.github.io/tags/MongoDB/"/>
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>DayTwo-SpringDataJpa</title>
    <link href="https://xulilei.github.io/2020/06/08/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AEDay2/"/>
    <id>https://xulilei.github.io/2020/06/08/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AEDay2/</id>
    <published>2020-06-08T07:23:13.000Z</published>
    <updated>2020-06-18T07:50:05.929Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringDataJpa"><a href="#SpringDataJpa" class="headerlink" title="SpringDataJpa"></a>SpringDataJpa</h3><h4 id="通过new-Specification实现条件查询"><a href="#通过new-Specification实现条件查询" class="headerlink" title="通过new Specification实现条件查询"></a>通过new Specification实现条件查询</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Label&gt; <span class="title">findSearch</span><span class="params">(Label label)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> labelDao.findAll(<span class="keyword">new</span> Specification&lt;Label&gt;() {</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 采用内部类，方式实现</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root 根对象，也就是说要把条件封装到哪个对象中去</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> query 查询关键字，比如groupBy，orderBy等</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cb 用来封装条件对象的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> 如果返回null，则代表不需要任何条件</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Label&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>{</span><br><span class="line">                List&lt;Predicate&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="comment">//相当于 where labelname like "%小明%"</span></span><br><span class="line">                <span class="keyword">if</span>(label.getLabelname()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getLabelname())){</span><br><span class="line">                    Predicate predicate = cb.like(root.get("labelname").as(String.class), "%" +           label.getLabelname() + "%");</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                }</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(label.getState()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getState())){</span><br><span class="line">                    Predicate predicate = cb.equal(root.get(<span class="string">"state"</span>).as(String<span class="class">.<span class="keyword">class</span>),  <span class="title">label</span>.<span class="title">getState</span>())</span>;</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                }</span><br><span class="line">                Predicate[] parr=<span class="keyword">new</span> Predicate[list.size()];</span><br><span class="line">                list.toArray(parr);</span><br><span class="line">                <span class="comment">//相当于查询where condition A and condition B</span></span><br><span class="line">                <span class="keyword">return</span> cb.and(parr);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"><span class="comment">//controller层</span></span><br><span class="line"> <span class="meta">@RequestMapping</span>(value = <span class="string">"/search"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findSearch</span><span class="params">(@RequestBody Label label)</span></span>{</span><br><span class="line">        List&lt;Label&gt;list=labelService.findSearch(label);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"查询成功"</span>,list);</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h4 id="分页与条件查询"><a href="#分页与条件查询" class="headerlink" title="分页与条件查询"></a>分页与条件查询</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Label&gt; <span class="title">findSearchAndPageQuery</span><span class="params">(Label label, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">        <span class="comment">//封装一个分页对象</span></span><br><span class="line">        Pageable pageable=PageRequest.of(page-<span class="number">1</span>,size);</span><br><span class="line">        <span class="keyword">return</span> labelDao.findAll(<span class="keyword">new</span> Specification&lt;Label&gt;() {</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> root 根对象，也就是说要把条件封装到哪个对象中去</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> query 查询关键字，比如groupBy，orderBy等</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cb 用来封装条件对象的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> 如果返回null，则代表不需要任何条件</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Label&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>{</span><br><span class="line">                List&lt;Predicate&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="comment">//相当于 where labelname like "%小明%"</span></span><br><span class="line">                <span class="keyword">if</span>(label.getLabelname()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getLabelname())){</span><br><span class="line">                    Predicate predicate = cb.like(root.get("labelname").as(String.class), "%" + label.getLabelname() + "%");</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(label.getState()!=<span class="keyword">null</span>&amp;&amp;!<span class="string">""</span>.equals(label.getState())){</span><br><span class="line">                    Predicate predicate = cb.equal(root.get(<span class="string">"state"</span>).as(String<span class="class">.<span class="keyword">class</span>),  <span class="title">label</span>.<span class="title">getState</span>())</span>;</span><br><span class="line">                    list.add(predicate);</span><br><span class="line">                }</span><br><span class="line">                Predicate[] parr=<span class="keyword">new</span> Predicate[list.size()];</span><br><span class="line">                list.toArray(parr);</span><br><span class="line">                <span class="keyword">return</span> cb.and(parr);</span><br><span class="line">            }</span><br><span class="line">        },pageable);</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//controller层</span></span><br><span class="line"> <span class="meta">@RequestMapping</span>(value = <span class="string">"/search/{page}/{size}"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findSearchAndPageQuery</span><span class="params">(@RequestBody Label label,@PathVariable <span class="keyword">int</span> page,@PathVariable <span class="keyword">int</span> size)</span></span>{</span><br><span class="line">        Page&lt;Label&gt; pageData=labelService.findSearchAndPageQuery(label,page,size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">"查询成功"</span>,<span class="keyword">new</span> PageResult&lt;Label&gt;(pageData.getTotalElements(),pageData.getContent()));</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//用来封装pageResult的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; rows;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotal</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(<span class="keyword">long</span> total)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getRows</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRows</span><span class="params">(List&lt;T&gt; rows)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.rows = rows;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(<span class="keyword">long</span> total, List&lt;T&gt; rows)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.rows = rows;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="在Dao层通过方法命名方式生成sql语句"><a href="#在Dao层通过方法命名方式生成sql语句" class="headerlink" title="在Dao层通过方法命名方式生成sql语句"></a>在Dao层通过方法命名方式生成sql语句</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EnterpriseDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Enterprise</span>,<span class="title">String</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Enterprise</span>&gt;</span>{</span><br><span class="line">      <span class="comment">//相当于where ishot=? </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Enterprise&gt; <span class="title">findByIshot</span><span class="params">(String ishot)</span></span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RecruitDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Recruit</span>,<span class="title">String</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Recruit</span>&gt;</span>{</span><br><span class="line"><span class="comment">//相当于where state=？ order by Createtime，并且取前6个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Recruit&gt; <span class="title">findTop6ByStateOrderByCreatetimeDesc</span><span class="params">(String state)</span></span>;</span><br><span class="line">    <span class="comment">//相当于where state！=？order by createtime。并且取前6个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Recruit&gt; <span class="title">findTop6ByStateNotOrderByCreatetimeDesc</span><span class="params">(String state)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>具体命名规则参考<a href="https://www.cnblogs.com/oxygenG/p/10057525.html。" target="_blank" rel="noopener">https://www.cnblogs.com/oxygenG/p/10057525.html。</a></p><h4 id="处理多对多关系"><a href="#处理多对多关系" class="headerlink" title="处理多对多关系"></a>处理多对多关系</h4><p>在数据库端处理多对多的关系，必须需要借助中间表。而在java端，只需要在一个对象中放入另一个对象的list集合即可。如果不创建实体类，则需要通过原生的sql语句执行</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//通过这个查询语句，才能够实现pageable的分页功能</span></span><br><span class="line"><span class="meta">@Query</span>(value=<span class="string">"SELECT *  FROM tb_problem,tb_pl WHERE id=problemid AND labelid=:labelid ORDER BY ?#{#pageable}"</span>,</span><br><span class="line">       countQuery = <span class="string">"select count(*) from tb_problem ,tb_pl where id=problemid AND labelid=:labelid"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Problem&gt; <span class="title">newList</span><span class="params">(@Param(<span class="string">"labelid"</span>)</span> String labelid, Pageable pageable)</span>;</span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="https://blog.csdn.net/tt____tt/article/details/81027269?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">https://blog.csdn.net/tt____tt/article/details/81027269?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></p><h4 id="事务支持"><a href="#事务支持" class="headerlink" title="事务支持"></a>事务支持</h4><p>1、Dao层，在可能产生线程问题的语句上添加@Modifying</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"update tb_article set state='1' where id=?1"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateState</span><span class="params">(String id)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>2、Service层开启注解支持@Transactional</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="缓存的应用"><a href="#缓存的应用" class="headerlink" title="缓存的应用"></a>缓存的应用</h4><h5 id="Redis–有过期时间限制"><a href="#Redis–有过期时间限制" class="headerlink" title="Redis–有过期时间限制"></a>Redis–有过期时间限制</h5><p>1、添加SpringDataRedis依赖</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、服务端Docker开启Redis镜像，生成redis容器</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@pinyoyougou-docker ~]# docker run -di --name=tensquare_redis -p 6379:6379 redis</span><br></pre></td></tr></tbody></table></figure><p>3、application.ymal配置host</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="string">.*.*</span></span><br></pre></td></tr></tbody></table></figure><p>4、业务逻辑调用</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">findById</span><span class="params">(String id)</span> </span>{</span><br><span class="line"><span class="comment">//先从缓存中查询当前对象</span></span><br><span class="line">Article article= (Article) redisTemplate.opsForValue().get(<span class="string">"article_"</span>+id);</span><br><span class="line"><span class="comment">//如果没有渠道</span></span><br><span class="line"><span class="keyword">if</span>(article==<span class="keyword">null</span>){</span><br><span class="line">article = articleDao.findById(id).get();</span><br><span class="line"><span class="comment">//存入缓存</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"article_"</span>+id,article);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> article;</span><br><span class="line">}</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        <span class="comment">//删除缓存</span></span><br><span class="line">redisTemplate.delete(<span class="string">"article_"</span>+id);</span><br><span class="line">articleDao.deleteById(id);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>redisTemplate用法</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">stringRedisTemplate.opsForValue().set(<span class="string">"test"</span>, <span class="string">"100"</span>,<span class="number">60</span>*<span class="number">10</span>,TimeUnit.SECONDS);<span class="comment">//向redis里存入数据和设置缓存时间</span></span><br><span class="line">stringRedisTemplate.opsForValue().get(<span class="string">"test"</span>)<span class="comment">//根据key获取缓存中的val</span></span><br><span class="line">stringRedisTemplate.delete(<span class="string">"test"</span>);<span class="comment">//根据key删除缓存</span></span><br><span class="line">stringRedisTemplate.hasKey(<span class="string">"546545"</span>);<span class="comment">//检查key是否存在，返回boolean值</span></span><br></pre></td></tr></tbody></table></figure><h5 id="SpringCache–无过期时间限制"><a href="#SpringCache–无过期时间限制" class="headerlink" title="SpringCache–无过期时间限制"></a>SpringCache–无过期时间限制</h5><p>1、SpringApplication开启SpringCache</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatApplication</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、业务层调用，@Cacheable为存，@CacheEvict为删</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="meta">@Cacheable</span>(value = <span class="string">"gathering"</span>,key = <span class="string">"#id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Gathering <span class="title">findById</span><span class="params">(String id)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> gatheringDao.findById(id).get();</span><br><span class="line">}</span><br><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"gathering"</span>,key = <span class="string">"#gathering.id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Gathering gathering)</span> </span>{</span><br><span class="line">gatheringDao.save(gathering);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="第二天总结"><a href="#第二天总结" class="headerlink" title="第二天总结"></a>第二天总结</h3><p>掌握了条件与分页查询，Dao层方法命名规则，事务支持，缓存</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SpringDataJpa&quot;&gt;&lt;a href=&quot;#SpringDataJpa&quot; class=&quot;headerlink&quot; title=&quot;SpringDataJpa&quot;&gt;&lt;/a&gt;SpringDataJpa&lt;/h3&gt;&lt;h4 id=&quot;通过new-Specification实现
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="SpringDataJPA" scheme="https://xulilei.github.io/tags/SpringDataJPA/"/>
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门篇</title>
    <link href="https://xulilei.github.io/2020/06/05/Docker%E5%85%A5%E9%97%A8/"/>
    <id>https://xulilei.github.io/2020/06/05/Docker%E5%85%A5%E9%97%A8/</id>
    <published>2020-06-05T07:57:43.000Z</published>
    <updated>2020-06-15T09:09:13.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker入门"><a href="#Docker入门" class="headerlink" title="Docker入门"></a>Docker入门</h1><h4 id="Dokcer为什么会出现？"><a href="#Dokcer为什么会出现？" class="headerlink" title="Dokcer为什么会出现？"></a>Dokcer为什么会出现？</h4><p>一款产品从开发到上线，一般都需要两套环境。而环境的配置十分麻烦，Docker给出了解决方案</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><p>java–jar（环境）–打包项目带上环境（即Docker镜像）–Docker仓库–下载我们发布的镜像–直接运行即可。</p><h4 id="虚拟机技术特点"><a href="#虚拟机技术特点" class="headerlink" title="虚拟机技术特点"></a>虚拟机技术特点</h4><p>1、资源占用十分多</p><p>2、冗余步骤多</p><p>3、启动很慢</p><p>如下图所示，多个APP共享一个lib环境，可能会造成端口冲突等环境冲突的问题</p><p><img src="https://gitee.com/xulilei/pic/raw/master/TIM%E5%9B%BE%E7%89%8720200603160240.png" alt=""></p><h4 id="容器化技术"><a href="#容器化技术" class="headerlink" title="容器化技术"></a>容器化技术</h4><p>如下图所示，每个模块拥有独属于自己运行的环境，各个模块之间相互隔离</p><p><img src="https://gitee.com/xulilei/pic/raw/master/20200603160535.png" alt=""></p><h4 id="Docker的相关概念"><a href="#Docker的相关概念" class="headerlink" title="Docker的相关概念"></a>Docker的相关概念</h4><h5 id="Docker架构图"><a href="#Docker架构图" class="headerlink" title="Docker架构图"></a>Docker架构图</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200603161527.png" alt=""></p><h5 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h5><h6 id="镜像：images"><a href="#镜像：images" class="headerlink" title="镜像：images"></a>镜像：images</h6><p>​    通过这个模版来创建容器服务，比如Mysql镜像–通过Docker运行后，便成为了一个提供服务的容器,一个镜像可以创建多个容器</p><h5 id="容器：container"><a href="#容器：container" class="headerlink" title="容器：container"></a>容器：container</h5><p>​    提供服务，可以启动、停止、删除等，可类比为一个简单的linux系统</p><h5 id="仓库：repository"><a href="#仓库：repository" class="headerlink" title="仓库：repository"></a>仓库：repository</h5><p>​    存放镜像的地方，分为共有仓库和私有仓库</p><h4 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h4><p>1、search：可在命令行和dockerHub上搜索对应版本</p><p>2、pull：拉去下载该镜像</p><p>3、docker images：查看本机上的镜像</p><p>3、运行该镜像 </p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --name nginx01 -p 3344:80 nginx </span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个名字为nginx01的nginx镜像，公网访问地址为3344，内部地址为80，并运行该镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d 后台运行、--name 命名、-p 端口号</span></span><br></pre></td></tr></tbody></table></figure><p>4、内部测试</p><p>​    curl localhost:3344</p><h4 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h4><h5 id="结构示意图如下"><a href="#结构示意图如下" class="headerlink" title="结构示意图如下"></a>结构示意图如下</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200605154253.png" alt=""></p><p>防止容器删除后数据丢失，通过实现容器间数据共享，并将产生的数据备份到linux的文件系统上</p><p>总结一句话就是：容器的持久化和容器间的同步操作。</p><h5 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h5><p>​    -v 主机目录:容器内目录  —&gt;映射容器内的目录到主机上</p><p>​    参考<a href="https://xulilei.github.io/2020/06/12/elasticSearch入门/">https://xulilei.github.io/2020/06/12/elasticSearch%E5%85%A5%E9%97%A8/</a> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker入门&quot;&gt;&lt;a href=&quot;#Docker入门&quot; class=&quot;headerlink&quot; title=&quot;Docker入门&quot;&gt;&lt;/a&gt;Docker入门&lt;/h1&gt;&lt;h4 id=&quot;Dokcer为什么会出现？&quot;&gt;&lt;a href=&quot;#Dokcer为什么会出现？&quot; c
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://xulilei.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Docker" scheme="https://xulilei.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>DayOne-架构</title>
    <link href="https://xulilei.github.io/2020/06/02/%E5%8D%81%E6%AC%A1%E6%96%B9%E7%A4%BE%E4%BA%A4%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE/"/>
    <id>https://xulilei.github.io/2020/06/02/%E5%8D%81%E6%AC%A1%E6%96%B9%E7%A4%BE%E4%BA%A4%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-06-02T11:02:13.000Z</published>
    <updated>2020-06-18T07:49:55.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DayOne"><a href="#DayOne" class="headerlink" title="DayOne"></a>DayOne</h2><h3 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h3><p>SpringBoot+SpringCloud+SpringMVC+SpringData，也称这种架构模式为spring全家桶</p><h3 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h3><p>不再采取按dao，service层划分模块，而是基于每个微服务，再将每个模块封装成一个镜像，再通过springCloud连接起来。因此在每个微服务中便不需要再写接口，因为每个微服务就是最小模块 </p><p><img src="https://gitee.com/xulilei/pic/raw/master/image-20200602161001068.png" alt=""></p><h3 id="开发API"><a href="#开发API" class="headerlink" title="开发API"></a>开发API</h3><p>通过swagger封装，Nginx代理，形成的API开发文档</p><p><img src="https://gitee.com/xulilei/pic/raw/master/image-20200602154755423.png" alt=""></p><h3 id="Restful开发风格"><a href="#Restful开发风格" class="headerlink" title="Restful开发风格"></a>Restful开发风格</h3><p>我们在项目中经常用到增删改查：get/post/put/delete四种方法，安全：操作不会出现脏读、幻读等操作。幂等：查询成功后不会对数据库造成影响</p><ul><li>Get查询是安全且幂等的</li><li>Post是不安全且不幂等的</li><li>Put改是不安全且幂等的</li><li>Delete删是不安全且幂等的</li></ul><h3 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h3><h4 id="Mysql环境搭建"><a href="#Mysql环境搭建" class="headerlink" title="Mysql环境搭建"></a>Mysql环境搭建</h4><p>创建虚拟机，安装docker，下载Mysql镜像，在服务器(192.168.152.128)运行并从本地连接完成建表</p><h4 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h4><p>主要是一些子模块都需要的依赖配置在这里</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud全家桶父工程推荐默认配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="模块搭建"><a href="#模块搭建" class="headerlink" title="模块搭建"></a>模块搭建</h4><h5 id="公共模块搭建，根据swagger约定，封装数据传输到前端。其中utils包下的idWoker根据雪花算法，可以生成不同的ID，吞吐量为20W-。"><a href="#公共模块搭建，根据swagger约定，封装数据传输到前端。其中utils包下的idWoker根据雪花算法，可以生成不同的ID，吞吐量为20W-。" class="headerlink" title="公共模块搭建，根据swagger约定，封装数据传输到前端。其中utils包下的idWoker根据雪花算法，可以生成不同的ID，吞吐量为20W+。"></a>公共模块搭建，根据swagger约定，封装数据传输到前端。其中utils包下的idWoker根据雪花算法，可以生成不同的ID，吞吐量为20W+。</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608145934.png" alt=""></p><h5 id="基础模块搭建，数据的CRUD操作"><a href="#基础模块搭建，数据的CRUD操作" class="headerlink" title="基础模块搭建，数据的CRUD操作"></a>基础模块搭建，数据的CRUD操作</h5><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608150627.png" alt=""></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tensquare.base.pojo.Label;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span><br><span class="line"><span class="comment">//SpringDataJpa封装了CRUD操作，以及一些复杂的条件查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LabelDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Label</span>,<span class="title">String</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Label</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Day01总结"><a href="#Day01总结" class="headerlink" title="Day01总结"></a>Day01总结</h3><h4 id="在服务器端，通过Docker创建了Mysql镜像"><a href="#在服务器端，通过Docker创建了Mysql镜像" class="headerlink" title="在服务器端，通过Docker创建了Mysql镜像"></a>在服务器端，通过Docker创建了Mysql镜像</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608151611.png" alt=""></p><h4 id="通过本地IDEA的DataSource连接上去。"><a href="#通过本地IDEA的DataSource连接上去。" class="headerlink" title="通过本地IDEA的DataSource连接上去。"></a>通过本地IDEA的DataSource连接上去。</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608151109.png" alt=""></p><h4 id="通过PostMan检查当天的CRUD操作"><a href="#通过PostMan检查当天的CRUD操作" class="headerlink" title="通过PostMan检查当天的CRUD操作"></a>通过PostMan检查当天的CRUD操作</h4><p><img src="https://gitee.com/xulilei/pic/raw/master/20200608151349.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DayOne&quot;&gt;&lt;a href=&quot;#DayOne&quot; class=&quot;headerlink&quot; title=&quot;DayOne&quot;&gt;&lt;/a&gt;DayOne&lt;/h2&gt;&lt;h3 id=&quot;系统架构&quot;&gt;&lt;a href=&quot;#系统架构&quot; class=&quot;headerlink&quot; title=&quot;系
      
    
    </summary>
    
    
      <category term="十次方项目" scheme="https://xulilei.github.io/categories/%E5%8D%81%E6%AC%A1%E6%96%B9%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://xulilei.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
</feed>
